{
  "global": {
    "agent": {
      "AgentService": {
        "_id": "AgentService",
        "_type": {
          "_id": "AgentService",
          "collection": false,
          "name": "AgentService"
        }
      }
    },
    "authentication": {
      "_id": "",
      "_type": {
        "_id": "EMPTY",
        "collection": false,
        "name": "Core"
      },
      "authenticators": [
        "com.sun.identity.authentication.modules.ad.AD",
        "org.forgerock.openam.authentication.modules.saml2.SAML2",
        "org.forgerock.openam.authentication.modules.social.SocialAuthInstagram",
        "org.forgerock.openam.authentication.modules.oath.OATH",
        "org.forgerock.openam.authentication.modules.social.SocialAuthVK",
        "com.sun.identity.authentication.modules.membership.Membership",
        "com.sun.identity.authentication.modules.windowsdesktopsso.WindowsDesktopSSO",
        "org.forgerock.openam.authentication.modules.deviceprint.DeviceIdSave",
        "com.sun.identity.authentication.modules.federation.Federation",
        "org.forgerock.openam.authentication.modules.deviceprint.DeviceIdMatch",
        "com.sun.identity.authentication.modules.jdbc.JDBC",
        "com.sun.identity.authentication.modules.radius.RADIUS",
        "com.sun.identity.authentication.modules.anonymous.Anonymous",
        "com.sun.identity.authentication.modules.cert.Cert",
        "org.forgerock.openam.authentication.modules.push.registration.AuthenticatorPushRegistration",
        "com.sun.identity.authentication.modules.httpbasic.HTTPBasic",
        "org.forgerock.openam.authentication.modules.oidc.OpenIdConnect",
        "com.sun.identity.authentication.modules.sae.SAE",
        "org.forgerock.openam.authentication.modules.social.SocialAuthWeChat",
        "org.forgerock.openam.authentication.modules.persistentcookie.PersistentCookie",
        "org.forgerock.openam.authentication.modules.social.SocialAuthTwitter",
        "com.sun.identity.authentication.modules.ldap.LDAP",
        "org.forgerock.openam.authentication.modules.push.AuthenticatorPush",
        "org.forgerock.openam.authentication.modules.oauth2.OAuth",
        "com.sun.identity.authentication.modules.nt.NT",
        "org.forgerock.openam.authentication.modules.social.SocialAuthWeChatMobile",
        "org.forgerock.openam.authentication.modules.jwtpop.JwtProofOfPossession",
        "com.sun.identity.authentication.modules.application.Application",
        "org.forgerock.openam.authentication.modules.scripted.Scripted",
        "org.forgerock.openam.authentication.modules.social.SocialAuthOAuth2",
        "com.sun.identity.authentication.modules.hotp.HOTP",
        "org.forgerock.openam.authentication.modules.adaptive.Adaptive",
        "org.forgerock.openam.authentication.modules.accountactivecheck.AccountActiveCheck",
        "org.forgerock.openam.authentication.modules.social.SocialAuthOpenID",
        "com.sun.identity.authentication.modules.msisdn.MSISDN",
        "org.forgerock.openam.authentication.modules.fr.oath.AuthenticatorOATH",
        "com.sun.identity.authentication.modules.datastore.DataStore",
        "com.sun.identity.authentication.modules.securid.SecurID",
        "org.forgerock.openam.authentication.modules.amster.Amster"
      ],
      "defaults": {
        "accountlockout": {
          "lockoutDuration": 0,
          "lockoutDurationMultiplier": 1,
          "lockoutWarnUserCount": 0,
          "loginFailureCount": 5,
          "loginFailureDuration": 300,
          "loginFailureLockoutMode": false,
          "storeInvalidAttemptsInDataStore": true
        },
        "core": {
          "adminAuthModule": "[Empty]",
          "orgConfig": "[Empty]"
        },
        "general": {
          "defaultAuthLevel": 0,
          "identityType": [
            "agent",
            "user"
          ],
          "locale": "en_US",
          "statelessSessionsEnabled": false,
          "twoFactorRequired": false,
          "userStatusCallbackPlugins": []
        },
        "postauthprocess": {
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": [
            "/am/console"
          ],
          "userAttributeSessionMapping": [],
          "usernameGeneratorClass": "com.sun.identity.authentication.spi.DefaultUserIDGenerator",
          "usernameGeneratorEnabled": true
        },
        "security": {
          "addClearSiteDataHeader": true,
          "moduleBasedAuthEnabled": true,
          "sharedSecret": null,
          "zeroPageLoginAllowedWithoutReferrer": true,
          "zeroPageLoginEnabled": false,
          "zeroPageLoginReferrerWhiteList": []
        },
        "trees": {
          "authenticationSessionsMaxDuration": 5,
          "authenticationSessionsStateManagement": "JWT",
          "authenticationSessionsWhitelist": false,
          "authenticationTreeCookieHttpOnly": true,
          "suspendedAuthenticationTimeout": 5
        },
        "userprofile": {
          "aliasAttributeName": [],
          "defaultRole": [],
          "dynamicProfileCreation": "false"
        }
      },
      "keepPostProcessInstances": false,
      "ldapConnectionPoolDefaultSize": "1:10",
      "ldapConnectionPoolSize": [],
      "remoteAuthSecurityEnabled": false
    },
    "authenticationChains": {
      "EMPTY": {
        "_id": "",
        "_type": {
          "_id": "EMPTY",
          "collection": false,
          "name": "Authentication Configuration"
        },
        "dynamic": {
          "authChainConfiguration": "[Empty]"
        }
      }
    },
    "authenticationModules": {
      "accountactivecheck": {
        "_id": "accountactivecheck",
        "_type": {
          "_id": "accountactivecheck",
          "collection": false,
          "name": "Account Active Check"
        },
        "defaults": {
          "authenticationLevel": 0
        }
      },
      "activedirectory": {
        "_id": "activedirectory",
        "_type": {
          "_id": "activedirectory",
          "collection": false,
          "name": "Active Directory"
        },
        "defaults": {
          "authenticationLevel": 0,
          "connectionHeartbeatInterval": 1,
          "connectionHeartbeatTimeUnit": "MINUTES",
          "openam-auth-ldap-connection-mode": "LDAP",
          "operationTimeout": 0,
          "primaryLdapServer": [
            "localhost:50636"
          ],
          "profileAttributeMappings": [],
          "returnUserDN": true,
          "searchScope": "SUBTREE",
          "secondaryLdapServer": [],
          "stopLdapbindAfterInmemoryLockedEnabled": false,
          "trustAllServerCertificates": false,
          "userBindDN": "cn=Directory Manager",
          "userProfileRetrievalAttribute": "uid",
          "userSearchAttributes": [
            "uid"
          ],
          "userSearchStartDN": [
            "dc=openam,dc=forgerock,dc=org"
          ]
        }
      },
      "adaptiverisk": {
        "_id": "adaptiverisk",
        "_type": {
          "_id": "adaptiverisk",
          "collection": false,
          "name": "Adaptive Risk "
        },
        "defaults": {
          "attributecheck": {
            "invertProfileRiskAttributeScore": false,
            "profileRiskAttributeCheckEnabled": false,
            "profileRiskAttributeScore": 1
          },
          "authfailed": {
            "failedAuthenticationCheckEnabled": false,
            "failureScore": 1,
            "invertFailureScore": false
          },
          "devicecookie": {
            "deviceCookieCheckEnabled": false,
            "deviceCookieName": "Device",
            "deviceCookieScore": 1,
            "invertDeviceCookieScore": false,
            "saveDeviceCookieValueOnSuccessfulLogin": false
          },
          "general": {
            "authenticationLevel": 0,
            "riskThreshold": 1
          },
          "geolocation": {
            "geolocationCheckEnabled": false,
            "geolocationScore": 1,
            "invertGeolocationScore": false
          },
          "iphistory": {
            "invertIPHistoryScore": false,
            "ipHistoryCheckEnabled": false,
            "ipHistoryCount": 5,
            "ipHistoryProfileAttribute": "iphistory",
            "ipHistoryScore": 1,
            "saveSuccessfulIP": false
          },
          "iprange": {
            "invertIPRangeScoreEnabled": false,
            "ipRange": [
              "10.0.0.0/24"
            ],
            "ipRangeCheckEnabled": false,
            "ipRangeScore": 1
          },
          "knowncookie": {
            "createKnownCookieOnSuccessfulLogin": false,
            "invertKnownCookieScore": false,
            "knownCookieCheckEnabled": false,
            "knownCookieScore": 1
          },
          "lastlogin": {
            "invertTimeSinceLastLoginScore": false,
            "saveLastLoginTimeOnSuccessfulLogin": false,
            "timeSinceLastLoginCheckEnabled": false,
            "timeSinceLastLoginScore": 1
          },
          "requestheader": {
            "invertRequestHeaderScore": false,
            "requestHeaderCheckEnabled": false,
            "requestHeaderScore": 1
          }
        }
      },
      "amster": {
        "_id": "amster",
        "_type": {
          "_id": "amster",
          "collection": false,
          "name": "ForgeRock Amster"
        },
        "defaults": {
          "authenticationLevel": 0,
          "authorizedKeys": "/home/prestonhales/am/security/keys/amster/authorized_keys",
          "enabled": true
        }
      },
      "anonymous": {
        "_id": "anonymous",
        "_type": {
          "_id": "anonymous",
          "collection": false,
          "name": "Anonymous"
        },
        "defaults": {
          "authenticationLevel": 0,
          "caseSensitiveUsernameMatchingEnabled": false,
          "defaultAnonymousUsername": "anonymous",
          "validAnonymousUsers": []
        }
      },
      "authJwtPoP": {
        "_id": "authJwtPoP",
        "_type": {
          "_id": "authJwtPoP",
          "collection": false,
          "name": "JWT Proof of Possession (PoP)"
        },
        "defaults": {
          "authenticationLevel": 0,
          "enableTlsSessionBinding": true,
          "responseEncryptionCipher": "A128GCM",
          "responseEncryptionMethod": "ECDHE"
        }
      },
      "authPush": {
        "_id": "authPush",
        "_type": {
          "_id": "authPush",
          "collection": false,
          "name": "ForgeRock Authenticator (Push)"
        },
        "defaults": {
          "authenticationLevel": 0,
          "pushMessage": "Login attempt from {{user}} at {{issuer}}",
          "timeoutInMilliSecconds": 120000
        }
      },
      "authPushReg": {
        "_id": "authPushReg",
        "_type": {
          "_id": "authPushReg",
          "collection": false,
          "name": "ForgeRock Authenticator (Push) Registration"
        },
        "defaults": {
          "appleLink": "https://itunes.apple.com/app/forgerock-authenticator/id1038442926",
          "authenticationLevel": 0,
          "bgcolour": "#519387",
          "googleLink": "https://play.google.com/store/apps/details?id=com.forgerock.authenticator",
          "issuer": "ForgeRock",
          "timeoutInMilliSecconds": 120000
        }
      },
      "authSaml": {
        "_id": "authSaml",
        "_type": {
          "_id": "authSaml",
          "collection": false,
          "name": "SAML2"
        },
        "defaults": {
          "allowCreate": "true",
          "authComparison": "exact",
          "authenticationLevel": 0,
          "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
          "entityName": "http://",
          "forceAuthn": "false",
          "isPassive": "false",
          "metaAlias": "/sp",
          "nameIdFormat": "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
          "reqBinding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
          "sloEnabled": "false",
          "sloRelay": "http://"
        }
      },
      "authSocialInstagram": {
        "_id": "authSocialInstagram",
        "_type": {
          "_id": "authSocialInstagram",
          "collection": false,
          "name": "Social Auth Instagram"
        },
        "defaults": {
          "accountProvisioning": {
            "accountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|instagram-",
            "accountMapperConfiguration": [
              "id=uid"
            ],
            "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
            "anonymousUserName": "anonymous",
            "attributeMapperConfiguration": [
              "id=uid",
              "full_name=sn",
              "username=cn",
              "username=givenName"
            ],
            "attributeMappingClasses": [
              "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|uid|instagram-"
            ],
            "createAccount": true,
            "enableRegistrationService": false,
            "mapToAnonymousUser": false,
            "saveAttributesInSession": true
          },
          "core": {
            "authenticationLevel": 0,
            "authorizeEndpoint": "https://api.instagram.com/oauth/authorize",
            "logoutBehaviour": "prompt",
            "logoutServiceUrl": "https://instagram.com/accounts/logout",
            "provider": "Instagram",
            "scope": [
              "basic"
            ],
            "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
            "subjectProperty": "id",
            "tokenEndpoint": "https://api.instagram.com/oauth/access_token",
            "userInfoEndpoint": "https://api.instagram.com/v1/users/self",
            "usesBasicAuth": false
          }
        }
      },
      "authSocialOAuth2": {
        "_id": "authSocialOAuth2",
        "_type": {
          "_id": "authSocialOAuth2",
          "collection": false,
          "name": "Social Auth OAuth2"
        },
        "defaults": {
          "accountProvisioning": {
            "accountMapperConfiguration": [],
            "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
            "anonymousUserName": "anonymous",
            "attributeMapperConfiguration": [],
            "attributeMappingClasses": [],
            "createAccount": true,
            "enableRegistrationService": false,
            "mapToAnonymousUser": false,
            "promptPasswordFlag": false,
            "saveAttributesInSession": true
          },
          "core": {
            "authenticationLevel": 0,
            "logoutBehaviour": "prompt",
            "mixUpMitigation": false,
            "scope": [],
            "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
            "usesBasicAuth": true
          },
          "emailSettings": {
            "emailGateway": "org.forgerock.openam.authentication.modules.oauth2.DefaultEmailGatewayImpl",
            "smtpHost": "localhost",
            "smtpPort": "25"
          }
        }
      },
      "authSocialOpenID": {
        "_id": "authSocialOpenID",
        "_type": {
          "_id": "authSocialOpenID",
          "collection": false,
          "name": "Social Auth OpenID"
        },
        "defaults": {
          "accountProvisioning": {
            "accountMapperConfiguration": [],
            "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
            "anonymousUserName": "anonymous",
            "attributeMapperConfiguration": [],
            "attributeMappingClasses": [],
            "createAccount": true,
            "enableRegistrationService": false,
            "mapToAnonymousUser": false,
            "promptPasswordFlag": false,
            "saveAttributesInSession": true
          },
          "core": {
            "authenticationLevel": 0,
            "logoutBehaviour": "prompt",
            "mixUpMitigation": false,
            "scope": [
              "openid"
            ],
            "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
            "usesBasicAuth": true
          },
          "emailSettings": {
            "emailGateway": "org.forgerock.openam.authentication.modules.oauth2.DefaultEmailGatewayImpl",
            "smtpHost": "localhost",
            "smtpPort": "25"
          }
        }
      },
      "authSocialTwitter": {
        "_id": "authSocialTwitter",
        "_type": {
          "_id": "authSocialTwitter",
          "collection": false,
          "name": "Social Auth Twitter"
        },
        "defaults": {
          "accountProvisioning": {
            "accountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|twitter-",
            "accountMapperConfiguration": [
              "id_str=uid"
            ],
            "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
            "anonymousUserName": "anonymous",
            "attributeMapperConfiguration": [
              "full_name=sn",
              "username=cn",
              "id_str=uid",
              "username=givenName"
            ],
            "attributeMappingClasses": [
              "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|uid|twitter-"
            ],
            "createAccount": true,
            "enableRegistrationService": false,
            "mapToAnonymousUser": false,
            "saveAttributesInSession": true
          },
          "core": {
            "authenticationLevel": 0,
            "authorizeEndpoint": "https://api.twitter.com/oauth/authenticate",
            "provider": "Twitter",
            "requestTokenEndpoint": "https://api.twitter.com/oauth/request_token",
            "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
            "subjectProperty": "id_str",
            "tokenEndpoint": "https://api.twitter.com/oauth/access_token",
            "userInfoEndpoint": "https://api.twitter.com/1.1/account/verify_credentials.json",
            "usesBasicAuth": false
          }
        }
      },
      "authSocialVk": {
        "_id": "authSocialVk",
        "_type": {
          "_id": "authSocialVk",
          "collection": false,
          "name": "Social Auth VKontakte"
        },
        "defaults": {
          "accountProvisioning": {
            "accountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|uid|vkontakte-",
            "accountMapperConfiguration": [
              "id=uid"
            ],
            "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
            "anonymousUserName": "anonymous",
            "attributeMapperConfiguration": [
              "first_name=givenName",
              "first_name=cn",
              "id=uid",
              "last_name=sn",
              "email=mail"
            ],
            "attributeMappingClasses": [
              "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|uid|vkontakte-"
            ],
            "createAccount": true,
            "enableRegistrationService": false,
            "mapToAnonymousUser": false,
            "promptPasswordFlag": false,
            "saveAttributesInSession": true
          },
          "core": {
            "apiVersion": "5.73",
            "authorizeEndpoint": "https://oauth.vk.com/authorize",
            "forgerock-am-auth-socialauthvk-auth-level": 0,
            "provider": "VKontakte",
            "scope": [
              "email"
            ],
            "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
            "subjectProperty": "id",
            "tokenEndpoint": "https://oauth.vk.com/access_token",
            "userInfoEndpoint": "https://api.vk.com/method/users.get"
          },
          "emailSettings": {
            "emailGateway": "org.forgerock.openam.authentication.modules.oauth2.DefaultEmailGatewayImpl",
            "smtpHost": "localhost",
            "smtpPort": "25"
          }
        }
      },
      "authSocialWeChat": {
        "_id": "authSocialWeChat",
        "_type": {
          "_id": "authSocialWeChat",
          "collection": false,
          "name": "Social Auth WeChat"
        },
        "defaults": {
          "accountProvisioning": {
            "accountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|wechat-",
            "accountMapperConfiguration": [
              "openid=uid"
            ],
            "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
            "anonymousUserName": "anonymous",
            "attributeMapperConfiguration": [
              "nickname=givenName",
              "openid=uid",
              "nickname=cn",
              "nickname=sn"
            ],
            "attributeMappingClasses": [
              "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|uid|wechat-"
            ],
            "createAccount": true,
            "enableRegistrationService": false,
            "mapToAnonymousUser": false,
            "promptPasswordFlag": false,
            "saveAttributesInSession": true
          },
          "core": {
            "authenticationLevel": 0,
            "authorizeEndpoint": "https://open.weixin.qq.com/connect/qrconnect",
            "provider": "WeChat",
            "scope": [
              "snsapi_login"
            ],
            "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
            "subjectProperty": "openid",
            "tokenEndpoint": "https://api.wechat.com/sns/oauth2/access_token",
            "userInfoEndpoint": "https://api.wechat.com/sns/userinfo",
            "usesBasicAuth": false
          },
          "emailSettings": {
            "emailGateway": "org.forgerock.openam.authentication.modules.oauth2.DefaultEmailGatewayImpl",
            "smtpHost": "localhost",
            "smtpPort": "25"
          }
        }
      },
      "authSocialWeChatMobile": {
        "_id": "authSocialWeChatMobile",
        "_type": {
          "_id": "authSocialWeChatMobile",
          "collection": false,
          "name": "Social Auth WeChat Mobile"
        },
        "defaults": {
          "accountProvisioning": {
            "accountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|wechat-",
            "accountMapperConfiguration": [
              "openid=uid"
            ],
            "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
            "anonymousUserName": "anonymous",
            "attributeMapperConfiguration": [
              "nickname=givenName",
              "openid=uid",
              "nickname=cn",
              "nickname=sn"
            ],
            "attributeMappingClasses": [
              "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|uid|wechat-"
            ],
            "createAccount": true,
            "enableRegistrationService": false,
            "mapToAnonymousUser": false,
            "promptPasswordFlag": false,
            "saveAttributesInSession": true
          },
          "core": {
            "authenticationLevel": 0,
            "provider": "WeChat",
            "scope": [
              "snsapi_userinfo"
            ],
            "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
            "subjectProperty": "openid",
            "userInfoEndpoint": "https://api.wechat.com/sns/userinfo"
          },
          "emailSettings": {
            "emailGateway": "org.forgerock.openam.authentication.modules.oauth2.DefaultEmailGatewayImpl",
            "smtpHost": "localhost",
            "smtpPort": "25"
          }
        }
      },
      "authenticatoroath": {
        "_id": "authenticatoroath",
        "_type": {
          "_id": "authenticatoroath",
          "collection": false,
          "name": "ForgeRock Authenticator (OATH)"
        },
        "defaults": {
          "addChecksumToOtpEnabled": "False",
          "authenticationLevel": 0,
          "frOathOtpMaxRetry": 3,
          "hotpWindowSize": 100,
          "minimumSecretKeyLength": 32,
          "oathAlgorithm": "HOTP",
          "passwordLength": "6",
          "totpMaximumClockDrift": 5,
          "totpTimeStepInterval": 30,
          "totpTimeStepsInWindow": 2,
          "truncationOffset": -1
        }
      },
      "certificate": {
        "_id": "certificate",
        "_type": {
          "_id": "certificate",
          "collection": false,
          "name": "Certificate"
        },
        "defaults": {
          "authenticationLevel": 0,
          "cacheCRLsInMemory": true,
          "certificateAttributeProfileMappingExtension": "none",
          "certificateAttributeToProfileMapping": "subject CN",
          "certificateLdapServers": [
            "localhost:50636"
          ],
          "crlMatchingCertificateAttribute": "CN",
          "iplanet-am-auth-cert-gw-cert-preferred": false,
          "ldapCertificateAttribute": "CN",
          "ldapSearchStartDN": [],
          "matchCACertificateToCRL": false,
          "matchCertificateInLdap": false,
          "matchCertificateToCRL": false,
          "ocspValidationEnabled": false,
          "sslEnabled": false,
          "trustedRemoteHosts": [
            "none"
          ],
          "updateCRLsFromDistributionPoint": true,
          "userBindDN": "cn=Directory Manager"
        }
      },
      "datastore": {
        "_id": "datastore",
        "_type": {
          "_id": "datastore",
          "collection": false,
          "name": "Data Store"
        },
        "defaults": {
          "authenticationLevel": 0
        }
      },
      "deviceidmatch": {
        "_id": "deviceidmatch",
        "_type": {
          "_id": "deviceidmatch",
          "collection": false,
          "name": "Device Id (Match)"
        },
        "defaults": {
          "authenticationLevel": 0,
          "clientScript": "157298c0-7d31-4059-a95b-eeb08473b7e5",
          "clientScriptEnabled": true,
          "serverScript": "703dab1a-1921-4981-98dd-b8e5349d8548"
        }
      },
      "deviceidsave": {
        "_id": "deviceidsave",
        "_type": {
          "_id": "deviceidsave",
          "collection": false,
          "name": "Device Id (Save)"
        },
        "defaults": {
          "authenticationLevel": 0,
          "autoStoreProfiles": false,
          "maxProfilesAllowed": 5
        }
      },
      "federation": {
        "_id": "federation",
        "_type": {
          "_id": "federation",
          "collection": false,
          "name": "Federation"
        },
        "defaults": {
          "authenticationLevel": 0
        }
      },
      "hotp": {
        "_id": "hotp",
        "_type": {
          "_id": "hotp",
          "collection": false,
          "name": "HOTP"
        },
        "defaults": {
          "authenticationLevel": 0,
          "autoSendOTP": false,
          "otpDeliveryMethod": "SMS and E-mail",
          "otpLength": "8",
          "otpMaxRetry": 3,
          "otpValidityDuration": 5,
          "smsGatewayClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
          "smtpFromAddress": "no-reply@openam.org",
          "smtpHostPort": 465,
          "smtpHostname": "smtp.gmail.com",
          "smtpSslEnabled": "SSL",
          "smtpUserPassword": null,
          "smtpUsername": "opensso.sun",
          "userProfileEmailAttribute": "mail",
          "userProfileTelephoneAttribute": "telephoneNumber"
        }
      },
      "httpbasic": {
        "_id": "httpbasic",
        "_type": {
          "_id": "httpbasic",
          "collection": false,
          "name": "HTTP Basic"
        },
        "defaults": {
          "authenticationLevel": 0
        }
      },
      "jdbc": {
        "_id": "jdbc",
        "_type": {
          "_id": "jdbc",
          "collection": false,
          "name": "JDBC"
        },
        "defaults": {
          "authenticationLevel": 0,
          "connectionPoolJndiName": "java:comp/env/jdbc/samplePool",
          "connectionType": "JNDI",
          "jdbcDriver": "com.mysql.jdbc.Driver",
          "jdbcUrl": "jdbc:mysql://127.0.0.1:3306/test",
          "password": null,
          "passwordColumn": "PASSWORD_COLUMN",
          "passwordStatement": "select PASSWORD_COLUMN from TABLE where USERNAME_COLUMN = ?",
          "passwordTransformClass": "com.sun.identity.authentication.modules.jdbc.ClearTextTransform",
          "username": "root"
        }
      },
      "ldap": {
        "_id": "ldap",
        "_type": {
          "_id": "ldap",
          "collection": false,
          "name": "LDAP"
        },
        "defaults": {
          "authenticationLevel": 0,
          "beheraPasswordPolicySupportEnabled": true,
          "connectionHeartbeatInterval": 10,
          "connectionHeartbeatTimeUnit": "SECONDS",
          "minimumPasswordLength": "8",
          "openam-auth-ldap-connection-mode": "LDAP",
          "operationTimeout": 0,
          "primaryLdapServer": [
            "localhost:50636"
          ],
          "profileAttributeMappings": [],
          "returnUserDN": true,
          "searchScope": "SUBTREE",
          "secondaryLdapServer": [],
          "stopLdapbindAfterInmemoryLockedEnabled": false,
          "trustAllServerCertificates": false,
          "userBindDN": "cn=Directory Manager",
          "userProfileRetrievalAttribute": "uid",
          "userSearchAttributes": [
            "uid"
          ],
          "userSearchStartDN": [
            "dc=openam,dc=forgerock,dc=org"
          ]
        }
      },
      "membership": {
        "_id": "membership",
        "_type": {
          "_id": "membership",
          "collection": false,
          "name": "Membership"
        },
        "defaults": {
          "authenticationLevel": 0,
          "defaultUserRoles": [],
          "defaultUserStatus": "Active",
          "minimumPasswordLength": 8
        }
      },
      "msisdn": {
        "_id": "msisdn",
        "_type": {
          "_id": "msisdn",
          "collection": false,
          "name": "MSISDN"
        },
        "defaults": {
          "authenticationLevel": 0,
          "baseSearchDN": [
            "dc=openam,dc=forgerock,dc=org"
          ],
          "ldapProviderUrl": [
            "localhost:50636"
          ],
          "ldapSslEnabled": false,
          "ldapUserBindDN": "cn=Directory Manager",
          "msisdnParameterNames": [],
          "msisdnRequestSearchLocations": [
            "searchRequest",
            "searchParam",
            "searchCookie"
          ],
          "msisdnUserNamingAttribute": "uid",
          "returnUserDN": true,
          "trustedGatewayIPAddresses": [],
          "userProfileMsisdnAttribute": "sunIdentityMSISDNNumber"
        }
      },
      "oath": {
        "_id": "oath",
        "_type": {
          "_id": "oath",
          "collection": false,
          "name": "OATH"
        },
        "defaults": {
          "addChecksum": "False",
          "authenticationLevel": 0,
          "forgerock-oath-maximum-clock-drift": 0,
          "forgerock-oath-sharedsecret-implementation-class": "org.forgerock.openam.authentication.modules.oath.plugins.DefaultSharedSecretProvider",
          "hotpWindowSize": 100,
          "minimumSecretKeyLength": "32",
          "oathAlgorithm": "HOTP",
          "oathOtpMaxRetry": 3,
          "passwordLength": "6",
          "stepsInWindow": 2,
          "timeStepSize": 30,
          "truncationOffset": -1
        }
      },
      "oauth2": {
        "_id": "oauth2",
        "_type": {
          "_id": "oauth2",
          "collection": false,
          "name": "Legacy OAuth 2.0 / OpenID Connect"
        },
        "defaults": {
          "accessTokenEndpointUrl": "https://graph.facebook.com/oauth/access_token",
          "accessTokenParameterName": "access_token",
          "accountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper",
          "accountMapperConfiguration": [
            "id=facebook-id",
            "email=mail"
          ],
          "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
          "anonymousUserName": "anonymous",
          "attributeMapperConfiguration": [
            "first_name=givenname",
            "id=facebook-id",
            "email=facebook-email",
            "last_name=facebook-lname",
            "first_name=facebook-fname",
            "name=cn",
            "email=mail",
            "last_name=sn"
          ],
          "attributeMappingClasses": [
            "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper"
          ],
          "authenticationEndpointUrl": "https://www.facebook.com/dialog/oauth",
          "authenticationLevel": 0,
          "createAccount": true,
          "logoutBehaviour": "prompt",
          "mailGatewayClass": "org.forgerock.openam.authentication.modules.oauth2.DefaultEmailGatewayImpl",
          "mapToAnonymousUser": false,
          "mixUpMitigation": false,
          "promptForPassword": true,
          "saveAttributesInSession": true,
          "scope": "email,read_stream",
          "smtpFromAddress": "info@forgerock.com",
          "smtpHostName": "localhost",
          "smtpHostPort": "25",
          "ssoProxyUrl": "http://localhost:8080/am/oauth2c/OAuthProxy.jsp",
          "userProfileServiceUrl": "https://graph.facebook.com/me"
        }
      },
      "openidconnect": {
        "_id": "openidconnect",
        "_type": {
          "_id": "openidconnect",
          "collection": false,
          "name": "OpenID Connect id_token bearer"
        },
        "defaults": {
          "acceptedAuthorizedParties": [
            "http://www.example.com/authorized/party",
            "AuthorizedPartyExample"
          ],
          "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
          "audienceName": "example",
          "cryptoContextType": ".well-known/openid-configuration_url",
          "cryptoContextValue": "https://accounts.google.com/.well-known/openid-configuration",
          "idTokenHeaderName": "oidc_id_token",
          "idTokenIssuer": "accounts.google.com",
          "jwtToLdapAttributeMappings": [
            "sub=uid",
            "email=mail"
          ],
          "principalMapperClass": "org.forgerock.openam.authentication.modules.oidc.JwtAttributeMapper",
          "useSubClaimIfNoMatch": false
        }
      },
      "persistentcookie": {
        "_id": "persistentcookie",
        "_type": {
          "_id": "persistentcookie",
          "collection": false,
          "name": "Persistent Cookie"
        },
        "defaults": {
          "cookieName": "session-jwt",
          "enforceClientIP": false,
          "idleTimeout": 5,
          "maxLife": 5,
          "useHttpOnlyCookie": true,
          "useSecureCookie": true
        }
      },
      "radius": {
        "_id": "radius",
        "_type": {
          "_id": "radius",
          "collection": false,
          "name": "RADIUS"
        },
        "defaults": {
          "authenticationLevel": 0,
          "healthCheckInterval": 5,
          "primaryRadiusServers": [
            "127.0.0.1"
          ],
          "secondaryRadiusServers": [
            "127.0.0.1"
          ],
          "serverPortNumber": 1645,
          "serverTimeout": 3,
          "stopRadiusbindAfterInmemoryLockedEnabled": false
        }
      },
      "sae": {
        "_id": "sae",
        "_type": {
          "_id": "sae",
          "collection": false,
          "name": "SAE"
        },
        "defaults": {
          "authenticationLevel": 0
        }
      },
      "scripted": {
        "_id": "scripted",
        "_type": {
          "_id": "scripted",
          "collection": false,
          "name": "Scripted Module"
        },
        "defaults": {
          "authenticationLevel": 1,
          "clientScript": "[Empty]",
          "clientScriptEnabled": true,
          "serverScript": "7e3d7067-d50f-4674-8c76-a3e13a810c33"
        }
      },
      "securid": {
        "_id": "securid",
        "_type": {
          "_id": "securid",
          "collection": false,
          "name": "SecurID"
        },
        "defaults": {
          "authenticationLevel": 0,
          "serverConfigPath": "/home/prestonhales/am/config/auth/ace/data"
        }
      },
      "windowsdesktopsso": {
        "_id": "windowsdesktopsso",
        "_type": {
          "_id": "windowsdesktopsso",
          "collection": false,
          "name": "Windows Desktop SSO"
        },
        "defaults": {
          "authenticationLevel": 0,
          "kerberosServiceIsinitiator": true,
          "lookupUserInRealm": false,
          "returnPrincipalWithDomainName": false,
          "trustedKerberosRealms": []
        }
      },
      "windowsnt": {
        "_id": "windowsnt",
        "_type": {
          "_id": "windowsnt",
          "collection": false,
          "name": "Windows NT"
        },
        "defaults": {
          "authenticationLevel": 0
        }
      }
    },
    "authenticationTreesConfiguration": {
      "EMPTY": {
        "_id": "",
        "_type": {
          "_id": "EMPTY",
          "collection": false,
          "name": "Authentication Trees Configuration"
        }
      }
    },
    "realm": {
      "L2ZpcnN0": {
        "_id": "L2ZpcnN0",
        "active": true,
        "aliases": [
          "one",
          "dnsfirst"
        ],
        "name": "first",
        "parentPath": "/"
      },
      "L2ZpcnN0L3NlY29uZA": {
        "_id": "L2ZpcnN0L3NlY29uZA",
        "active": false,
        "aliases": [
          "secondDNS",
          "second"
        ],
        "name": "second",
        "parentPath": "/first"
      },
      "Lw": {
        "_id": "Lw",
        "active": true,
        "aliases": [
          "localhost",
          "openam-frodo-dev.classic.com",
          "openam",
          "testurl.com"
        ],
        "name": "/",
        "parentPath": ""
      }
    },
    "scripttype": {
      "AUTHENTICATION_CLIENT_SIDE": {
        "_id": "AUTHENTICATION_CLIENT_SIDE",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "AUTHENTICATION_CLIENT_SIDE",
          "allowLists": {},
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "[Empty]",
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "AUTHENTICATION_SERVER_SIDE": {
        "_id": "AUTHENTICATION_SERVER_SIDE",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "AUTHENTICATION_SERVER_SIDE",
          "allowLists": {
            "1.0": [
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Character",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.ArrayList$Itr",
              "java.util.ArrayList",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.Cookie",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Form",
              "org.forgerock.http.protocol.Header",
              "org.forgerock.http.protocol.Headers",
              "org.forgerock.http.protocol.Message",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.RequestCookies",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.http.protocol.ResponseException",
              "org.forgerock.http.protocol.Responses",
              "org.forgerock.http.protocol.Status",
              "org.forgerock.json.JsonValue",
              "org.forgerock.openam.authentication.modules.scripted.*",
              "org.forgerock.openam.core.rest.devices.deviceprint.DeviceIdDao",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.ScriptedSession",
              "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.util.promise.Promise",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Character",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.ArrayList$Itr",
              "java.util.ArrayList",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.Cookie",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Form",
              "org.forgerock.http.protocol.Header",
              "org.forgerock.http.protocol.Headers",
              "org.forgerock.http.protocol.Message",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.RequestCookies",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.http.protocol.ResponseException",
              "org.forgerock.http.protocol.Responses",
              "org.forgerock.http.protocol.Status",
              "org.forgerock.json.JsonValue",
              "org.forgerock.openam.authentication.modules.scripted.*",
              "org.forgerock.openam.core.rest.devices.deviceprint.DeviceIdDao",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.ScriptedSession",
              "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.util.promise.Promise",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Character",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.ArrayList$Itr",
            "java.util.ArrayList",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.Cookie",
            "org.forgerock.http.protocol.Entity",
            "org.forgerock.http.protocol.Form",
            "org.forgerock.http.protocol.Header",
            "org.forgerock.http.protocol.Headers",
            "org.forgerock.http.protocol.Message",
            "org.forgerock.http.protocol.Request",
            "org.forgerock.http.protocol.RequestCookies",
            "org.forgerock.http.protocol.Response",
            "org.forgerock.http.protocol.ResponseException",
            "org.forgerock.http.protocol.Responses",
            "org.forgerock.http.protocol.Status",
            "org.forgerock.json.JsonValue",
            "org.forgerock.openam.authentication.modules.scripted.*",
            "org.forgerock.openam.core.rest.devices.deviceprint.DeviceIdDao",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.ScriptedSession",
            "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.util.promise.NeverThrowsException",
            "org.forgerock.util.promise.Promise",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "java.util.List",
            "java.util.Map",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.opendj.ldap.Dn",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "AUTHENTICATION_TREE_DECISION_NODE": {
        "_id": "AUTHENTICATION_TREE_DECISION_NODE",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "AUTHENTICATION_TREE_DECISION_NODE",
          "allowLists": {
            "1.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$*",
              "java.util.ArrayList",
              "java.util.Collections",
              "java.util.Collections$*",
              "java.util.concurrent.TimeUnit",
              "java.util.concurrent.ExecutionException",
              "java.util.concurrent.TimeoutException",
              "java.util.HashSet",
              "java.util.HashMap",
              "java.util.HashMap$KeyIterator",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.security.KeyPair",
              "java.security.KeyPairGenerator",
              "java.security.KeyPairGenerator$*",
              "java.security.PrivateKey",
              "java.security.PublicKey",
              "java.security.spec.InvalidKeySpecException",
              "java.security.spec.X509EncodedKeySpec",
              "java.security.spec.MGF1ParameterSpec",
              "javax.crypto.SecretKeyFactory",
              "javax.crypto.spec.OAEPParameterSpec",
              "javax.crypto.spec.PBEKeySpec",
              "javax.crypto.spec.PSource",
              "javax.crypto.spec.PSource$*",
              "javax.security.auth.callback.NameCallback",
              "javax.security.auth.callback.PasswordCallback",
              "javax.security.auth.callback.ChoiceCallback",
              "javax.security.auth.callback.ConfirmationCallback",
              "javax.security.auth.callback.LanguageCallback",
              "javax.security.auth.callback.TextInputCallback",
              "javax.security.auth.callback.TextOutputCallback",
              "com.sun.crypto.provider.PBKDF2KeyImpl",
              "com.sun.identity.authentication.callbacks.HiddenValueCallback",
              "com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
              "com.sun.identity.authentication.spi.HttpCallback",
              "com.sun.identity.authentication.spi.MetadataCallback",
              "com.sun.identity.authentication.spi.RedirectCallback",
              "com.sun.identity.authentication.spi.X509CertificateCallback",
              "com.sun.identity.shared.debug.Debug",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.Client",
              "org.forgerock.http.Handler",
              "org.forgerock.http.Context",
              "org.forgerock.http.context.RootContext",
              "org.forgerock.http.protocol.Cookie",
              "org.forgerock.http.header.*",
              "org.forgerock.http.header.authorization.*",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Form",
              "org.forgerock.http.protocol.Header",
              "org.forgerock.http.protocol.Headers",
              "org.forgerock.http.protocol.Message",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.RequestCookies",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.http.protocol.ResponseException",
              "org.forgerock.http.protocol.Responses",
              "org.forgerock.http.protocol.Status",
              "org.forgerock.json.JsonValue",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.util.promise.Promise",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.auth.node.api.Action",
              "org.forgerock.openam.auth.node.api.Action$ActionBuilder",
              "org.forgerock.openam.authentication.callbacks.IdPCallback",
              "org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
              "org.forgerock.openam.authentication.callbacks.ValidatedPasswordCallback",
              "org.forgerock.openam.authentication.callbacks.ValidatedUsernameCallback",
              "org.forgerock.openam.core.rest.authn.callbackhandlers.*",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.ScriptedSession",
              "groovy.json.JsonSlurper",
              "org.forgerock.openam.core.rest.devices.profile.DeviceProfilesDao",
              "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.scripting.api.secrets.Secret",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.openam.auth.node.api.NodeState",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "org.mozilla.javascript.ConsString",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.openam.authentication.callbacks.BooleanAttributeInputCallback",
              "org.forgerock.openam.authentication.callbacks.NumberAttributeInputCallback",
              "org.forgerock.openam.authentication.callbacks.StringAttributeInputCallback",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ],
            "2.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$*",
              "java.util.ArrayList",
              "java.util.Collections",
              "java.util.concurrent.TimeUnit",
              "java.util.Collections$*",
              "java.util.HashSet",
              "java.util.HashMap$KeyIterator",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeSet",
              "java.security.KeyPair",
              "java.security.KeyPairGenerator",
              "java.security.KeyPairGenerator$*",
              "java.security.PrivateKey",
              "java.security.PublicKey",
              "java.security.spec.X509EncodedKeySpec",
              "java.security.spec.MGF1ParameterSpec",
              "javax.crypto.SecretKeyFactory",
              "javax.crypto.spec.OAEPParameterSpec",
              "javax.crypto.spec.PBEKeySpec",
              "javax.crypto.spec.PSource",
              "javax.crypto.spec.PSource$*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.util.promise.Promise",
              "java.util.concurrent.ExecutionException",
              "java.util.concurrent.TimeoutException",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.core.rest.authn.callbackhandlers.*",
              "com.sun.crypto.provider.PBKDF2KeyImpl",
              "org.forgerock.openam.core.rest.devices.profile.DeviceProfilesDao",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "org.mozilla.javascript.ConsString",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "ch.qos.logback.classic.Logger",
              "org.forgerock.util.promise.Promises$*",
              "com.sun.proxy.$*",
              "java.util.Date",
              "java.security.spec.InvalidKeySpecException",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0",
              "2.0"
            ]
          }
        },
        "defaultScript": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.AbstractMap$*",
            "java.util.ArrayList",
            "java.util.Collections",
            "java.util.Collections$*",
            "java.util.concurrent.TimeUnit",
            "java.util.concurrent.ExecutionException",
            "java.util.concurrent.TimeoutException",
            "java.util.HashSet",
            "java.util.HashMap",
            "java.util.HashMap$KeyIterator",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "java.security.KeyPair",
            "java.security.KeyPairGenerator",
            "java.security.KeyPairGenerator$*",
            "java.security.PrivateKey",
            "java.security.PublicKey",
            "java.security.spec.InvalidKeySpecException",
            "java.security.spec.X509EncodedKeySpec",
            "java.security.spec.MGF1ParameterSpec",
            "javax.crypto.SecretKeyFactory",
            "javax.crypto.spec.OAEPParameterSpec",
            "javax.crypto.spec.PBEKeySpec",
            "javax.crypto.spec.PSource",
            "javax.crypto.spec.PSource$*",
            "javax.security.auth.callback.NameCallback",
            "javax.security.auth.callback.PasswordCallback",
            "javax.security.auth.callback.ChoiceCallback",
            "javax.security.auth.callback.ConfirmationCallback",
            "javax.security.auth.callback.LanguageCallback",
            "javax.security.auth.callback.TextInputCallback",
            "javax.security.auth.callback.TextOutputCallback",
            "com.sun.crypto.provider.PBKDF2KeyImpl",
            "com.sun.identity.authentication.callbacks.HiddenValueCallback",
            "com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
            "com.sun.identity.authentication.spi.HttpCallback",
            "com.sun.identity.authentication.spi.MetadataCallback",
            "com.sun.identity.authentication.spi.RedirectCallback",
            "com.sun.identity.authentication.spi.X509CertificateCallback",
            "com.sun.identity.shared.debug.Debug",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.client.*",
            "org.forgerock.http.Client",
            "org.forgerock.http.Handler",
            "org.forgerock.http.Context",
            "org.forgerock.http.context.RootContext",
            "org.forgerock.http.protocol.Cookie",
            "org.forgerock.http.header.*",
            "org.forgerock.http.header.authorization.*",
            "org.forgerock.http.protocol.Entity",
            "org.forgerock.http.protocol.Form",
            "org.forgerock.http.protocol.Header",
            "org.forgerock.http.protocol.Headers",
            "org.forgerock.http.protocol.Message",
            "org.forgerock.http.protocol.Request",
            "org.forgerock.http.protocol.RequestCookies",
            "org.forgerock.http.protocol.Response",
            "org.forgerock.http.protocol.ResponseException",
            "org.forgerock.http.protocol.Responses",
            "org.forgerock.http.protocol.Status",
            "org.forgerock.json.JsonValue",
            "org.forgerock.util.promise.NeverThrowsException",
            "org.forgerock.util.promise.Promise",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.openam.auth.node.api.Action",
            "org.forgerock.openam.auth.node.api.Action$ActionBuilder",
            "org.forgerock.openam.authentication.callbacks.IdPCallback",
            "org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
            "org.forgerock.openam.authentication.callbacks.ValidatedPasswordCallback",
            "org.forgerock.openam.authentication.callbacks.ValidatedUsernameCallback",
            "org.forgerock.openam.core.rest.authn.callbackhandlers.*",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.ScriptedSession",
            "groovy.json.JsonSlurper",
            "org.forgerock.openam.core.rest.devices.profile.DeviceProfilesDao",
            "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.scripting.api.secrets.Secret",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.openam.auth.node.api.NodeState",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "java.util.List",
            "java.util.Map",
            "org.mozilla.javascript.ConsString",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "org.forgerock.openam.authentication.callbacks.BooleanAttributeInputCallback",
            "org.forgerock.openam.authentication.callbacks.NumberAttributeInputCallback",
            "org.forgerock.openam.authentication.callbacks.StringAttributeInputCallback",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.opendj.ldap.Dn",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "CONFIG_PROVIDER_NODE": {
        "_id": "CONFIG_PROVIDER_NODE",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "CONFIG_PROVIDER_NODE",
          "allowLists": {
            "1.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$*",
              "java.util.ArrayList",
              "java.util.Collections",
              "java.util.Collections$*",
              "java.util.concurrent.TimeUnit",
              "java.util.concurrent.ExecutionException",
              "java.util.concurrent.TimeoutException",
              "java.util.HashSet",
              "java.util.HashMap",
              "java.util.HashMap$KeyIterator",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.security.KeyPair",
              "java.security.KeyPairGenerator",
              "java.security.KeyPairGenerator$*",
              "java.security.PrivateKey",
              "java.security.PublicKey",
              "java.security.spec.InvalidKeySpecException",
              "java.security.spec.X509EncodedKeySpec",
              "java.security.spec.MGF1ParameterSpec",
              "javax.crypto.SecretKeyFactory",
              "javax.crypto.spec.OAEPParameterSpec",
              "javax.crypto.spec.PBEKeySpec",
              "javax.crypto.spec.PSource",
              "javax.crypto.spec.PSource$*",
              "javax.security.auth.callback.NameCallback",
              "javax.security.auth.callback.PasswordCallback",
              "javax.security.auth.callback.ChoiceCallback",
              "javax.security.auth.callback.ConfirmationCallback",
              "javax.security.auth.callback.LanguageCallback",
              "javax.security.auth.callback.TextInputCallback",
              "javax.security.auth.callback.TextOutputCallback",
              "com.sun.crypto.provider.PBKDF2KeyImpl",
              "com.sun.identity.authentication.callbacks.HiddenValueCallback",
              "com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
              "com.sun.identity.authentication.spi.HttpCallback",
              "com.sun.identity.authentication.spi.MetadataCallback",
              "com.sun.identity.authentication.spi.RedirectCallback",
              "com.sun.identity.authentication.spi.X509CertificateCallback",
              "com.sun.identity.shared.debug.Debug",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.Client",
              "org.forgerock.http.Handler",
              "org.forgerock.http.Context",
              "org.forgerock.http.context.RootContext",
              "org.forgerock.http.protocol.Cookie",
              "org.forgerock.http.header.*",
              "org.forgerock.http.header.authorization.*",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Form",
              "org.forgerock.http.protocol.Header",
              "org.forgerock.http.protocol.Headers",
              "org.forgerock.http.protocol.Message",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.RequestCookies",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.http.protocol.ResponseException",
              "org.forgerock.http.protocol.Responses",
              "org.forgerock.http.protocol.Status",
              "org.forgerock.json.JsonValue",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.util.promise.Promise",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.auth.node.api.Action",
              "org.forgerock.openam.auth.node.api.Action$ActionBuilder",
              "org.forgerock.openam.authentication.callbacks.IdPCallback",
              "org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
              "org.forgerock.openam.authentication.callbacks.ValidatedPasswordCallback",
              "org.forgerock.openam.authentication.callbacks.ValidatedUsernameCallback",
              "org.forgerock.openam.core.rest.authn.callbackhandlers.*",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.ScriptedSession",
              "groovy.json.JsonSlurper",
              "org.forgerock.openam.core.rest.devices.profile.DeviceProfilesDao",
              "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.scripting.api.secrets.Secret",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.openam.auth.node.api.NodeState",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "org.mozilla.javascript.ConsString",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.openam.authentication.callbacks.BooleanAttributeInputCallback",
              "org.forgerock.openam.authentication.callbacks.NumberAttributeInputCallback",
              "org.forgerock.openam.authentication.callbacks.StringAttributeInputCallback",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ],
            "2.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$*",
              "java.util.ArrayList",
              "java.util.Collections",
              "java.util.Collections$*",
              "java.util.concurrent.TimeUnit",
              "java.util.concurrent.ExecutionException",
              "java.util.concurrent.TimeoutException",
              "java.util.HashSet",
              "java.util.HashMap",
              "java.util.HashMap$KeyIterator",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.security.KeyPair",
              "java.security.KeyPairGenerator",
              "java.security.KeyPairGenerator$*",
              "java.security.PrivateKey",
              "java.security.PublicKey",
              "java.security.spec.InvalidKeySpecException",
              "java.security.spec.X509EncodedKeySpec",
              "java.security.spec.MGF1ParameterSpec",
              "javax.crypto.SecretKeyFactory",
              "javax.crypto.spec.OAEPParameterSpec",
              "javax.crypto.spec.PBEKeySpec",
              "javax.crypto.spec.PSource",
              "javax.crypto.spec.PSource$*",
              "javax.security.auth.callback.NameCallback",
              "javax.security.auth.callback.PasswordCallback",
              "javax.security.auth.callback.ChoiceCallback",
              "javax.security.auth.callback.ConfirmationCallback",
              "javax.security.auth.callback.LanguageCallback",
              "javax.security.auth.callback.TextInputCallback",
              "javax.security.auth.callback.TextOutputCallback",
              "com.sun.crypto.provider.PBKDF2KeyImpl",
              "com.sun.identity.authentication.callbacks.HiddenValueCallback",
              "com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
              "com.sun.identity.authentication.spi.HttpCallback",
              "com.sun.identity.authentication.spi.MetadataCallback",
              "com.sun.identity.authentication.spi.RedirectCallback",
              "com.sun.identity.authentication.spi.X509CertificateCallback",
              "com.sun.identity.shared.debug.Debug",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.Client",
              "org.forgerock.http.Handler",
              "org.forgerock.http.Context",
              "org.forgerock.http.context.RootContext",
              "org.forgerock.http.protocol.Cookie",
              "org.forgerock.http.header.*",
              "org.forgerock.http.header.authorization.*",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Form",
              "org.forgerock.http.protocol.Header",
              "org.forgerock.http.protocol.Headers",
              "org.forgerock.http.protocol.Message",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.RequestCookies",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.http.protocol.ResponseException",
              "org.forgerock.http.protocol.Responses",
              "org.forgerock.http.protocol.Status",
              "org.forgerock.json.JsonValue",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.util.promise.Promise",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.auth.node.api.Action",
              "org.forgerock.openam.auth.node.api.Action$ActionBuilder",
              "org.forgerock.openam.authentication.callbacks.IdPCallback",
              "org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
              "org.forgerock.openam.authentication.callbacks.ValidatedPasswordCallback",
              "org.forgerock.openam.authentication.callbacks.ValidatedUsernameCallback",
              "org.forgerock.openam.core.rest.authn.callbackhandlers.*",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.ScriptedSession",
              "groovy.json.JsonSlurper",
              "org.forgerock.openam.core.rest.devices.profile.DeviceProfilesDao",
              "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.scripting.api.secrets.Secret",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.openam.auth.node.api.NodeState",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "org.mozilla.javascript.ConsString",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.openam.authentication.callbacks.BooleanAttributeInputCallback",
              "org.forgerock.openam.authentication.callbacks.NumberAttributeInputCallback",
              "org.forgerock.openam.authentication.callbacks.StringAttributeInputCallback",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "5e854779-6ec1-4c39-aeba-0477e0986646",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.AbstractMap$*",
            "java.util.ArrayList",
            "java.util.Collections",
            "java.util.Collections$*",
            "java.util.concurrent.TimeUnit",
            "java.util.concurrent.ExecutionException",
            "java.util.concurrent.TimeoutException",
            "java.util.HashSet",
            "java.util.HashMap",
            "java.util.HashMap$KeyIterator",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "java.security.KeyPair",
            "java.security.KeyPairGenerator",
            "java.security.KeyPairGenerator$*",
            "java.security.PrivateKey",
            "java.security.PublicKey",
            "java.security.spec.InvalidKeySpecException",
            "java.security.spec.X509EncodedKeySpec",
            "java.security.spec.MGF1ParameterSpec",
            "javax.crypto.SecretKeyFactory",
            "javax.crypto.spec.OAEPParameterSpec",
            "javax.crypto.spec.PBEKeySpec",
            "javax.crypto.spec.PSource",
            "javax.crypto.spec.PSource$*",
            "javax.security.auth.callback.NameCallback",
            "javax.security.auth.callback.PasswordCallback",
            "javax.security.auth.callback.ChoiceCallback",
            "javax.security.auth.callback.ConfirmationCallback",
            "javax.security.auth.callback.LanguageCallback",
            "javax.security.auth.callback.TextInputCallback",
            "javax.security.auth.callback.TextOutputCallback",
            "com.sun.crypto.provider.PBKDF2KeyImpl",
            "com.sun.identity.authentication.callbacks.HiddenValueCallback",
            "com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
            "com.sun.identity.authentication.spi.HttpCallback",
            "com.sun.identity.authentication.spi.MetadataCallback",
            "com.sun.identity.authentication.spi.RedirectCallback",
            "com.sun.identity.authentication.spi.X509CertificateCallback",
            "com.sun.identity.shared.debug.Debug",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.client.*",
            "org.forgerock.http.Client",
            "org.forgerock.http.Handler",
            "org.forgerock.http.Context",
            "org.forgerock.http.context.RootContext",
            "org.forgerock.http.protocol.Cookie",
            "org.forgerock.http.header.*",
            "org.forgerock.http.header.authorization.*",
            "org.forgerock.http.protocol.Entity",
            "org.forgerock.http.protocol.Form",
            "org.forgerock.http.protocol.Header",
            "org.forgerock.http.protocol.Headers",
            "org.forgerock.http.protocol.Message",
            "org.forgerock.http.protocol.Request",
            "org.forgerock.http.protocol.RequestCookies",
            "org.forgerock.http.protocol.Response",
            "org.forgerock.http.protocol.ResponseException",
            "org.forgerock.http.protocol.Responses",
            "org.forgerock.http.protocol.Status",
            "org.forgerock.json.JsonValue",
            "org.forgerock.util.promise.NeverThrowsException",
            "org.forgerock.util.promise.Promise",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.openam.auth.node.api.Action",
            "org.forgerock.openam.auth.node.api.Action$ActionBuilder",
            "org.forgerock.openam.authentication.callbacks.IdPCallback",
            "org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
            "org.forgerock.openam.authentication.callbacks.ValidatedPasswordCallback",
            "org.forgerock.openam.authentication.callbacks.ValidatedUsernameCallback",
            "org.forgerock.openam.core.rest.authn.callbackhandlers.*",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.ScriptedSession",
            "groovy.json.JsonSlurper",
            "org.forgerock.openam.core.rest.devices.profile.DeviceProfilesDao",
            "org.forgerock.openam.scripting.idrepo.ScriptIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.scripting.api.secrets.Secret",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.openam.auth.node.api.NodeState",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "java.util.List",
            "java.util.Map",
            "org.mozilla.javascript.ConsString",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "org.forgerock.openam.authentication.callbacks.BooleanAttributeInputCallback",
            "org.forgerock.openam.authentication.callbacks.NumberAttributeInputCallback",
            "org.forgerock.openam.authentication.callbacks.StringAttributeInputCallback",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.opendj.ldap.Dn",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "LIBRARY": {
        "_id": "LIBRARY",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "LIBRARY",
          "allowLists": {
            "1.0": [
              "java.lang.Float",
              "org.forgerock.http.protocol.Header",
              "java.lang.Integer",
              "org.forgerock.http.Client",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Character",
              "java.lang.Long",
              "java.lang.Short",
              "java.util.Map",
              "org.forgerock.http.client.*",
              "java.lang.Math",
              "org.forgerock.opendj.ldap.Dn",
              "java.lang.Byte",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "java.lang.StrictMath",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.http.Context",
              "java.lang.Void",
              "org.codehaus.groovy.runtime.GStringImpl",
              "groovy.json.JsonSlurper",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.context.RootContext",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "java.util.List",
              "org.forgerock.http.protocol.RequestCookies",
              "org.forgerock.http.protocol.Responses",
              "org.forgerock.util.promise.Promise",
              "java.util.HashMap$KeyIterator",
              "com.sun.identity.shared.debug.Debug",
              "java.lang.Double",
              "org.forgerock.http.protocol.Headers",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.http.protocol.Status",
              "java.util.HashMap",
              "java.lang.Character$Subset",
              "java.util.TreeSet",
              "java.util.ArrayList",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "org.forgerock.http.protocol.ResponseException",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "org.forgerock.http.protocol.Message",
              "java.lang.Boolean",
              "java.lang.String",
              "java.lang.Number",
              "java.util.LinkedList",
              "java.util.LinkedHashSet",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.TreeMap",
              "java.util.Collections$EmptyList",
              "org.forgerock.openam.scripting.api.ScriptedSession",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.forgerock.http.Handler",
              "java.lang.Object",
              "org.forgerock.http.protocol.Form",
              "jdk.proxy*"
            ],
            "2.0": [
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "JAVASCRIPT": [
              "2.0"
            ]
          }
        },
        "defaultScript": "[Empty]",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.lang.Class",
            "java.security.AccessController",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "java.lang.Float",
            "org.forgerock.http.protocol.Header",
            "java.lang.Integer",
            "org.forgerock.http.Client",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Character",
            "java.lang.Long",
            "java.lang.Short",
            "java.util.Map",
            "org.forgerock.http.client.*",
            "java.lang.Math",
            "org.forgerock.opendj.ldap.Dn",
            "java.lang.Byte",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "java.lang.StrictMath",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.http.Context",
            "java.lang.Void",
            "org.codehaus.groovy.runtime.GStringImpl",
            "groovy.json.JsonSlurper",
            "org.forgerock.http.protocol.Request",
            "org.forgerock.http.protocol.Entity",
            "org.forgerock.http.context.RootContext",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "java.util.List",
            "org.forgerock.http.protocol.RequestCookies",
            "org.forgerock.http.protocol.Responses",
            "org.forgerock.util.promise.Promise",
            "java.util.HashMap$KeyIterator",
            "com.sun.identity.shared.debug.Debug",
            "java.lang.Double",
            "org.forgerock.http.protocol.Headers",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.http.protocol.Status",
            "java.util.HashMap",
            "java.lang.Character$Subset",
            "java.util.TreeSet",
            "java.util.ArrayList",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "org.forgerock.http.protocol.ResponseException",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "org.forgerock.http.protocol.Message",
            "java.lang.Boolean",
            "java.lang.String",
            "java.lang.Number",
            "java.util.LinkedList",
            "java.util.LinkedHashSet",
            "org.forgerock.http.protocol.Response",
            "org.forgerock.util.promise.NeverThrowsException",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "java.util.TreeMap",
            "java.util.Collections$EmptyList",
            "org.forgerock.openam.scripting.api.ScriptedSession",
            "java.util.Collections$UnmodifiableCollection$1",
            "org.forgerock.http.Handler",
            "java.lang.Object",
            "org.forgerock.http.protocol.Form"
          ]
        },
        "languages": [
          "JAVASCRIPT"
        ]
      },
      "OAUTH2_ACCESS_TOKEN_MODIFICATION": {
        "_id": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
          "allowLists": {
            "1.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.StatefulAccessToken",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.StatefulAccessToken",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.google.common.collect.Sets$1",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.idm.AMIdentity",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.net.URI",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.Collections$UnmodifiableMap",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableSet",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Locale",
            "java.util.Map",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.*",
            "org.forgerock.json.JsonValue",
            "org.forgerock.macaroons.Macaroon",
            "org.forgerock.oauth.clients.oidc.Claim",
            "org.forgerock.oauth2.core.GrantType",
            "org.forgerock.oauth2.core.StatefulAccessToken",
            "org.forgerock.oauth2.core.UserInfoClaims",
            "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
            "org.forgerock.openam.oauth2.OpenAMAccessToken",
            "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
            "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
            "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.opendj.ldap.Dn",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.openidconnect.Claim",
            "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
            "org.forgerock.util.promise.PromiseImpl",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER": {
        "_id": "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER",
          "allowLists": {
            "1.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.exceptions.ServerException",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.exceptions.ServerException",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "3f93ef6e-e54a-4393-aba1-f322656db28a",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.google.common.collect.Sets$1",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.idm.AMIdentity",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.net.URI",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.Collections$UnmodifiableMap",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableSet",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Locale",
            "java.util.Map",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.*",
            "org.forgerock.json.JsonValue",
            "org.forgerock.oauth.clients.oidc.Claim",
            "org.forgerock.oauth2.core.exceptions.ServerException",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.opendj.ldap.Dn",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.util.promise.PromiseImpl",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "OAUTH2_EVALUATE_SCOPE": {
        "_id": "OAUTH2_EVALUATE_SCOPE",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "OAUTH2_EVALUATE_SCOPE",
          "allowLists": {
            "1.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.StatefulAccessToken",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.StatefulAccessToken",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "da56fe60-8b38-4c46-a405-d6b306d4b336",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.google.common.collect.Sets$1",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.idm.AMIdentity",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.net.URI",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.Collections$UnmodifiableMap",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableSet",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Locale",
            "java.util.Map",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.*",
            "org.forgerock.json.JsonValue",
            "org.forgerock.macaroons.Macaroon",
            "org.forgerock.oauth.clients.oidc.Claim",
            "org.forgerock.oauth2.core.GrantType",
            "org.forgerock.oauth2.core.StatefulAccessToken",
            "org.forgerock.oauth2.core.UserInfoClaims",
            "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
            "org.forgerock.openam.oauth2.OpenAMAccessToken",
            "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
            "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
            "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.opendj.ldap.Dn",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.openidconnect.Claim",
            "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
            "org.forgerock.util.promise.PromiseImpl",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "OAUTH2_MAY_ACT": {
        "_id": "OAUTH2_MAY_ACT",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "OAUTH2_MAY_ACT",
          "allowLists": {
            "1.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.StatefulAccessToken",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.oauth2.core.tokenexchange.ExchangeableToken",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.OpenIdConnectToken",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.StatefulAccessToken",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.oauth2.core.tokenexchange.ExchangeableToken",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.OpenIdConnectToken",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "[Empty]",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.google.common.collect.Sets$1",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.idm.AMIdentity",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.net.URI",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.Collections$UnmodifiableMap",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableSet",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Locale",
            "java.util.Map",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.*",
            "org.forgerock.json.JsonValue",
            "org.forgerock.macaroons.Macaroon",
            "org.forgerock.oauth.clients.oidc.Claim",
            "org.forgerock.oauth2.core.GrantType",
            "org.forgerock.oauth2.core.StatefulAccessToken",
            "org.forgerock.oauth2.core.UserInfoClaims",
            "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
            "org.forgerock.oauth2.core.tokenexchange.ExchangeableToken",
            "org.forgerock.openam.oauth2.OpenAMAccessToken",
            "org.forgerock.openam.oauth2.token.grantset.Authorization$ModifiedAccessToken",
            "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
            "org.forgerock.openam.oauth2.token.stateless.StatelessAccessToken",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.opendj.ldap.Dn",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.openidconnect.Claim",
            "org.forgerock.openidconnect.OpenIdConnectToken",
            "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
            "org.forgerock.util.promise.PromiseImpl",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "OAUTH2_SCRIPTED_JWT_ISSUER": {
        "_id": "OAUTH2_SCRIPTED_JWT_ISSUER",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "OAUTH2_SCRIPTED_JWT_ISSUER",
          "allowLists": {
            "1.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.TrustedJwtIssuerConfig",
              "org.forgerock.oauth2.core.exceptions.ServerException",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.TrustedJwtIssuerConfig",
              "org.forgerock.oauth2.core.exceptions.ServerException",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "400e48ba-3f13-4144-ac7b-f824ea8e98c5",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.google.common.collect.Sets$1",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.idm.AMIdentity",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.net.URI",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.Collections$UnmodifiableMap",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableSet",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Locale",
            "java.util.Map",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.*",
            "org.forgerock.json.JsonValue",
            "org.forgerock.oauth.clients.oidc.Claim",
            "org.forgerock.oauth2.core.TrustedJwtIssuerConfig",
            "org.forgerock.oauth2.core.exceptions.ServerException",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.opendj.ldap.Dn",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.util.promise.PromiseImpl",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "OAUTH2_VALIDATE_SCOPE": {
        "_id": "OAUTH2_VALIDATE_SCOPE",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "OAUTH2_VALIDATE_SCOPE",
          "allowLists": {
            "1.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.exceptions.InvalidScopeException",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.exceptions.InvalidScopeException",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "25e6c06d-cf70-473b-bd28-26931edc476b",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.google.common.collect.Sets$1",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.net.URI",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.Collections$UnmodifiableMap",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableSet",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Locale",
            "java.util.Map",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.*",
            "org.forgerock.json.JsonValue",
            "org.forgerock.oauth.clients.oidc.Claim",
            "org.forgerock.oauth2.core.exceptions.InvalidScopeException",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.opendj.ldap.Dn",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.util.promise.PromiseImpl",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "OIDC_CLAIMS": {
        "_id": "OIDC_CLAIMS",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "OIDC_CLAIMS",
          "allowLists": {
            "1.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.google.common.collect.Sets$1",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.net.URI",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.Collections$UnmodifiableMap",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableSet",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.List",
              "java.util.Locale",
              "java.util.Map",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.*",
              "org.forgerock.json.JsonValue",
              "org.forgerock.macaroons.Macaroon",
              "org.forgerock.oauth.clients.oidc.Claim",
              "org.forgerock.oauth2.core.GrantType",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
              "org.forgerock.openam.oauth2.OpenAMAccessToken",
              "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
              "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.opendj.ldap.Dn",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.openidconnect.Claim",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.google.common.collect.Sets$1",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.idm.AMIdentity",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.net.URI",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.Collections$UnmodifiableMap",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableSet",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.List",
            "java.util.Locale",
            "java.util.Map",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.*",
            "org.forgerock.json.JsonValue",
            "org.forgerock.macaroons.Macaroon",
            "org.forgerock.oauth.clients.oidc.Claim",
            "org.forgerock.oauth2.core.GrantType",
            "org.forgerock.oauth2.core.UserInfoClaims",
            "org.forgerock.oauth2.core.exceptions.InvalidRequestException",
            "org.forgerock.openam.oauth2.OpenAMAccessToken",
            "org.forgerock.openam.oauth2.token.macaroon.MacaroonAccessToken",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentityRepository",
            "org.forgerock.openam.scripting.api.secrets.ScriptedSecrets",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.opendj.ldap.Dn",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.openidconnect.Claim",
            "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
            "org.forgerock.util.promise.PromiseImpl",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "POLICY_CONDITION": {
        "_id": "POLICY_CONDITION",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "POLICY_CONDITION",
          "allowLists": {
            "1.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.ArrayList",
              "java.util.HashSet",
              "java.util.HashMap",
              "java.util.HashMap$KeyIterator",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "com.sun.identity.shared.debug.Debug",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.Client",
              "org.forgerock.http.Handler",
              "org.forgerock.http.Context",
              "org.forgerock.http.context.RootContext",
              "java.util.Collections$EmptyList",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Form",
              "org.forgerock.http.protocol.Header",
              "org.forgerock.http.protocol.Headers",
              "org.forgerock.http.protocol.Message",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.RequestCookies",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.http.protocol.ResponseException",
              "org.forgerock.http.protocol.Responses",
              "org.forgerock.http.protocol.Status",
              "org.forgerock.util.promise.NeverThrowsException",
              "org.forgerock.util.promise.Promise",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
              "org.forgerock.openam.scripting.api.ScriptedSession",
              "groovy.json.JsonSlurper",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ],
            "2.0": [
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.ArrayList",
            "java.util.HashSet",
            "java.util.HashMap",
            "java.util.HashMap$KeyIterator",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "com.sun.identity.shared.debug.Debug",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.client.*",
            "org.forgerock.http.Client",
            "org.forgerock.http.Handler",
            "org.forgerock.http.Context",
            "org.forgerock.http.context.RootContext",
            "java.util.Collections$EmptyList",
            "org.forgerock.http.protocol.Entity",
            "org.forgerock.http.protocol.Form",
            "org.forgerock.http.protocol.Header",
            "org.forgerock.http.protocol.Headers",
            "org.forgerock.http.protocol.Message",
            "org.forgerock.http.protocol.Request",
            "org.forgerock.http.protocol.RequestCookies",
            "org.forgerock.http.protocol.Response",
            "org.forgerock.http.protocol.ResponseException",
            "org.forgerock.http.protocol.Responses",
            "org.forgerock.http.protocol.Status",
            "org.forgerock.util.promise.NeverThrowsException",
            "org.forgerock.util.promise.Promise",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.scripting.api.identity.ScriptedIdentity",
            "org.forgerock.openam.scripting.api.ScriptedSession",
            "groovy.json.JsonSlurper",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "java.util.List",
            "java.util.Map",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.opendj.ldap.Dn"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "SAML2_IDP_ADAPTER": {
        "_id": "SAML2_IDP_ADAPTER",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "SAML2_IDP_ADAPTER",
          "allowLists": {
            "1.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$EmptyMap",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.net.URI",
              "com.iplanet.am.sdk.AMHashMap",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.shared.debug.Debug",
              "com.sun.identity.saml2.common.SAML2Exception",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.json.JsonValue",
              "org.mozilla.javascript.JavaScriptException",
              "com.sun.identity.saml2.assertion.*",
              "com.sun.identity.saml2.assertion.impl.*",
              "com.sun.identity.saml2.plugins.scripted.ScriptEntitlementInfo",
              "com.sun.identity.saml2.protocol.*",
              "com.sun.identity.saml2.protocol.impl.*",
              "java.io.PrintWriter",
              "javax.security.auth.Subject",
              "javax.servlet.http.HttpServletRequestWrapper",
              "javax.servlet.http.HttpServletResponseWrapper",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "com.sun.identity.saml2.plugins.scripted.IdpAdapterScriptHelper",
              "jdk.proxy*"
            ],
            "2.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$EmptyMap",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.net.URI",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "org.forgerock.json.JsonValue",
              "org.mozilla.javascript.JavaScriptException",
              "org.forgerock.util.promise.PromiseImpl",
              "javax.servlet.http.Cookie",
              "org.xml.sax.InputSource",
              "java.security.cert.CertificateFactory",
              "com.iplanet.am.sdk.AMHashMap",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.io.PrintWriter",
              "javax.security.auth.Subject",
              "javax.servlet.http.HttpServletRequestWrapper",
              "javax.servlet.http.HttpServletResponseWrapper",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "248b8a56-df81-4b1b-b4ba-45d994f6504c",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$EmptyMap",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "java.net.URI",
            "com.iplanet.am.sdk.AMHashMap",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.shared.debug.Debug",
            "com.sun.identity.saml2.common.SAML2Exception",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.json.JsonValue",
            "org.mozilla.javascript.JavaScriptException",
            "com.sun.identity.saml2.assertion.*",
            "com.sun.identity.saml2.assertion.impl.*",
            "com.sun.identity.saml2.plugins.scripted.ScriptEntitlementInfo",
            "com.sun.identity.saml2.protocol.*",
            "com.sun.identity.saml2.protocol.impl.*",
            "java.io.PrintWriter",
            "javax.security.auth.Subject",
            "javax.servlet.http.HttpServletRequestWrapper",
            "javax.servlet.http.HttpServletResponseWrapper",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "sun.security.ec.ECPrivateKeyImpl",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.opendj.ldap.Dn",
            "com.sun.identity.saml2.plugins.scripted.IdpAdapterScriptHelper",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "SAML2_IDP_ATTRIBUTE_MAPPER": {
        "_id": "SAML2_IDP_ATTRIBUTE_MAPPER",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "SAML2_IDP_ATTRIBUTE_MAPPER",
          "allowLists": {
            "1.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$EmptyMap",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.net.URI",
              "com.iplanet.am.sdk.AMHashMap",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.shared.debug.Debug",
              "com.sun.identity.saml2.common.SAML2Exception",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.json.JsonValue",
              "org.mozilla.javascript.JavaScriptException",
              "com.sun.identity.saml2.assertion.impl.AttributeImpl",
              "com.sun.identity.saml2.plugins.scripted.IdpAttributeMapperScriptHelper",
              "javax.servlet.http.Cookie",
              "javax.xml.parsers.DocumentBuilder",
              "javax.xml.parsers.DocumentBuilderFactory",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.w3c.dom.Document",
              "org.w3c.dom.Element",
              "org.xml.sax.InputSource",
              "jdk.proxy*"
            ],
            "2.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$EmptyMap",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.net.URI",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "org.forgerock.json.JsonValue",
              "org.mozilla.javascript.JavaScriptException",
              "org.forgerock.util.promise.PromiseImpl",
              "javax.servlet.http.Cookie",
              "org.xml.sax.InputSource",
              "java.security.cert.CertificateFactory",
              "com.iplanet.am.sdk.AMHashMap",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "c4f22465-2368-4e27-8013-e6399974fd48",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$EmptyMap",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "java.net.URI",
            "com.iplanet.am.sdk.AMHashMap",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.shared.debug.Debug",
            "com.sun.identity.saml2.common.SAML2Exception",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.json.JsonValue",
            "org.mozilla.javascript.JavaScriptException",
            "com.sun.identity.saml2.assertion.impl.AttributeImpl",
            "com.sun.identity.saml2.plugins.scripted.IdpAttributeMapperScriptHelper",
            "javax.servlet.http.Cookie",
            "javax.xml.parsers.DocumentBuilder",
            "javax.xml.parsers.DocumentBuilderFactory",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.w3c.dom.Document",
            "org.w3c.dom.Element",
            "org.xml.sax.InputSource",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "SAML2_SP_ADAPTER": {
        "_id": "SAML2_SP_ADAPTER",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "SAML2_SP_ADAPTER",
          "allowLists": {
            "1.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$EmptyMap",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.net.URI",
              "com.iplanet.am.sdk.AMHashMap",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "com.sun.identity.shared.debug.Debug",
              "com.sun.identity.saml2.common.SAML2Exception",
              "groovy.json.JsonSlurper",
              "groovy.json.internal.LazyMap",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.Client",
              "org.forgerock.http.client.*",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.json.JsonValue",
              "org.mozilla.javascript.JavaScriptException",
              "com.sun.identity.saml2.assertion.*",
              "com.sun.identity.saml2.assertion.impl.*",
              "com.sun.identity.saml2.plugins.scripted.ScriptEntitlementInfo",
              "com.sun.identity.saml2.protocol.*",
              "com.sun.identity.saml2.protocol.impl.*",
              "java.io.PrintWriter",
              "javax.security.auth.Subject",
              "javax.servlet.http.HttpServletRequestWrapper",
              "javax.servlet.http.HttpServletResponseWrapper",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "com.sun.identity.saml2.plugins.scripted.SpAdapterScriptHelper",
              "jdk.proxy*"
            ],
            "2.0": [
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList",
              "java.util.ArrayList$Itr",
              "java.util.Collections$Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$EmptyMap",
              "java.util.Collections$SingletonList",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "java.util.HashMap",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$KeySet",
              "java.util.HashMap$Node",
              "java.util.HashSet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "java.net.URI",
              "com.sun.identity.common.CaseInsensitiveHashMap",
              "org.forgerock.json.JsonValue",
              "org.mozilla.javascript.JavaScriptException",
              "org.forgerock.util.promise.PromiseImpl",
              "javax.servlet.http.Cookie",
              "org.xml.sax.InputSource",
              "java.security.cert.CertificateFactory",
              "com.iplanet.am.sdk.AMHashMap",
              "com.iplanet.sso.providers.dpro.SessionSsoToken",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.io.PrintWriter",
              "javax.security.auth.Subject",
              "javax.servlet.http.HttpServletRequestWrapper",
              "javax.servlet.http.HttpServletResponseWrapper",
              "sun.security.ec.ECPrivateKeyImpl",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "69f06e63-128c-4e2f-af52-079a8a6f448b",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList",
            "java.util.ArrayList$Itr",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$EmptyMap",
            "java.util.Collections$SingletonList",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "java.util.HashMap",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$KeySet",
            "java.util.HashMap$Node",
            "java.util.HashSet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "java.net.URI",
            "com.iplanet.am.sdk.AMHashMap",
            "com.iplanet.sso.providers.dpro.SessionSsoToken",
            "com.sun.identity.common.CaseInsensitiveHashMap",
            "com.sun.identity.shared.debug.Debug",
            "com.sun.identity.saml2.common.SAML2Exception",
            "groovy.json.JsonSlurper",
            "groovy.json.internal.LazyMap",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.Client",
            "org.forgerock.http.client.*",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.json.JsonValue",
            "org.mozilla.javascript.JavaScriptException",
            "com.sun.identity.saml2.assertion.*",
            "com.sun.identity.saml2.assertion.impl.*",
            "com.sun.identity.saml2.plugins.scripted.ScriptEntitlementInfo",
            "com.sun.identity.saml2.protocol.*",
            "com.sun.identity.saml2.protocol.impl.*",
            "java.io.PrintWriter",
            "javax.security.auth.Subject",
            "javax.servlet.http.HttpServletRequestWrapper",
            "javax.servlet.http.HttpServletResponseWrapper",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "sun.security.ec.ECPrivateKeyImpl",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.opendj.ldap.Dn",
            "com.sun.identity.saml2.plugins.scripted.SpAdapterScriptHelper",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      },
      "SOCIAL_IDP_PROFILE_TRANSFORMATION": {
        "_id": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
        "_type": {
          "_id": "contexts",
          "collection": true,
          "name": "scriptContext"
        },
        "context": {
          "_id": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "allowLists": {
            "1.0": [
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Character",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList$Itr",
              "java.util.ArrayList",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$Node",
              "java.util.HashMap",
              "java.util.HashSet",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.forgerock.oauth.clients.oidc.Claim",
              "java.util.Locale",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ],
            "2.0": [
              "com.sun.identity.idm.AMIdentity",
              "com.sun.identity.shared.debug.Debug",
              "groovy.json.JsonSlurper",
              "java.lang.Boolean",
              "java.lang.Byte",
              "java.lang.Character$Subset",
              "java.lang.Character$UnicodeBlock",
              "java.lang.Character",
              "java.lang.Double",
              "java.lang.Float",
              "java.lang.Integer",
              "java.lang.Long",
              "java.lang.Math",
              "java.lang.Number",
              "java.lang.Object",
              "java.lang.Short",
              "java.lang.StrictMath",
              "java.lang.String",
              "java.lang.Void",
              "java.util.AbstractMap$SimpleImmutableEntry",
              "java.util.ArrayList$Itr",
              "java.util.ArrayList",
              "java.util.Collections$1",
              "java.util.Collections$EmptyList",
              "java.util.Collections$SingletonList",
              "java.util.HashMap$Entry",
              "java.util.HashMap$KeyIterator",
              "java.util.HashMap$Node",
              "java.util.HashMap",
              "java.util.HashSet",
              "java.util.LinkedHashMap$Entry",
              "java.util.LinkedHashMap$LinkedEntryIterator",
              "java.util.LinkedHashMap$LinkedEntrySet",
              "java.util.LinkedHashMap",
              "java.util.LinkedHashSet",
              "java.util.LinkedList",
              "java.util.TreeMap",
              "java.util.TreeSet",
              "org.codehaus.groovy.runtime.GStringImpl",
              "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
              "org.forgerock.http.client.*",
              "org.forgerock.http.protocol.Entity",
              "org.forgerock.http.protocol.Request",
              "org.forgerock.http.protocol.Response",
              "org.forgerock.json.JsonValue",
              "org.forgerock.oauth2.core.UserInfoClaims",
              "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
              "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
              "org.forgerock.openam.shared.security.crypto.CertificateService",
              "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
              "org.forgerock.util.promise.PromiseImpl",
              "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
              "java.util.List",
              "java.util.Map",
              "java.util.Collections$UnmodifiableRandomAccessList",
              "java.util.Collections$UnmodifiableCollection$1",
              "org.forgerock.oauth.clients.oidc.Claim",
              "java.util.Locale",
              "org.mozilla.javascript.JavaScriptException",
              "sun.security.ec.ECPrivateKeyImpl",
              "org.forgerock.opendj.ldap.Rdn",
              "org.forgerock.opendj.ldap.Dn",
              "jdk.proxy*"
            ]
          },
          "evaluatorVersions": {
            "GROOVY": [
              "1.0"
            ],
            "JAVASCRIPT": [
              "1.0"
            ]
          }
        },
        "defaultScript": "1d475815-72cb-42eb-aafd-4026989d28a7",
        "engineConfiguration": {
          "_id": "engineConfiguration",
          "_type": {
            "_id": "engineConfiguration",
            "collection": false,
            "name": "Scripting engine configuration"
          },
          "blackList": [
            "java.security.AccessController",
            "java.lang.Class",
            "java.lang.reflect.*"
          ],
          "coreThreads": 10,
          "idleTimeout": 60,
          "maxThreads": 50,
          "propertyNamePrefix": "script",
          "queueSize": 10,
          "serverTimeout": 0,
          "useSecurityManager": true,
          "whiteList": [
            "com.sun.identity.idm.AMIdentity",
            "com.sun.identity.shared.debug.Debug",
            "groovy.json.JsonSlurper",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Character$Subset",
            "java.lang.Character$UnicodeBlock",
            "java.lang.Character",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Math",
            "java.lang.Number",
            "java.lang.Object",
            "java.lang.Short",
            "java.lang.StrictMath",
            "java.lang.String",
            "java.lang.Void",
            "java.util.AbstractMap$SimpleImmutableEntry",
            "java.util.ArrayList$Itr",
            "java.util.ArrayList",
            "java.util.Collections$1",
            "java.util.Collections$EmptyList",
            "java.util.Collections$SingletonList",
            "java.util.HashMap$Entry",
            "java.util.HashMap$KeyIterator",
            "java.util.HashMap$Node",
            "java.util.HashMap",
            "java.util.HashSet",
            "java.util.LinkedHashMap$Entry",
            "java.util.LinkedHashMap$LinkedEntryIterator",
            "java.util.LinkedHashMap$LinkedEntrySet",
            "java.util.LinkedHashMap",
            "java.util.LinkedHashSet",
            "java.util.LinkedList",
            "java.util.TreeMap",
            "java.util.TreeSet",
            "org.codehaus.groovy.runtime.GStringImpl",
            "org.codehaus.groovy.runtime.ScriptBytecodeAdapter",
            "org.forgerock.http.client.*",
            "org.forgerock.http.protocol.Entity",
            "org.forgerock.http.protocol.Request",
            "org.forgerock.http.protocol.Response",
            "org.forgerock.json.JsonValue",
            "org.forgerock.oauth2.core.UserInfoClaims",
            "org.forgerock.openam.scripting.api.http.GroovyHttpClient",
            "org.forgerock.openam.scripting.api.http.JavaScriptHttpClient",
            "org.forgerock.openam.shared.security.crypto.CertificateService",
            "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOToken",
            "org.forgerock.util.promise.PromiseImpl",
            "org.forgerock.openam.scripting.api.PrefixedScriptPropertyResolver",
            "java.util.List",
            "java.util.Map",
            "java.util.Collections$UnmodifiableRandomAccessList",
            "java.util.Collections$UnmodifiableCollection$1",
            "org.forgerock.oauth.clients.oidc.Claim",
            "java.util.Locale",
            "org.mozilla.javascript.JavaScriptException",
            "sun.security.ec.ECPrivateKeyImpl",
            "org.forgerock.opendj.ldap.Rdn",
            "org.forgerock.opendj.ldap.Dn",
            "jdk.proxy*"
          ]
        },
        "languages": [
          "JAVASCRIPT",
          "GROOVY"
        ]
      }
    },
    "secrets": {
      "GlobalSecrets": {
        "_id": "GlobalSecrets",
        "_type": {
          "_id": "GlobalSecrets",
          "collection": false,
          "name": "Global Secrets Settings"
        },
        "storeTypes": [
          "EnvironmentAndSystemPropertySecretStore",
          "KeyStoreSecretStore",
          "GoogleSecretManagerSecretStoreProvider",
          "GoogleKeyManagementServiceSecretStore",
          "HsmSecretStore",
          "FileSystemSecretStore"
        ]
      }
    },
    "secretstore": {
      "EnvironmentAndSystemPropertySecretStore": {
        "_id": "EnvironmentAndSystemPropertySecretStore",
        "_type": {
          "_id": "EnvironmentAndSystemPropertySecretStore",
          "collection": false,
          "name": "Environment and System Property Secrets Store"
        },
        "format": "BASE64"
      },
      "default-keystore": {
        "_id": "default-keystore",
        "_type": {
          "_id": "KeyStoreSecretStore",
          "collection": true,
          "name": "Keystore"
        },
        "file": "/home/prestonhales/am/security/keystores/keystore.jceks",
        "keyEntryPassword": "entrypass",
        "leaseExpiryDuration": 5,
        "mappings": [
          {
            "_id": "am.applications.agents.remote.consent.request.signing.ES256",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es256test"
            ],
            "secretId": "am.applications.agents.remote.consent.request.signing.ES256"
          },
          {
            "_id": "am.applications.agents.remote.consent.request.signing.ES384",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es384test"
            ],
            "secretId": "am.applications.agents.remote.consent.request.signing.ES384"
          },
          {
            "_id": "am.applications.agents.remote.consent.request.signing.ES512",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es512test"
            ],
            "secretId": "am.applications.agents.remote.consent.request.signing.ES512"
          },
          {
            "_id": "am.applications.agents.remote.consent.request.signing.RSA",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.applications.agents.remote.consent.request.signing.RSA"
          },
          {
            "_id": "am.authentication.nodes.persistentcookie.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.authentication.nodes.persistentcookie.encryption"
          },
          {
            "_id": "am.authn.authid.signing.HMAC",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "hmacsigningtest"
            ],
            "secretId": "am.authn.authid.signing.HMAC"
          },
          {
            "_id": "am.authn.trees.transientstate.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "directenctest"
            ],
            "secretId": "am.authn.trees.transientstate.encryption"
          },
          {
            "_id": "am.default.applications.federation.entity.providers.saml2.idp.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.default.applications.federation.entity.providers.saml2.idp.encryption"
          },
          {
            "_id": "am.default.applications.federation.entity.providers.saml2.idp.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.default.applications.federation.entity.providers.saml2.idp.signing"
          },
          {
            "_id": "am.default.applications.federation.entity.providers.saml2.sp.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.default.applications.federation.entity.providers.saml2.sp.encryption"
          },
          {
            "_id": "am.default.applications.federation.entity.providers.saml2.sp.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.default.applications.federation.entity.providers.saml2.sp.signing"
          },
          {
            "_id": "am.default.authentication.modules.persistentcookie.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.default.authentication.modules.persistentcookie.encryption"
          },
          {
            "_id": "am.default.authentication.modules.persistentcookie.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "hmacsigningtest"
            ],
            "secretId": "am.default.authentication.modules.persistentcookie.signing"
          },
          {
            "_id": "am.default.authentication.nodes.persistentcookie.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "hmacsigningtest"
            ],
            "secretId": "am.default.authentication.nodes.persistentcookie.signing"
          },
          {
            "_id": "am.global.services.oauth2.oidc.agent.idtoken.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.global.services.oauth2.oidc.agent.idtoken.signing"
          },
          {
            "_id": "am.global.services.saml2.client.storage.jwt.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "directenctest"
            ],
            "secretId": "am.global.services.saml2.client.storage.jwt.encryption"
          },
          {
            "_id": "am.global.services.session.clientbased.encryption.AES",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "aestest"
            ],
            "secretId": "am.global.services.session.clientbased.encryption.AES"
          },
          {
            "_id": "am.global.services.session.clientbased.signing.HMAC",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "hmacsigningtest"
            ],
            "secretId": "am.global.services.session.clientbased.signing.HMAC"
          },
          {
            "_id": "am.services.iot.jwt.issuer.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "hmacsigningtest"
            ],
            "secretId": "am.services.iot.jwt.issuer.signing"
          },
          {
            "_id": "am.services.oauth2.jwt.authenticity.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "hmacsigningtest"
            ],
            "secretId": "am.services.oauth2.jwt.authenticity.signing"
          },
          {
            "_id": "am.services.oauth2.oidc.decryption.RSA.OAEP",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.services.oauth2.oidc.decryption.RSA.OAEP"
          },
          {
            "_id": "am.services.oauth2.oidc.decryption.RSA.OAEP.256",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.services.oauth2.oidc.decryption.RSA.OAEP.256"
          },
          {
            "_id": "am.services.oauth2.oidc.decryption.RSA1.5",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.services.oauth2.oidc.decryption.RSA1.5"
          },
          {
            "_id": "am.services.oauth2.oidc.rp.idtoken.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.services.oauth2.oidc.rp.idtoken.encryption"
          },
          {
            "_id": "am.services.oauth2.oidc.rp.jwt.authenticity.signing",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.services.oauth2.oidc.rp.jwt.authenticity.signing"
          },
          {
            "_id": "am.services.oauth2.oidc.signing.ES256",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es256test"
            ],
            "secretId": "am.services.oauth2.oidc.signing.ES256"
          },
          {
            "_id": "am.services.oauth2.oidc.signing.ES384",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es384test"
            ],
            "secretId": "am.services.oauth2.oidc.signing.ES384"
          },
          {
            "_id": "am.services.oauth2.oidc.signing.ES512",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es512test"
            ],
            "secretId": "am.services.oauth2.oidc.signing.ES512"
          },
          {
            "_id": "am.services.oauth2.oidc.signing.RSA",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.services.oauth2.oidc.signing.RSA"
          },
          {
            "_id": "am.services.oauth2.remote.consent.request.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "selfserviceenctest"
            ],
            "secretId": "am.services.oauth2.remote.consent.request.encryption"
          },
          {
            "_id": "am.services.oauth2.remote.consent.response.decryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "test"
            ],
            "secretId": "am.services.oauth2.remote.consent.response.decryption"
          },
          {
            "_id": "am.services.oauth2.remote.consent.response.signing.RSA",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.services.oauth2.remote.consent.response.signing.RSA"
          },
          {
            "_id": "am.services.oauth2.stateless.signing.ES256",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es256test"
            ],
            "secretId": "am.services.oauth2.stateless.signing.ES256"
          },
          {
            "_id": "am.services.oauth2.stateless.signing.ES384",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es384test"
            ],
            "secretId": "am.services.oauth2.stateless.signing.ES384"
          },
          {
            "_id": "am.services.oauth2.stateless.signing.ES512",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "es512test"
            ],
            "secretId": "am.services.oauth2.stateless.signing.ES512"
          },
          {
            "_id": "am.services.oauth2.stateless.signing.HMAC",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "hmacsigningtest"
            ],
            "secretId": "am.services.oauth2.stateless.signing.HMAC"
          },
          {
            "_id": "am.services.oauth2.stateless.signing.RSA",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.services.oauth2.stateless.signing.RSA"
          },
          {
            "_id": "am.services.oauth2.stateless.token.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "directenctest"
            ],
            "secretId": "am.services.oauth2.stateless.token.encryption"
          },
          {
            "_id": "am.services.saml2.metadata.signing.RSA",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "rsajwtsigningkey"
            ],
            "secretId": "am.services.saml2.metadata.signing.RSA"
          },
          {
            "_id": "am.services.uma.pct.encryption",
            "_type": {
              "_id": "mappings",
              "collection": true,
              "name": "Mappings"
            },
            "aliases": [
              "directenctest"
            ],
            "secretId": "am.services.uma.pct.encryption"
          }
        ],
        "providerName": "SunJCE",
        "storePassword": "storepass",
        "storetype": "JCEKS"
      },
      "default-passwords-store": {
        "_id": "default-passwords-store",
        "_type": {
          "_id": "FileSystemSecretStore",
          "collection": true,
          "name": "File System Secret Volumes"
        },
        "directory": "/home/prestonhales/am/security/secrets/encrypted",
        "format": "ENCRYPTED_PLAIN"
      }
    },
    "server": {
      "defaultProperties": {
        "advanced": {
          "_id": "null/properties/advanced",
          "com.iplanet.am.buildDate": "2024-March-28 16:00",
          "com.iplanet.am.buildRevision": "89116d59a1ebe73ed1931dd3649adb7f217cd06b",
          "com.iplanet.am.buildVersion": "ForgeRock Access Management 7.5.0",
          "com.iplanet.am.cookie.c66Encode": true,
          "com.iplanet.am.daemons": "securid",
          "com.iplanet.am.directory.ssl.enabled": false,
          "com.iplanet.am.installdir": "%BASE_DIR%",
          "com.iplanet.am.jssproxy.SSLTrustHostList": "",
          "com.iplanet.am.jssproxy.checkSubjectAltName": false,
          "com.iplanet.am.jssproxy.resolveIPAddress": false,
          "com.iplanet.am.jssproxy.trustAllServerCerts": false,
          "com.iplanet.am.lbcookie.name": "amlbcookie",
          "com.iplanet.am.lbcookie.value": "00",
          "com.iplanet.am.logstatus": "ACTIVE",
          "com.iplanet.am.pcookie.name": "DProPCookie",
          "com.iplanet.am.profile.host": "%SERVER_HOST%",
          "com.iplanet.am.profile.port": "%SERVER_PORT%",
          "com.iplanet.am.serverMode": true,
          "com.iplanet.am.session.agentSessionIdleTime": "1440",
          "com.iplanet.am.session.client.polling.enable": false,
          "com.iplanet.am.session.client.polling.period": "180",
          "com.iplanet.am.session.httpSession.enabled": "true",
          "com.iplanet.am.version": "ForgeRock Access Management 7.5.0 Build 89116d59a1ebe73ed1931dd3649adb7f217cd06b (2024-March-28 16:00)",
          "com.iplanet.security.SSLSocketFactoryImpl": "com.sun.identity.shared.ldap.factory.JSSESocketFactory",
          "com.sun.am.event.notification.expire.time": "5",
          "com.sun.embedded.sync.servers": "on",
          "com.sun.identity.am.cookie.check": false,
          "com.sun.identity.auth.cookieName": "AMAuthCookie",
          "com.sun.identity.authentication.multiple.tabs.used": false,
          "com.sun.identity.authentication.setCookieToAllDomains": true,
          "com.sun.identity.authentication.special.users": "cn=dsameuser,ou=DSAME Users,%ROOT_SUFFIX%|cn=amService-UrlAccessAgent,ou=DSAME Users,%ROOT_SUFFIX%",
          "com.sun.identity.authentication.super.user": "uid=amAdmin,ou=People,%ROOT_SUFFIX%",
          "com.sun.identity.authentication.uniqueCookieName": "sunIdentityServerAuthNServer",
          "com.sun.identity.cookie.httponly": true,
          "com.sun.identity.cookie.samesite": "off",
          "com.sun.identity.enableUniqueSSOTokenCookie": false,
          "com.sun.identity.jss.donotInstallAtHighestPriority": true,
          "com.sun.identity.monitoring": "off",
          "com.sun.identity.monitoring.local.conn.server.url": "service:jmx:rmi://",
          "com.sun.identity.password.deploymentDescriptor": "%SERVER_URI%",
          "com.sun.identity.plugin.configuration.class": "@CONFIGURATION_PROVIDER_CLASS@",
          "com.sun.identity.plugin.datastore.class.default": "@DATASTORE_PROVIDER_CLASS@",
          "com.sun.identity.plugin.log.class": "@LOG_PROVIDER_CLASS@",
          "com.sun.identity.plugin.monitoring.agent.class": "@MONAGENT_PROVIDER_CLASS@",
          "com.sun.identity.plugin.monitoring.saml2.class": "@MONSAML2_PROVIDER_CLASS@",
          "com.sun.identity.plugin.session.class": "@SESSION_PROVIDER_CLASS@",
          "com.sun.identity.policy.Policy.policy_evaluation_weights": "10:10:10",
          "com.sun.identity.policy.resultsCacheMaxSize": "10000",
          "com.sun.identity.policy.resultsCacheResourceCap": "20",
          "com.sun.identity.saml.xmlsig.keyprovider.class": "@XMLSIG_KEY_PROVIDER@",
          "com.sun.identity.saml.xmlsig.passwordDecoder": "@PASSWORD_DECODER_CLASS@",
          "com.sun.identity.saml.xmlsig.signatureprovider.class": "@XML_SIGNATURE_PROVIDER@",
          "com.sun.identity.security.checkcaller": false,
          "com.sun.identity.server.fqdnMap[dnsfirst]": "dnsfirst",
          "com.sun.identity.server.fqdnMap[hello]": "hello",
          "com.sun.identity.server.fqdnMap[localhost]": "localhost",
          "com.sun.identity.server.fqdnMap[openam-frodo-dev.classic.com]": "openam-frodo-dev.classic.com",
          "com.sun.identity.server.fqdnMap[openam]": "openam",
          "com.sun.identity.server.fqdnMap[secondDNS]": "secondDNS",
          "com.sun.identity.session.repository.enableAttributeCompression": false,
          "com.sun.identity.session.repository.enableCompression": false,
          "com.sun.identity.session.repository.enableEncryption": false,
          "com.sun.identity.sm.cache.ttl": "30",
          "com.sun.identity.sm.cache.ttl.enable": false,
          "com.sun.identity.url.readTimeout": "30000",
          "com.sun.identity.webcontainer": "WEB_CONTAINER",
          "dynamic.datastore.creation.enabled": false,
          "openam.auth.destroy_session_after_upgrade": true,
          "openam.auth.distAuthCookieName": "AMDistAuthCookie",
          "openam.auth.session_property_upgrader": "org.forgerock.openam.authentication.service.DefaultSessionPropertyUpgrader",
          "openam.auth.version.header.enabled": false,
          "openam.authentication.ignore_goto_during_logout": false,
          "openam.cdm.default.charset": "UTF-8",
          "openam.forbidden.to.copy.headers": "connection",
          "openam.forbidden.to.copy.request.headers": "connection",
          "openam.oauth2.client.jwt.encryption.algorithm.allow.list": "RSA-OAEP,RSA-OAEP-256,ECDH-ES",
          "openam.oauth2.client.jwt.unreasonable.lifetime.limit.minutes": "30",
          "openam.retained.http.headers": "X-DSAMEVersion",
          "openam.retained.http.request.headers": "X-DSAMEVersion",
          "openam.serviceattributevalidator.classes.whitelist": "org.forgerock.openam.auth.nodes.validators.GreaterThanZeroValidator,org.forgerock.openam.auth.nodes.validators.HMACKeyLengthValidator,org.forgerock.openam.auth.nodes.validators.HmacSigningKeyValidator,org.forgerock.openam.auth.nodes.validators.PercentageValidator,org.forgerock.openam.auth.nodes.validators.QueryFilterValidator,org.forgerock.openam.auth.nodes.validators.SessionPropertyNameValidator,org.forgerock.openam.auth.nodes.validators.SessionPropertyValidator,org.forgerock.openam.auth.nodes.framework.validators.NodeValueValidator,org.forgerock.openam.audit.validation.PositiveIntegerValidator,org.forgerock.openam.authentication.modules.fr.oath.validators.AlphaNumericValidator,org.forgerock.openam.authentication.modules.fr.oath.validators.CodeLengthValidator,org.forgerock.openam.authentication.modules.persistentcookie.validation.SigningKeyValidator,com.sun.identity.common.configuration.DuplicateKeyMapValueValidator,com.sun.identity.common.configuration.AgentClientIpModeValueValidator,com.sun.identity.common.configuration.FilterModeValueValidator,com.sun.identity.common.configuration.GlobalMapValueValidator,com.sun.identity.common.configuration.ListValueValidator,com.sun.identity.common.configuration.MapValueValidator,com.sun.identity.common.configuration.ServerPropertyValidator,com.sun.identity.policy.ResourceComparatorValidator,com.sun.identity.sm.EmailValidator,com.sun.identity.sm.IPAddressValidator,com.sun.identity.sm.RequiredValueValidator,com.sun.identity.sm.ServerIDValidator,com.sun.identity.sm.SiteIDValidator,org.forgerock.openam.sm.validation.Base64EncodedBinaryValidator,org.forgerock.openam.sm.validation.BlankValueValidator,org.forgerock.openam.sm.validation.DurationValidator,org.forgerock.openam.sm.validation.EndpointValidator,org.forgerock.openam.sm.validation.HostnameValidator,org.forgerock.openam.sm.validation.PortValidator,org.forgerock.openam.sm.validation.SecretIdValidator,org.forgerock.openam.sm.validation.StatelessSessionSigningAlgorithmValidator,org.forgerock.openam.sm.validation.StringMapValidator,org.forgerock.openam.sm.validation.URLValidator,org.forgerock.openam.selfservice.config.KeyAliasValidator,org.forgerock.openam.sm.validation.UniqueIndexedValuesValidator,org.forgerock.openam.webhook.HttpHeaderValidator,org.forgerock.oauth2.core.ClientRedirectUriValidator",
          "openam.session.case.sensitive.uuid": false,
          "org.forgerock.allow.http.client.debug": false,
          "org.forgerock.am.auth.chains.authindexuser.strict": true,
          "org.forgerock.am.auth.node.otp.inSharedState": false,
          "org.forgerock.am.auth.trees.authenticate.identified.identity": true,
          "org.forgerock.openam.audit.additionalSuccessStatusCodesEnabled": true,
          "org.forgerock.openam.audit.identity.activity.events.blacklist": "AM-ACCESS-ATTEMPT,AM-IDENTITY-CHANGE,AM-GROUP-CHANGE",
          "org.forgerock.openam.auth.transactionauth.returnErrorOnAuthFailure": false,
          "org.forgerock.openam.authLevel.excludeRequiredOrRequisite": false,
          "org.forgerock.openam.authentication.forceAuth.enabled": false,
          "org.forgerock.openam.console.autocomplete.enabled": true,
          "org.forgerock.openam.core.resource.lookup.cache.enabled": true,
          "org.forgerock.openam.core.sms.placeholder_api_enabled": "OFF",
          "org.forgerock.openam.devices.recovery.use_insecure_storage": false,
          "org.forgerock.openam.encryption.key.digest": "SHA1",
          "org.forgerock.openam.encryption.key.iterations": "10000",
          "org.forgerock.openam.encryption.key.size": "128",
          "org.forgerock.openam.httpclienthandler.system.clients.connection.timeout": "10 seconds",
          "org.forgerock.openam.httpclienthandler.system.clients.max.connections": "64",
          "org.forgerock.openam.httpclienthandler.system.clients.pool.ttl": "-1",
          "org.forgerock.openam.httpclienthandler.system.clients.response.timeout": "10 seconds",
          "org.forgerock.openam.httpclienthandler.system.clients.retry.failed.requests.enabled": true,
          "org.forgerock.openam.httpclienthandler.system.clients.reuse.connections.enabled": true,
          "org.forgerock.openam.httpclienthandler.system.nonProxyHosts": "localhost,127.*,[::1],0.0.0.0,[::0]",
          "org.forgerock.openam.httpclienthandler.system.proxy.enabled": false,
          "org.forgerock.openam.httpclienthandler.system.proxy.password": null,
          "org.forgerock.openam.httpclienthandler.system.proxy.uri": "",
          "org.forgerock.openam.httpclienthandler.system.proxy.username": "",
          "org.forgerock.openam.idm.attribute.names.lower.case": false,
          "org.forgerock.openam.idrepo.ldapv3.passwordpolicy.allowDiagnosticMessage": false,
          "org.forgerock.openam.idrepo.ldapv3.proxyauth.passwordreset.adminRequest": "isAdminPasswordChangeRequest",
          "org.forgerock.openam.introspect.token.query.param.allowed": false,
          "org.forgerock.openam.ldap.dncache.expire.time": "0",
          "org.forgerock.openam.ldap.heartbeat.timeout": "10",
          "org.forgerock.openam.ldap.keepalive.search.base": "",
          "org.forgerock.openam.ldap.keepalive.search.filter": "(objectClass=*)",
          "org.forgerock.openam.ldap.secure.protocol.version": "TLSv1.3,TLSv1.2",
          "org.forgerock.openam.notifications.agents.enabled": true,
          "org.forgerock.openam.oauth2.checkIssuerForIdTokenInfo": true,
          "org.forgerock.openam.radius.server.context.cache.size": "5000",
          "org.forgerock.openam.redirecturlvalidator.maxUrlLength": "2000",
          "org.forgerock.openam.request.max.bytes.entity.size": "1048576",
          "org.forgerock.openam.saml2.authenticatorlookup.skewAllowance": "60",
          "org.forgerock.openam.scripting.maxinterpreterstackdepth": "10000",
          "org.forgerock.openam.secrets.special.user.passwords.format": "ENCRYPTED_PLAIN",
          "org.forgerock.openam.secrets.special.user.secret.refresh.seconds": "900",
          "org.forgerock.openam.session.service.persistence.deleteAsynchronously": true,
          "org.forgerock.openam.session.stateless.encryption.method": "A128CBC-HS256",
          "org.forgerock.openam.session.stateless.rsa.padding": "RSA-OAEP-256",
          "org.forgerock.openam.session.stateless.signing.allownone": false,
          "org.forgerock.openam.showServletTraceInBrowser": false,
          "org.forgerock.openam.slf4j.enableTraceInMessage": false,
          "org.forgerock.openam.smtp.system.connect.timeout": "10000",
          "org.forgerock.openam.smtp.system.socket.read.timeout": "10000",
          "org.forgerock.openam.smtp.system.socket.write.timeout": "10000",
          "org.forgerock.openam.sso.providers.list": "org.forgerock.openidconnect.ssoprovider.OpenIdConnectSSOProvider",
          "org.forgerock.openam.timerpool.shutdown.retry.interval": "15000",
          "org.forgerock.openam.timerpool.shutdown.retry.limit": "3",
          "org.forgerock.openam.timerpool.shutdown.retry.multiplier": "1.5",
          "org.forgerock.openam.trees.consumedstatedata.cache.size": "15",
          "org.forgerock.openam.trees.ids.cache.size": "50",
          "org.forgerock.openam.url.connectTimeout": "1000",
          "org.forgerock.openam.xui.user.session.validation.enabled": true,
          "org.forgerock.openidconnect.ssoprovider.maxcachesize": "5000",
          "org.forgerock.security.entitlement.enforce.realm": true,
          "org.forgerock.security.oauth2.enforce.sub.claim.uniqueness": true,
          "org.forgerock.services.cts.store.reaper.enabled": true,
          "org.forgerock.services.cts.store.ttlsupport.enabled": false,
          "org.forgerock.services.cts.store.ttlsupport.exclusionlist": "",
          "org.forgerock.services.default.store.max.connections": "",
          "org.forgerock.services.default.store.min.connections": "",
          "org.forgerock.services.openid.request.object.lifespan": "120000",
          "securidHelper.ports": "58943"
        },
        "cts": {
          "_id": "null/properties/cts",
          "amconfig.org.forgerock.services.cts.store.common.section": {
            "org.forgerock.services.cts.store.location": "default",
            "org.forgerock.services.cts.store.max.connections": "100",
            "org.forgerock.services.cts.store.page.size": "0",
            "org.forgerock.services.cts.store.root.suffix": "",
            "org.forgerock.services.cts.store.vlv.page.size": "1000"
          },
          "amconfig.org.forgerock.services.cts.store.external.section": {
            "org.forgerock.services.cts.store.directory.name": "",
            "org.forgerock.services.cts.store.heartbeat": "10",
            "org.forgerock.services.cts.store.loginid": "",
            "org.forgerock.services.cts.store.mtls.enabled": "",
            "org.forgerock.services.cts.store.password": null,
            "org.forgerock.services.cts.store.ssl.enabled": "",
            "org.forgerock.services.cts.store.starttls.enabled": ""
          }
        },
        "general": {
          "_id": "null/properties/general",
          "amconfig.header.debug": {
            "com.iplanet.services.debug.directory": "%BASE_DIR%/var/debug",
            "com.iplanet.services.debug.level": "off",
            "com.sun.services.debug.mergeall": "on"
          },
          "amconfig.header.installdir": {
            "com.iplanet.am.locale": "en_US",
            "com.iplanet.am.util.xml.validating": "off",
            "com.iplanet.services.configpath": "%BASE_DIR%",
            "com.sun.identity.client.notification.url": "%SERVER_PROTO%://%SERVER_HOST%:%SERVER_PORT%/%SERVER_URI%/notificationservice"
          },
          "amconfig.header.mailserver": {
            "com.iplanet.am.smtphost": "localhost",
            "com.iplanet.am.smtpport": "25"
          }
        },
        "sdk": {
          "_id": "null/properties/sdk",
          "amconfig.header.cachingreplica": {
            "com.iplanet.am.sdk.cache.maxSize": "10000"
          },
          "amconfig.header.datastore": {
            "com.sun.identity.sm.enableDataStoreNotification": false,
            "com.sun.identity.sm.notification.threadpool.size": "1"
          },
          "amconfig.header.eventservice": {
            "com.iplanet.am.event.connection.delay.between.retries": "3000",
            "com.iplanet.am.event.connection.ldap.error.codes.retries": "80,81,91",
            "com.iplanet.am.event.connection.num.retries": "3",
            "com.sun.am.event.connection.disable.list": "aci,um,sm"
          },
          "amconfig.header.ldapconnection": {
            "com.iplanet.am.ldap.connection.delay.between.retries": "1000",
            "com.iplanet.am.ldap.connection.ldap.error.codes.retries": "80,81,91",
            "com.iplanet.am.ldap.connection.num.retries": "3"
          },
          "amconfig.header.sdktimetoliveconfig": {
            "com.iplanet.am.sdk.cache.entry.default.expire.time": "30",
            "com.iplanet.am.sdk.cache.entry.expire.enabled": false,
            "com.iplanet.am.sdk.cache.entry.user.expire.time": "15"
          }
        },
        "security": {
          "_id": "null/properties/security",
          "amconfig.header.cookie": {
            "com.iplanet.am.cookie.encode": false,
            "com.iplanet.am.cookie.name": "iPlanetDirectoryPro",
            "com.iplanet.am.cookie.secure": false
          },
          "amconfig.header.crlcache": {
            "com.sun.identity.crl.cache.directory.host": "",
            "com.sun.identity.crl.cache.directory.mtlsenabled": false,
            "com.sun.identity.crl.cache.directory.password": null,
            "com.sun.identity.crl.cache.directory.port": "",
            "com.sun.identity.crl.cache.directory.searchattr": "",
            "com.sun.identity.crl.cache.directory.searchlocs": "",
            "com.sun.identity.crl.cache.directory.ssl": false,
            "com.sun.identity.crl.cache.directory.user": ""
          },
          "amconfig.header.deserialisationwhitelist": {
            "openam.deserialisation.classes.whitelist": "com.iplanet.dpro.session.DNOrIPAddressListTokenRestriction,com.sun.identity.common.CaseInsensitiveHashMap,com.sun.identity.common.CaseInsensitiveHashSet,com.sun.identity.common.CaseInsensitiveKey,com.sun.identity.console.base.model.SMSubConfig,com.sun.identity.console.session.model.SMSessionData,com.sun.identity.console.user.model.UMUserPasswordResetOptionsData,com.sun.identity.shared.datastruct.OrderedSet,com.sun.xml.bind.util.ListImpl,com.sun.xml.bind.util.ProxyListImpl,java.lang.Boolean,java.lang.Integer,java.lang.Number,java.lang.StringBuffer,java.net.InetAddress,java.security.cert.Certificate,java.security.cert.Certificate$CertificateRep,java.util.ArrayList,java.util.Collections$EmptyMap,java.util.Collections$EmptySet,java.util.Collections$SingletonList,java.util.HashMap,java.util.HashSet,java.util.LinkedHashSet,java.util.Locale,org.forgerock.openam.authentication.service.protocol.RemoteCookie,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteSession,org.forgerock.openam.dpro.session.NoOpTokenRestriction,org.forgerock.openam.dpro.session.ProofOfPossessionTokenRestriction"
          },
          "amconfig.header.encryption": {
            "am.encryption.pwd": "@AM_ENC_PWD@",
            "am.encryption.secret.enabled": false,
            "am.encryption.secret.keystoreType": "JCEKS",
            "com.iplanet.security.SecureRandomFactoryImpl": "com.iplanet.am.util.SecureRandomFactoryImpl",
            "com.iplanet.security.encryptor": "com.iplanet.services.util.JCEEncryption"
          },
          "amconfig.header.ocsp.check": {
            "com.sun.identity.authentication.ocsp.responder.nickname": "",
            "com.sun.identity.authentication.ocsp.responder.url": "",
            "com.sun.identity.authentication.ocspCheck": false
          },
          "amconfig.header.securitykey": {
            "com.sun.identity.saml.xmlsig.certalias": "test",
            "com.sun.identity.saml.xmlsig.keypass": "%BASE_DIR%/security/secrets/default/.keypass",
            "com.sun.identity.saml.xmlsig.keystore": "%BASE_DIR%/security/keystores/keystore.jceks",
            "com.sun.identity.saml.xmlsig.storepass": "%BASE_DIR%/security/secrets/default/.storepass",
            "com.sun.identity.saml.xmlsig.storetype": "JCEKS"
          },
          "amconfig.header.validation": {
            "com.iplanet.am.clientIPCheckEnabled": false,
            "com.iplanet.services.comm.server.pllrequest.maxContentLength": "16384"
          }
        },
        "session": {
          "_id": "null/properties/session",
          "amconfig.header.sessionlogging": {
            "com.iplanet.am.stats.interval": "60",
            "com.iplanet.services.stats.directory": "%BASE_DIR%/var/stats",
            "com.iplanet.services.stats.state": "file",
            "com.sun.am.session.enableHostLookUp": false
          },
          "amconfig.header.sessionnotification": {
            "com.iplanet.am.notification.threadpool.size": "10",
            "com.iplanet.am.notification.threadpool.threshold": "5000"
          },
          "amconfig.header.sessionthresholds": {
            "com.iplanet.am.session.invalidsessionmaxtime": "3",
            "org.forgerock.openam.session.service.access.persistence.caching.maxsize": "5000"
          },
          "amconfig.header.sessionvalidation": {
            "com.sun.am.session.caseInsensitiveDN": true
          }
        },
        "uma": {
          "_id": "null/properties/uma",
          "amconfig.org.forgerock.services.resourcesets.store.common.section": {
            "org.forgerock.services.resourcesets.store.location": "default",
            "org.forgerock.services.resourcesets.store.max.connections": "10",
            "org.forgerock.services.resourcesets.store.root.suffix": ""
          },
          "amconfig.org.forgerock.services.resourcesets.store.external.section": {
            "org.forgerock.services.resourcesets.store.directory.name": "",
            "org.forgerock.services.resourcesets.store.heartbeat": "10",
            "org.forgerock.services.resourcesets.store.loginid": "",
            "org.forgerock.services.resourcesets.store.mtls.enabled": "",
            "org.forgerock.services.resourcesets.store.password": null,
            "org.forgerock.services.resourcesets.store.ssl.enabled": "",
            "org.forgerock.services.resourcesets.store.starttls.enabled": ""
          },
          "amconfig.org.forgerock.services.uma.labels.store.common.section": {
            "org.forgerock.services.uma.labels.store.location": "default",
            "org.forgerock.services.uma.labels.store.max.connections": "2",
            "org.forgerock.services.uma.labels.store.root.suffix": ""
          },
          "amconfig.org.forgerock.services.uma.labels.store.external.section": {
            "org.forgerock.services.uma.labels.store.directory.name": "",
            "org.forgerock.services.uma.labels.store.heartbeat": "10",
            "org.forgerock.services.uma.labels.store.loginid": "",
            "org.forgerock.services.uma.labels.store.mtls.enabled": "",
            "org.forgerock.services.uma.labels.store.password": null,
            "org.forgerock.services.uma.labels.store.ssl.enabled": "",
            "org.forgerock.services.uma.labels.store.starttls.enabled": ""
          },
          "amconfig.org.forgerock.services.uma.pendingrequests.store.common.section": {
            "org.forgerock.services.uma.pendingrequests.store.location": "default",
            "org.forgerock.services.uma.pendingrequests.store.max.connections": "10",
            "org.forgerock.services.uma.pendingrequests.store.root.suffix": ""
          },
          "amconfig.org.forgerock.services.uma.pendingrequests.store.external.section": {
            "org.forgerock.services.uma.pendingrequests.store.directory.name": "",
            "org.forgerock.services.uma.pendingrequests.store.heartbeat": "10",
            "org.forgerock.services.uma.pendingrequests.store.loginid": "",
            "org.forgerock.services.uma.pendingrequests.store.mtls.enabled": "",
            "org.forgerock.services.uma.pendingrequests.store.password": null,
            "org.forgerock.services.uma.pendingrequests.store.ssl.enabled": "",
            "org.forgerock.services.uma.pendingrequests.store.starttls.enabled": ""
          },
          "amconfig.org.forgerock.services.umaaudit.store.common.section": {
            "org.forgerock.services.umaaudit.store.location": "default",
            "org.forgerock.services.umaaudit.store.max.connections": "10",
            "org.forgerock.services.umaaudit.store.root.suffix": ""
          },
          "amconfig.org.forgerock.services.umaaudit.store.external.section": {
            "org.forgerock.services.umaaudit.store.directory.name": "",
            "org.forgerock.services.umaaudit.store.heartbeat": "10",
            "org.forgerock.services.umaaudit.store.loginid": "",
            "org.forgerock.services.umaaudit.store.mtls.enabled": "",
            "org.forgerock.services.umaaudit.store.password": null,
            "org.forgerock.services.umaaudit.store.ssl.enabled": "",
            "org.forgerock.services.umaaudit.store.starttls.enabled": ""
          }
        }
      },
      "server": {
        "01": {
          "_id": "01",
          "properties": {
            "advanced": {
              "_id": "01/properties/advanced",
              "bootstrap.file": "/home/prestonhales/.openamcfg/AMConfig_usr_local_tomcat_webapps_am_",
              "com.iplanet.am.lbcookie.value": "01",
              "com.iplanet.am.serverMode": true,
              "com.iplanet.security.SSLSocketFactoryImpl": "com.sun.identity.shared.ldap.factory.JSSESocketFactory",
              "com.sun.embedded.replicationport": "",
              "com.sun.embedded.sync.servers": "on",
              "com.sun.identity.common.systemtimerpool.size": "3",
              "com.sun.identity.sm.sms_object_class_name": "com.sun.identity.sm.SmsWrapperObject",
              "com.sun.identity.urlconnection.useCache": false,
              "opensso.protocol.handler.pkgs": "",
              "org.forgerock.embedded.dsadminport": "4444"
            },
            "cts": {
              "_id": "01/properties/cts",
              "amconfig.org.forgerock.services.cts.store.common.section": {
                "org.forgerock.services.cts.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.cts.store.max.connections": {
                  "inherited": true,
                  "value": "100"
                },
                "org.forgerock.services.cts.store.page.size": {
                  "inherited": true,
                  "value": "0"
                },
                "org.forgerock.services.cts.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.vlv.page.size": {
                  "inherited": true,
                  "value": "1000"
                }
              },
              "amconfig.org.forgerock.services.cts.store.external.section": {
                "org.forgerock.services.cts.store.affinity.enabled": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.cts.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.cts.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.cts.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              }
            },
            "directoryConfiguration": {
              "_id": "01/properties/directoryConfiguration",
              "directoryConfiguration": {
                "bindDn": "cn=Directory Manager",
                "bindPassword": null,
                "maxConnectionPool": 10,
                "minConnectionPool": 1,
                "mtlsAlias": "",
                "mtlsEnabled": false,
                "mtlsKeyPasswordFile": "",
                "mtlsKeyStoreFile": "",
                "mtlsKeyStorePasswordFile": "",
                "mtlsKeyStoreType": null
              },
              "directoryServers": [
                {
                  "connectionType": "SSL",
                  "hostName": "localhost",
                  "portNumber": "50636",
                  "serverName": "Server1"
                }
              ]
            },
            "general": {
              "_id": "01/properties/general",
              "amconfig.header.debug": {
                "com.iplanet.services.debug.directory": {
                  "inherited": true,
                  "value": "%BASE_DIR%/var/debug"
                },
                "com.iplanet.services.debug.level": {
                  "inherited": true,
                  "value": "off"
                },
                "com.sun.services.debug.mergeall": {
                  "inherited": true,
                  "value": "on"
                }
              },
              "amconfig.header.installdir": {
                "com.iplanet.am.locale": {
                  "inherited": false,
                  "value": "en_US"
                },
                "com.iplanet.am.util.xml.validating": {
                  "inherited": true,
                  "value": "off"
                },
                "com.iplanet.services.configpath": {
                  "inherited": false,
                  "value": "/home/prestonhales/am"
                },
                "com.sun.identity.client.notification.url": {
                  "inherited": true,
                  "value": "%SERVER_PROTO%://%SERVER_HOST%:%SERVER_PORT%/%SERVER_URI%/notificationservice"
                }
              },
              "amconfig.header.mailserver": {
                "com.iplanet.am.smtphost": {
                  "inherited": true,
                  "value": "localhost"
                },
                "com.iplanet.am.smtpport": {
                  "inherited": true,
                  "value": "25"
                }
              },
              "amconfig.header.site": {
                "singleChoiceSite": "[Empty]"
              }
            },
            "sdk": {
              "_id": "01/properties/sdk",
              "amconfig.header.cachingreplica": {
                "com.iplanet.am.sdk.cache.maxSize": {
                  "inherited": true,
                  "value": "10000"
                }
              },
              "amconfig.header.datastore": {
                "com.sun.identity.sm.enableDataStoreNotification": {
                  "inherited": false,
                  "value": true
                },
                "com.sun.identity.sm.notification.threadpool.size": {
                  "inherited": true,
                  "value": "1"
                }
              },
              "amconfig.header.eventservice": {
                "com.iplanet.am.event.connection.delay.between.retries": {
                  "inherited": true,
                  "value": "3000"
                },
                "com.iplanet.am.event.connection.ldap.error.codes.retries": {
                  "inherited": true,
                  "value": "80,81,91"
                },
                "com.iplanet.am.event.connection.num.retries": {
                  "inherited": true,
                  "value": "3"
                },
                "com.sun.am.event.connection.disable.list": {
                  "inherited": false,
                  "value": "aci,um"
                }
              },
              "amconfig.header.ldapconnection": {
                "com.iplanet.am.ldap.connection.delay.between.retries": {
                  "inherited": true,
                  "value": "1000"
                },
                "com.iplanet.am.ldap.connection.ldap.error.codes.retries": {
                  "inherited": false,
                  "value": "80,81,91"
                },
                "com.iplanet.am.ldap.connection.num.retries": {
                  "inherited": true,
                  "value": "3"
                }
              },
              "amconfig.header.sdktimetoliveconfig": {
                "com.iplanet.am.sdk.cache.entry.default.expire.time": {
                  "inherited": true,
                  "value": "30"
                },
                "com.iplanet.am.sdk.cache.entry.expire.enabled": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.am.sdk.cache.entry.user.expire.time": {
                  "inherited": true,
                  "value": "15"
                }
              }
            },
            "security": {
              "_id": "01/properties/security",
              "amconfig.header.cookie": {
                "com.iplanet.am.cookie.encode": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.am.cookie.name": {
                  "inherited": true,
                  "value": "iPlanetDirectoryPro"
                },
                "com.iplanet.am.cookie.secure": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.crlcache": {
                "com.sun.identity.crl.cache.directory.host": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.mtlsenabled": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.crl.cache.directory.password": {
                  "inherited": true,
                  "value": null
                },
                "com.sun.identity.crl.cache.directory.port": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.searchattr": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.searchlocs": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.ssl": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.crl.cache.directory.user": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.header.deserialisationwhitelist": {
                "openam.deserialisation.classes.whitelist": {
                  "inherited": true,
                  "value": "com.iplanet.dpro.session.DNOrIPAddressListTokenRestriction,com.sun.identity.common.CaseInsensitiveHashMap,com.sun.identity.common.CaseInsensitiveHashSet,com.sun.identity.common.CaseInsensitiveKey,com.sun.identity.console.base.model.SMSubConfig,com.sun.identity.console.session.model.SMSessionData,com.sun.identity.console.user.model.UMUserPasswordResetOptionsData,com.sun.identity.shared.datastruct.OrderedSet,com.sun.xml.bind.util.ListImpl,com.sun.xml.bind.util.ProxyListImpl,java.lang.Boolean,java.lang.Integer,java.lang.Number,java.lang.StringBuffer,java.net.InetAddress,java.security.cert.Certificate,java.security.cert.Certificate$CertificateRep,java.util.ArrayList,java.util.Collections$EmptyMap,java.util.Collections$EmptySet,java.util.Collections$SingletonList,java.util.HashMap,java.util.HashSet,java.util.LinkedHashSet,java.util.Locale,org.forgerock.openam.authentication.service.protocol.RemoteCookie,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteSession,org.forgerock.openam.dpro.session.NoOpTokenRestriction,org.forgerock.openam.dpro.session.ProofOfPossessionTokenRestriction"
                }
              },
              "amconfig.header.encryption": {
                "am.encryption.pwd": {
                  "inherited": false,
                  "value": "efSYcwIhr7uKH30rgciGTVTFzb63LhYu"
                },
                "am.encryption.secret.alias": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.enabled": {
                  "inherited": true,
                  "value": false
                },
                "am.encryption.secret.keyPass": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystoreFile": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystorePass": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystoreType": {
                  "inherited": true,
                  "value": "JCEKS"
                },
                "com.iplanet.security.SecureRandomFactoryImpl": {
                  "inherited": true,
                  "value": "com.iplanet.am.util.SecureRandomFactoryImpl"
                },
                "com.iplanet.security.encryptor": {
                  "inherited": true,
                  "value": "com.iplanet.services.util.JCEEncryption"
                }
              },
              "amconfig.header.ocsp.check": {
                "com.sun.identity.authentication.ocsp.responder.nickname": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.authentication.ocsp.responder.url": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.authentication.ocspCheck": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.securitykey": {
                "com.sun.identity.saml.xmlsig.certalias": {
                  "inherited": true,
                  "value": "test"
                },
                "com.sun.identity.saml.xmlsig.keypass": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/secrets/default/.keypass"
                },
                "com.sun.identity.saml.xmlsig.keystore": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/keystores/keystore.jceks"
                },
                "com.sun.identity.saml.xmlsig.storepass": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/secrets/default/.storepass"
                },
                "com.sun.identity.saml.xmlsig.storetype": {
                  "inherited": true,
                  "value": "JCEKS"
                }
              },
              "amconfig.header.validation": {
                "com.iplanet.am.clientIPCheckEnabled": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.services.comm.server.pllrequest.maxContentLength": {
                  "inherited": true,
                  "value": "16384"
                }
              }
            },
            "session": {
              "_id": "01/properties/session",
              "amconfig.header.sessionlogging": {
                "com.iplanet.am.stats.interval": {
                  "inherited": true,
                  "value": "60"
                },
                "com.iplanet.services.stats.directory": {
                  "inherited": true,
                  "value": "%BASE_DIR%/var/stats"
                },
                "com.iplanet.services.stats.state": {
                  "inherited": true,
                  "value": "file"
                },
                "com.sun.am.session.enableHostLookUp": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.sessionnotification": {
                "com.iplanet.am.notification.threadpool.size": {
                  "inherited": true,
                  "value": "10"
                },
                "com.iplanet.am.notification.threadpool.threshold": {
                  "inherited": true,
                  "value": "5000"
                }
              },
              "amconfig.header.sessionthresholds": {
                "com.iplanet.am.session.invalidsessionmaxtime": {
                  "inherited": true,
                  "value": "3"
                },
                "org.forgerock.openam.session.service.access.persistence.caching.maxsize": {
                  "inherited": true,
                  "value": "5000"
                }
              },
              "amconfig.header.sessionvalidation": {
                "com.sun.am.session.caseInsensitiveDN": {
                  "inherited": true,
                  "value": true
                }
              }
            },
            "uma": {
              "_id": "01/properties/uma",
              "amconfig.org.forgerock.services.resourcesets.store.common.section": {
                "org.forgerock.services.resourcesets.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.resourcesets.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.resourcesets.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.resourcesets.store.external.section": {
                "org.forgerock.services.resourcesets.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.resourcesets.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.resourcesets.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.labels.store.common.section": {
                "org.forgerock.services.uma.labels.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.uma.labels.store.max.connections": {
                  "inherited": true,
                  "value": "2"
                },
                "org.forgerock.services.uma.labels.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.labels.store.external.section": {
                "org.forgerock.services.uma.labels.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.labels.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.uma.labels.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.pendingrequests.store.common.section": {
                "org.forgerock.services.uma.pendingrequests.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.uma.pendingrequests.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.pendingrequests.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.pendingrequests.store.external.section": {
                "org.forgerock.services.uma.pendingrequests.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.pendingrequests.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.uma.pendingrequests.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.umaaudit.store.common.section": {
                "org.forgerock.services.umaaudit.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.umaaudit.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.umaaudit.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.umaaudit.store.external.section": {
                "org.forgerock.services.umaaudit.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.umaaudit.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.umaaudit.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              }
            }
          },
          "siteName": null,
          "url": "http://localhost:8080/am"
        },
        "03": {
          "_id": "03",
          "properties": {
            "advanced": {
              "_id": "03/properties/advanced",
              "com.iplanet.am.lbcookie.value": "03"
            },
            "cts": {
              "_id": "03/properties/cts",
              "amconfig.org.forgerock.services.cts.store.common.section": {
                "org.forgerock.services.cts.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.cts.store.max.connections": {
                  "inherited": true,
                  "value": "100"
                },
                "org.forgerock.services.cts.store.page.size": {
                  "inherited": true,
                  "value": "0"
                },
                "org.forgerock.services.cts.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.vlv.page.size": {
                  "inherited": true,
                  "value": "1000"
                }
              },
              "amconfig.org.forgerock.services.cts.store.external.section": {
                "org.forgerock.services.cts.store.affinity.enabled": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.cts.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.cts.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.cts.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              }
            },
            "directoryConfiguration": {
              "_id": "03/properties/directoryConfiguration",
              "directoryConfiguration": {
                "bindDn": "cn=Directory Manager",
                "bindPassword": null,
                "maxConnectionPool": 10,
                "minConnectionPool": 1,
                "mtlsAlias": "",
                "mtlsEnabled": false,
                "mtlsKeyPasswordFile": "",
                "mtlsKeyStoreFile": "",
                "mtlsKeyStorePasswordFile": "",
                "mtlsKeyStoreType": null
              },
              "directoryServers": [
                {
                  "connectionType": "SSL",
                  "hostName": "localhost",
                  "portNumber": "50636",
                  "serverName": "Server1"
                }
              ]
            },
            "general": {
              "_id": "03/properties/general",
              "amconfig.header.debug": {
                "com.iplanet.services.debug.directory": {
                  "inherited": true,
                  "value": "%BASE_DIR%/var/debug"
                },
                "com.iplanet.services.debug.level": {
                  "inherited": true,
                  "value": "off"
                },
                "com.sun.services.debug.mergeall": {
                  "inherited": true,
                  "value": "on"
                }
              },
              "amconfig.header.installdir": {
                "com.iplanet.am.locale": {
                  "inherited": true,
                  "value": "en_US"
                },
                "com.iplanet.am.util.xml.validating": {
                  "inherited": true,
                  "value": "off"
                },
                "com.iplanet.services.configpath": {
                  "inherited": true,
                  "value": "%BASE_DIR%"
                },
                "com.sun.identity.client.notification.url": {
                  "inherited": true,
                  "value": "%SERVER_PROTO%://%SERVER_HOST%:%SERVER_PORT%/%SERVER_URI%/notificationservice"
                }
              },
              "amconfig.header.mailserver": {
                "com.iplanet.am.smtphost": {
                  "inherited": true,
                  "value": "localhost"
                },
                "com.iplanet.am.smtpport": {
                  "inherited": true,
                  "value": "25"
                }
              },
              "amconfig.header.site": {
                "singleChoiceSite": "testsite"
              }
            },
            "sdk": {
              "_id": "03/properties/sdk",
              "amconfig.header.cachingreplica": {
                "com.iplanet.am.sdk.cache.maxSize": {
                  "inherited": true,
                  "value": "10000"
                }
              },
              "amconfig.header.datastore": {
                "com.sun.identity.sm.enableDataStoreNotification": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.sm.notification.threadpool.size": {
                  "inherited": true,
                  "value": "1"
                }
              },
              "amconfig.header.eventservice": {
                "com.iplanet.am.event.connection.delay.between.retries": {
                  "inherited": true,
                  "value": "3000"
                },
                "com.iplanet.am.event.connection.ldap.error.codes.retries": {
                  "inherited": true,
                  "value": "80,81,91"
                },
                "com.iplanet.am.event.connection.num.retries": {
                  "inherited": true,
                  "value": "3"
                },
                "com.sun.am.event.connection.disable.list": {
                  "inherited": true,
                  "value": "aci,um,sm"
                }
              },
              "amconfig.header.ldapconnection": {
                "com.iplanet.am.ldap.connection.delay.between.retries": {
                  "inherited": true,
                  "value": "1000"
                },
                "com.iplanet.am.ldap.connection.ldap.error.codes.retries": {
                  "inherited": true,
                  "value": "80,81,91"
                },
                "com.iplanet.am.ldap.connection.num.retries": {
                  "inherited": true,
                  "value": "3"
                }
              },
              "amconfig.header.sdktimetoliveconfig": {
                "com.iplanet.am.sdk.cache.entry.default.expire.time": {
                  "inherited": true,
                  "value": "30"
                },
                "com.iplanet.am.sdk.cache.entry.expire.enabled": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.am.sdk.cache.entry.user.expire.time": {
                  "inherited": true,
                  "value": "15"
                }
              }
            },
            "security": {
              "_id": "03/properties/security",
              "amconfig.header.cookie": {
                "com.iplanet.am.cookie.encode": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.am.cookie.name": {
                  "inherited": true,
                  "value": "iPlanetDirectoryPro"
                },
                "com.iplanet.am.cookie.secure": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.crlcache": {
                "com.sun.identity.crl.cache.directory.host": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.mtlsenabled": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.crl.cache.directory.password": {
                  "inherited": true,
                  "value": null
                },
                "com.sun.identity.crl.cache.directory.port": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.searchattr": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.searchlocs": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.ssl": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.crl.cache.directory.user": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.header.deserialisationwhitelist": {
                "openam.deserialisation.classes.whitelist": {
                  "inherited": true,
                  "value": "com.iplanet.dpro.session.DNOrIPAddressListTokenRestriction,com.sun.identity.common.CaseInsensitiveHashMap,com.sun.identity.common.CaseInsensitiveHashSet,com.sun.identity.common.CaseInsensitiveKey,com.sun.identity.console.base.model.SMSubConfig,com.sun.identity.console.session.model.SMSessionData,com.sun.identity.console.user.model.UMUserPasswordResetOptionsData,com.sun.identity.shared.datastruct.OrderedSet,com.sun.xml.bind.util.ListImpl,com.sun.xml.bind.util.ProxyListImpl,java.lang.Boolean,java.lang.Integer,java.lang.Number,java.lang.StringBuffer,java.net.InetAddress,java.security.cert.Certificate,java.security.cert.Certificate$CertificateRep,java.util.ArrayList,java.util.Collections$EmptyMap,java.util.Collections$EmptySet,java.util.Collections$SingletonList,java.util.HashMap,java.util.HashSet,java.util.LinkedHashSet,java.util.Locale,org.forgerock.openam.authentication.service.protocol.RemoteCookie,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteSession,org.forgerock.openam.dpro.session.NoOpTokenRestriction,org.forgerock.openam.dpro.session.ProofOfPossessionTokenRestriction"
                }
              },
              "amconfig.header.encryption": {
                "am.encryption.pwd": {
                  "inherited": true,
                  "value": "@AM_ENC_PWD@"
                },
                "am.encryption.secret.alias": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.enabled": {
                  "inherited": true,
                  "value": false
                },
                "am.encryption.secret.keyPass": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystoreFile": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystorePass": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystoreType": {
                  "inherited": true,
                  "value": "JCEKS"
                },
                "com.iplanet.security.SecureRandomFactoryImpl": {
                  "inherited": true,
                  "value": "com.iplanet.am.util.SecureRandomFactoryImpl"
                },
                "com.iplanet.security.encryptor": {
                  "inherited": true,
                  "value": "com.iplanet.services.util.JCEEncryption"
                }
              },
              "amconfig.header.ocsp.check": {
                "com.sun.identity.authentication.ocsp.responder.nickname": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.authentication.ocsp.responder.url": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.authentication.ocspCheck": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.securitykey": {
                "com.sun.identity.saml.xmlsig.certalias": {
                  "inherited": true,
                  "value": "test"
                },
                "com.sun.identity.saml.xmlsig.keypass": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/secrets/default/.keypass"
                },
                "com.sun.identity.saml.xmlsig.keystore": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/keystores/keystore.jceks"
                },
                "com.sun.identity.saml.xmlsig.storepass": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/secrets/default/.storepass"
                },
                "com.sun.identity.saml.xmlsig.storetype": {
                  "inherited": true,
                  "value": "JCEKS"
                }
              },
              "amconfig.header.validation": {
                "com.iplanet.am.clientIPCheckEnabled": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.services.comm.server.pllrequest.maxContentLength": {
                  "inherited": true,
                  "value": "16384"
                }
              }
            },
            "session": {
              "_id": "03/properties/session",
              "amconfig.header.sessionlogging": {
                "com.iplanet.am.stats.interval": {
                  "inherited": true,
                  "value": "60"
                },
                "com.iplanet.services.stats.directory": {
                  "inherited": true,
                  "value": "%BASE_DIR%/var/stats"
                },
                "com.iplanet.services.stats.state": {
                  "inherited": true,
                  "value": "file"
                },
                "com.sun.am.session.enableHostLookUp": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.sessionnotification": {
                "com.iplanet.am.notification.threadpool.size": {
                  "inherited": true,
                  "value": "10"
                },
                "com.iplanet.am.notification.threadpool.threshold": {
                  "inherited": true,
                  "value": "5000"
                }
              },
              "amconfig.header.sessionthresholds": {
                "com.iplanet.am.session.invalidsessionmaxtime": {
                  "inherited": true,
                  "value": "3"
                },
                "org.forgerock.openam.session.service.access.persistence.caching.maxsize": {
                  "inherited": true,
                  "value": "5000"
                }
              },
              "amconfig.header.sessionvalidation": {
                "com.sun.am.session.caseInsensitiveDN": {
                  "inherited": true,
                  "value": true
                }
              }
            },
            "uma": {
              "_id": "03/properties/uma",
              "amconfig.org.forgerock.services.resourcesets.store.common.section": {
                "org.forgerock.services.resourcesets.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.resourcesets.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.resourcesets.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.resourcesets.store.external.section": {
                "org.forgerock.services.resourcesets.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.resourcesets.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.resourcesets.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.labels.store.common.section": {
                "org.forgerock.services.uma.labels.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.uma.labels.store.max.connections": {
                  "inherited": true,
                  "value": "2"
                },
                "org.forgerock.services.uma.labels.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.labels.store.external.section": {
                "org.forgerock.services.uma.labels.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.labels.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.uma.labels.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.pendingrequests.store.common.section": {
                "org.forgerock.services.uma.pendingrequests.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.uma.pendingrequests.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.pendingrequests.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.pendingrequests.store.external.section": {
                "org.forgerock.services.uma.pendingrequests.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.pendingrequests.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.uma.pendingrequests.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.umaaudit.store.common.section": {
                "org.forgerock.services.umaaudit.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.umaaudit.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.umaaudit.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.umaaudit.store.external.section": {
                "org.forgerock.services.umaaudit.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.umaaudit.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.umaaudit.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              }
            }
          },
          "siteName": "testsite",
          "url": "http://localhost:8081/am"
        },
        "04": {
          "_id": "04",
          "properties": {
            "advanced": {
              "_id": "04/properties/advanced",
              "com.iplanet.am.lbcookie.value": "04"
            },
            "cts": {
              "_id": "04/properties/cts",
              "amconfig.org.forgerock.services.cts.store.common.section": {
                "org.forgerock.services.cts.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.cts.store.max.connections": {
                  "inherited": true,
                  "value": "100"
                },
                "org.forgerock.services.cts.store.page.size": {
                  "inherited": true,
                  "value": "0"
                },
                "org.forgerock.services.cts.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.vlv.page.size": {
                  "inherited": true,
                  "value": "1000"
                }
              },
              "amconfig.org.forgerock.services.cts.store.external.section": {
                "org.forgerock.services.cts.store.affinity.enabled": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.cts.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.cts.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.cts.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.cts.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              }
            },
            "directoryConfiguration": {
              "_id": "04/properties/directoryConfiguration",
              "directoryConfiguration": {
                "bindDn": "cn=Directory Manager",
                "bindPassword": null,
                "maxConnectionPool": 10,
                "minConnectionPool": 1,
                "mtlsAlias": "",
                "mtlsEnabled": false,
                "mtlsKeyPasswordFile": "",
                "mtlsKeyStoreFile": "",
                "mtlsKeyStorePasswordFile": "",
                "mtlsKeyStoreType": null
              },
              "directoryServers": [
                {
                  "connectionType": "SSL",
                  "hostName": "localhost",
                  "portNumber": "50636",
                  "serverName": "Server1"
                }
              ]
            },
            "general": {
              "_id": "04/properties/general",
              "amconfig.header.debug": {
                "com.iplanet.services.debug.directory": {
                  "inherited": true,
                  "value": "%BASE_DIR%/var/debug"
                },
                "com.iplanet.services.debug.level": {
                  "inherited": true,
                  "value": "off"
                },
                "com.sun.services.debug.mergeall": {
                  "inherited": true,
                  "value": "on"
                }
              },
              "amconfig.header.installdir": {
                "com.iplanet.am.locale": {
                  "inherited": true,
                  "value": "en_US"
                },
                "com.iplanet.am.util.xml.validating": {
                  "inherited": true,
                  "value": "off"
                },
                "com.iplanet.services.configpath": {
                  "inherited": true,
                  "value": "%BASE_DIR%"
                },
                "com.sun.identity.client.notification.url": {
                  "inherited": true,
                  "value": "%SERVER_PROTO%://%SERVER_HOST%:%SERVER_PORT%/%SERVER_URI%/notificationservice"
                }
              },
              "amconfig.header.mailserver": {
                "com.iplanet.am.smtphost": {
                  "inherited": true,
                  "value": "localhost"
                },
                "com.iplanet.am.smtpport": {
                  "inherited": true,
                  "value": "25"
                }
              },
              "amconfig.header.site": {
                "singleChoiceSite": "[Empty]"
              }
            },
            "sdk": {
              "_id": "04/properties/sdk",
              "amconfig.header.cachingreplica": {
                "com.iplanet.am.sdk.cache.maxSize": {
                  "inherited": true,
                  "value": "10000"
                }
              },
              "amconfig.header.datastore": {
                "com.sun.identity.sm.enableDataStoreNotification": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.sm.notification.threadpool.size": {
                  "inherited": true,
                  "value": "1"
                }
              },
              "amconfig.header.eventservice": {
                "com.iplanet.am.event.connection.delay.between.retries": {
                  "inherited": true,
                  "value": "3000"
                },
                "com.iplanet.am.event.connection.ldap.error.codes.retries": {
                  "inherited": true,
                  "value": "80,81,91"
                },
                "com.iplanet.am.event.connection.num.retries": {
                  "inherited": true,
                  "value": "3"
                },
                "com.sun.am.event.connection.disable.list": {
                  "inherited": true,
                  "value": "aci,um,sm"
                }
              },
              "amconfig.header.ldapconnection": {
                "com.iplanet.am.ldap.connection.delay.between.retries": {
                  "inherited": true,
                  "value": "1000"
                },
                "com.iplanet.am.ldap.connection.ldap.error.codes.retries": {
                  "inherited": true,
                  "value": "80,81,91"
                },
                "com.iplanet.am.ldap.connection.num.retries": {
                  "inherited": true,
                  "value": "3"
                }
              },
              "amconfig.header.sdktimetoliveconfig": {
                "com.iplanet.am.sdk.cache.entry.default.expire.time": {
                  "inherited": true,
                  "value": "30"
                },
                "com.iplanet.am.sdk.cache.entry.expire.enabled": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.am.sdk.cache.entry.user.expire.time": {
                  "inherited": true,
                  "value": "15"
                }
              }
            },
            "security": {
              "_id": "04/properties/security",
              "amconfig.header.cookie": {
                "com.iplanet.am.cookie.encode": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.am.cookie.name": {
                  "inherited": true,
                  "value": "iPlanetDirectoryPro"
                },
                "com.iplanet.am.cookie.secure": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.crlcache": {
                "com.sun.identity.crl.cache.directory.host": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.mtlsenabled": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.crl.cache.directory.password": {
                  "inherited": true,
                  "value": null
                },
                "com.sun.identity.crl.cache.directory.port": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.searchattr": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.searchlocs": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.crl.cache.directory.ssl": {
                  "inherited": true,
                  "value": false
                },
                "com.sun.identity.crl.cache.directory.user": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.header.deserialisationwhitelist": {
                "openam.deserialisation.classes.whitelist": {
                  "inherited": true,
                  "value": "com.iplanet.dpro.session.DNOrIPAddressListTokenRestriction,com.sun.identity.common.CaseInsensitiveHashMap,com.sun.identity.common.CaseInsensitiveHashSet,com.sun.identity.common.CaseInsensitiveKey,com.sun.identity.console.base.model.SMSubConfig,com.sun.identity.console.session.model.SMSessionData,com.sun.identity.console.user.model.UMUserPasswordResetOptionsData,com.sun.identity.shared.datastruct.OrderedSet,com.sun.xml.bind.util.ListImpl,com.sun.xml.bind.util.ProxyListImpl,java.lang.Boolean,java.lang.Integer,java.lang.Number,java.lang.StringBuffer,java.net.InetAddress,java.security.cert.Certificate,java.security.cert.Certificate$CertificateRep,java.util.ArrayList,java.util.Collections$EmptyMap,java.util.Collections$EmptySet,java.util.Collections$SingletonList,java.util.HashMap,java.util.HashSet,java.util.LinkedHashSet,java.util.Locale,org.forgerock.openam.authentication.service.protocol.RemoteCookie,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteHttpServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteServletRequest,org.forgerock.openam.authentication.service.protocol.RemoteServletResponse,org.forgerock.openam.authentication.service.protocol.RemoteSession,org.forgerock.openam.dpro.session.NoOpTokenRestriction,org.forgerock.openam.dpro.session.ProofOfPossessionTokenRestriction"
                }
              },
              "amconfig.header.encryption": {
                "am.encryption.pwd": {
                  "inherited": true,
                  "value": "@AM_ENC_PWD@"
                },
                "am.encryption.secret.alias": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.enabled": {
                  "inherited": true,
                  "value": false
                },
                "am.encryption.secret.keyPass": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystoreFile": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystorePass": {
                  "inherited": true,
                  "value": null
                },
                "am.encryption.secret.keystoreType": {
                  "inherited": true,
                  "value": "JCEKS"
                },
                "com.iplanet.security.SecureRandomFactoryImpl": {
                  "inherited": true,
                  "value": "com.iplanet.am.util.SecureRandomFactoryImpl"
                },
                "com.iplanet.security.encryptor": {
                  "inherited": true,
                  "value": "com.iplanet.services.util.JCEEncryption"
                }
              },
              "amconfig.header.ocsp.check": {
                "com.sun.identity.authentication.ocsp.responder.nickname": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.authentication.ocsp.responder.url": {
                  "inherited": true,
                  "value": ""
                },
                "com.sun.identity.authentication.ocspCheck": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.securitykey": {
                "com.sun.identity.saml.xmlsig.certalias": {
                  "inherited": true,
                  "value": "test"
                },
                "com.sun.identity.saml.xmlsig.keypass": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/secrets/default/.keypass"
                },
                "com.sun.identity.saml.xmlsig.keystore": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/keystores/keystore.jceks"
                },
                "com.sun.identity.saml.xmlsig.storepass": {
                  "inherited": true,
                  "value": "%BASE_DIR%/security/secrets/default/.storepass"
                },
                "com.sun.identity.saml.xmlsig.storetype": {
                  "inherited": true,
                  "value": "JCEKS"
                }
              },
              "amconfig.header.validation": {
                "com.iplanet.am.clientIPCheckEnabled": {
                  "inherited": true,
                  "value": false
                },
                "com.iplanet.services.comm.server.pllrequest.maxContentLength": {
                  "inherited": true,
                  "value": "16384"
                }
              }
            },
            "session": {
              "_id": "04/properties/session",
              "amconfig.header.sessionlogging": {
                "com.iplanet.am.stats.interval": {
                  "inherited": true,
                  "value": "60"
                },
                "com.iplanet.services.stats.directory": {
                  "inherited": true,
                  "value": "%BASE_DIR%/var/stats"
                },
                "com.iplanet.services.stats.state": {
                  "inherited": true,
                  "value": "file"
                },
                "com.sun.am.session.enableHostLookUp": {
                  "inherited": true,
                  "value": false
                }
              },
              "amconfig.header.sessionnotification": {
                "com.iplanet.am.notification.threadpool.size": {
                  "inherited": true,
                  "value": "10"
                },
                "com.iplanet.am.notification.threadpool.threshold": {
                  "inherited": true,
                  "value": "5000"
                }
              },
              "amconfig.header.sessionthresholds": {
                "com.iplanet.am.session.invalidsessionmaxtime": {
                  "inherited": true,
                  "value": "3"
                },
                "org.forgerock.openam.session.service.access.persistence.caching.maxsize": {
                  "inherited": true,
                  "value": "5000"
                }
              },
              "amconfig.header.sessionvalidation": {
                "com.sun.am.session.caseInsensitiveDN": {
                  "inherited": true,
                  "value": true
                }
              }
            },
            "uma": {
              "_id": "04/properties/uma",
              "amconfig.org.forgerock.services.resourcesets.store.common.section": {
                "org.forgerock.services.resourcesets.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.resourcesets.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.resourcesets.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.resourcesets.store.external.section": {
                "org.forgerock.services.resourcesets.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.resourcesets.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.resourcesets.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.resourcesets.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.labels.store.common.section": {
                "org.forgerock.services.uma.labels.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.uma.labels.store.max.connections": {
                  "inherited": true,
                  "value": "2"
                },
                "org.forgerock.services.uma.labels.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.labels.store.external.section": {
                "org.forgerock.services.uma.labels.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.labels.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.uma.labels.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.labels.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.pendingrequests.store.common.section": {
                "org.forgerock.services.uma.pendingrequests.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.uma.pendingrequests.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.pendingrequests.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.uma.pendingrequests.store.external.section": {
                "org.forgerock.services.uma.pendingrequests.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.uma.pendingrequests.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.uma.pendingrequests.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.uma.pendingrequests.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.umaaudit.store.common.section": {
                "org.forgerock.services.umaaudit.store.location": {
                  "inherited": true,
                  "value": "default"
                },
                "org.forgerock.services.umaaudit.store.max.connections": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.umaaudit.store.root.suffix": {
                  "inherited": true,
                  "value": ""
                }
              },
              "amconfig.org.forgerock.services.umaaudit.store.external.section": {
                "org.forgerock.services.umaaudit.store.directory.name": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.heartbeat": {
                  "inherited": true,
                  "value": "10"
                },
                "org.forgerock.services.umaaudit.store.loginid": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.mtls.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.password": {
                  "inherited": true,
                  "value": null
                },
                "org.forgerock.services.umaaudit.store.ssl.enabled": {
                  "inherited": true,
                  "value": ""
                },
                "org.forgerock.services.umaaudit.store.starttls.enabled": {
                  "inherited": true,
                  "value": ""
                }
              }
            }
          },
          "siteName": null,
          "url": "http://localhost:8082/am"
        }
      }
    },
    "serverInformation": {
      "*": {
        "_id": "*",
        "cookieName": "iPlanetDirectoryPro",
        "domains": [
          null
        ],
        "fileBasedConfiguration": false,
        "forgotPassword": "false",
        "forgotUsername": "false",
        "kbaEnabled": "false",
        "lang": "en-US",
        "protectedUserAttributes": [
          "telephoneNumber",
          "mail"
        ],
        "realm": "/",
        "referralsEnabled": "false",
        "secureCookie": false,
        "selfRegistration": "false",
        "socialImplementations": [],
        "successfulUserRegistrationDestination": "default",
        "userIdAttributes": [],
        "xuiUserSessionValidationEnabled": true,
        "zeroPageLogin": {
          "allowedWithoutReferer": true,
          "enabled": false,
          "refererWhitelist": []
        }
      }
    },
    "serverVersion": {
      "version": {
        "_id": "version",
        "date": "2024-March-28 16:00",
        "fullVersion": "ForgeRock Access Management 7.5.0 Build 89116d59a1ebe73ed1931dd3649adb7f217cd06b (2024-March-28 16:00)",
        "revision": "89116d59a1ebe73ed1931dd3649adb7f217cd06b",
        "version": "7.5.0"
      }
    },
    "service": {
      "ConfigurationVersionService": {
        "_id": "",
        "_type": {
          "_id": "ConfigurationVersionService",
          "collection": false,
          "name": "Configuration Version Service"
        },
        "appliedRuleIds": [
          "AME-23273",
          "AME-21032",
          "AME-21768"
        ],
        "configurationVersion": "8.0.0.0",
        "location": "global",
        "nextDescendents": []
      },
      "CorsService": {
        "_id": "",
        "_type": {
          "_id": "CorsService",
          "collection": false,
          "name": "CORS Service"
        },
        "enabled": true,
        "location": "global",
        "nextDescendents": []
      },
      "DataStoreService": {
        "_id": "",
        "_type": {
          "_id": "DataStoreService",
          "collection": false,
          "name": "External Data Stores"
        },
        "defaults": {
          "applicationDataStoreId": "fd270e31-1788-4193-8734-eb2d500c47f3",
          "policyDataStoreId": "fd270e31-1788-4193-8734-eb2d500c47f3"
        },
        "location": "global",
        "nextDescendents": []
      },
      "GoogleCloudServiceAccountService": {
        "_id": "",
        "_type": {
          "_id": "GoogleCloudServiceAccountService",
          "collection": false,
          "name": "Google Cloud Platform Service Accounts"
        },
        "enabled": true,
        "location": "global",
        "nextDescendents": [
          {
            "_id": "default",
            "_type": {
              "_id": "serviceAccounts",
              "collection": true,
              "name": "GCP Service Account"
            },
            "allowedRealms": [
              "*"
            ],
            "allowedSecretNamePatterns": [
              "*"
            ],
            "disallowedSecretNamePatterns": []
          }
        ]
      },
      "IdentityAssertionService": {
        "_id": "",
        "_type": {
          "_id": "IdentityAssertionService",
          "collection": false,
          "name": "Identity Assertion Service"
        },
        "cacheDuration": 120,
        "defaults": {
          "cacheDuration": 120,
          "enable": true
        },
        "enable": true,
        "location": "global",
        "nextDescendents": []
      },
      "RadiusServerService": {
        "_id": "",
        "_type": {
          "_id": "RadiusServerService",
          "collection": false,
          "name": "RADIUS Server"
        },
        "location": "global",
        "nextDescendents": [],
        "radiusListenerEnabled": "NO",
        "radiusServerPort": 1812,
        "radiusThreadPoolCoreSize": 1,
        "radiusThreadPoolKeepaliveSeconds": 10,
        "radiusThreadPoolMaxSize": 10,
        "radiusThreadPoolQueueSize": 20
      },
      "RemoteConsentService": {
        "_id": "",
        "_type": {
          "_id": "RemoteConsentService",
          "collection": false,
          "name": "Remote Consent Service"
        },
        "defaults": {
          "consentResponseTimeLimit": 2,
          "jwkStoreCacheMissCacheTime": 1,
          "jwkStoreCacheTimeout": 5
        },
        "location": "global",
        "nextDescendents": []
      },
      "SocialIdentityProviders": {
        "_id": "",
        "_type": {
          "_id": "SocialIdentityProviders",
          "collection": false,
          "name": "Social Identity Provider Service"
        },
        "defaults": {
          "enabled": true
        },
        "location": "global",
        "nextDescendents": []
      },
      "amSessionPropertyWhitelist": {
        "_id": "",
        "_type": {
          "_id": "amSessionPropertyWhitelist",
          "collection": false,
          "name": "Session Property Whitelist Service"
        },
        "defaults": {
          "sessionPropertyWhitelist": [
            "AMCtxId"
          ],
          "whitelistedQueryProperties": []
        },
        "location": "global",
        "nextDescendents": []
      },
      "androidKeyAttestation": {
        "_id": "",
        "_type": {
          "_id": "androidKeyAttestation",
          "collection": false,
          "name": "Android Key Attestation"
        },
        "cacheDuration": 24,
        "defaults": {
          "crlUrl": "https://android.googleapis.com/attestation/status"
        },
        "location": "global",
        "nextDescendents": []
      },
      "audit": {
        "_id": "",
        "_type": {
          "_id": "audit",
          "collection": false,
          "name": "Audit Logging"
        },
        "auditEnabled": true,
        "blacklistFieldFilters": [],
        "defaults": {
          "auditEnabled": true,
          "blacklistFieldFilters": [],
          "whitelistFieldFilters": []
        },
        "location": "global",
        "nextDescendents": [
          {
            "_id": "Global JSON Handler",
            "_type": {
              "_id": "JSON",
              "collection": true,
              "name": "JSON"
            },
            "commonHandler": {
              "enabled": true,
              "topics": [
                "access",
                "activity",
                "config",
                "authentication"
              ]
            },
            "commonHandlerPlugin": {
              "handlerFactory": "org.forgerock.openam.audit.events.handlers.JsonAuditEventHandlerFactory"
            },
            "jsonBuffering": {
              "bufferingMaxSize": "100000",
              "bufferingWriteInterval": "5"
            },
            "jsonConfig": {
              "elasticsearchCompatible": false,
              "location": "%BASE_DIR%/var/audit/",
              "rotationRetentionCheckInterval": "5"
            },
            "jsonFileRetention": {
              "retentionMaxDiskSpaceToUse": "-1",
              "retentionMaxNumberOfHistoryFiles": "1",
              "retentionMinFreeSpaceRequired": "-1"
            },
            "jsonFileRotation": {
              "rotationEnabled": true,
              "rotationFileSuffix": "-yyyy.MM.dd-HH.mm.ss",
              "rotationInterval": "-1",
              "rotationMaxFileSize": "100000000",
              "rotationTimes": []
            }
          }
        ],
        "whitelistFieldFilters": []
      },
      "authenticatorOathService": {
        "_id": "",
        "_type": {
          "_id": "authenticatorOathService",
          "collection": false,
          "name": "ForgeRock Authenticator (OATH) Service"
        },
        "defaults": {
          "authenticatorOATHDeviceSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "authenticatorOATHDeviceSettingsEncryptionKeystoreKeyPairAlias": "pushDeviceProfiles",
          "authenticatorOATHDeviceSettingsEncryptionKeystorePassword": null,
          "authenticatorOATHDeviceSettingsEncryptionKeystoreType": "JKS",
          "authenticatorOATHDeviceSettingsEncryptionScheme": "NONE",
          "authenticatorOATHSkippableName": "oath2faEnabled",
          "oathAttrName": "oathDeviceProfiles"
        },
        "location": "global",
        "nextDescendents": []
      },
      "authenticatorPushService": {
        "_id": "",
        "_type": {
          "_id": "authenticatorPushService",
          "collection": false,
          "name": "ForgeRock Authenticator (Push) Service"
        },
        "defaults": {
          "authenticatorPushDeviceSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "authenticatorPushDeviceSettingsEncryptionKeystorePassword": null,
          "authenticatorPushDeviceSettingsEncryptionKeystoreType": "JKS",
          "authenticatorPushDeviceSettingsEncryptionScheme": "NONE",
          "authenticatorPushSkippableName": "push2faEnabled",
          "pushAttrName": "pushDeviceProfiles"
        },
        "location": "global",
        "nextDescendents": []
      },
      "authenticatorWebAuthnService": {
        "_id": "",
        "_type": {
          "_id": "authenticatorWebAuthnService",
          "collection": false,
          "name": "WebAuthn Profile Encryption Service"
        },
        "defaults": {
          "authenticatorWebAuthnDeviceSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jceks",
          "authenticatorWebAuthnDeviceSettingsEncryptionKeystorePassword": null,
          "authenticatorWebAuthnDeviceSettingsEncryptionKeystoreType": "JCEKS",
          "authenticatorWebAuthnDeviceSettingsEncryptionScheme": "NONE",
          "webauthnAttrName": "webauthnDeviceProfiles"
        },
        "location": "global",
        "nextDescendents": []
      },
      "baseurl": {
        "_id": "",
        "_type": {
          "_id": "baseurl",
          "collection": false,
          "name": "Base URL Source"
        },
        "defaults": {
          "contextPath": "/am",
          "source": "REQUEST_VALUES"
        },
        "location": "global",
        "nextDescendents": []
      },
      "dashboard": {
        "_id": "",
        "_type": {
          "_id": "dashboard",
          "collection": false,
          "name": "Dashboard"
        },
        "defaults": {
          "assignedDashboard": []
        },
        "location": "global",
        "nextDescendents": [
          {
            "_id": "Google",
            "_type": {
              "_id": "instances",
              "collection": true,
              "name": "instance"
            },
            "className": "SAML2ApplicationClass",
            "displayName": "Google",
            "icfIdentifier": "idm magic 34",
            "icon": "images/logos/googleplus.png",
            "login": "http://www.google.com",
            "name": "Google"
          },
          {
            "_id": "SalesForce",
            "_type": {
              "_id": "instances",
              "collection": true,
              "name": "instance"
            },
            "className": "SAML2ApplicationClass",
            "displayName": "SalesForce",
            "icfIdentifier": "idm magic 12",
            "icon": "images/logos/salesforce.png",
            "login": "http://www.salesforce.com",
            "name": "SalesForce"
          },
          {
            "_id": "ZenDesk",
            "_type": {
              "_id": "instances",
              "collection": true,
              "name": "instance"
            },
            "className": "SAML2ApplicationClass",
            "displayName": "ZenDesk",
            "icfIdentifier": "idm magic 56",
            "icon": "images/logos/zendesk.png",
            "login": "http://www.ZenDesk.com",
            "name": "ZenDesk"
          }
        ]
      },
      "deviceBindingService": {
        "_id": "",
        "_type": {
          "_id": "deviceBindingService",
          "collection": false,
          "name": "Device Binding Service"
        },
        "defaults": {
          "deviceBindingAttrName": "boundDevices",
          "deviceBindingSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "deviceBindingSettingsEncryptionKeystorePassword": null,
          "deviceBindingSettingsEncryptionKeystoreType": "JKS",
          "deviceBindingSettingsEncryptionScheme": "NONE"
        },
        "location": "global",
        "nextDescendents": []
      },
      "deviceIdService": {
        "_id": "",
        "_type": {
          "_id": "deviceIdService",
          "collection": false,
          "name": "Device ID Service"
        },
        "defaults": {
          "deviceIdAttrName": "devicePrintProfiles",
          "deviceIdSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "deviceIdSettingsEncryptionKeystorePassword": null,
          "deviceIdSettingsEncryptionKeystoreType": "JKS",
          "deviceIdSettingsEncryptionScheme": "NONE"
        },
        "location": "global",
        "nextDescendents": []
      },
      "deviceProfilesService": {
        "_id": "",
        "_type": {
          "_id": "deviceProfilesService",
          "collection": false,
          "name": "Device Profiles Service"
        },
        "defaults": {
          "deviceProfilesAttrName": "deviceProfiles",
          "deviceProfilesSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "deviceProfilesSettingsEncryptionKeystorePassword": null,
          "deviceProfilesSettingsEncryptionKeystoreType": "JKS",
          "deviceProfilesSettingsEncryptionScheme": "NONE"
        },
        "location": "global",
        "nextDescendents": []
      },
      "email": {
        "_id": "",
        "_type": {
          "_id": "email",
          "collection": false,
          "name": "Email Service"
        },
        "defaults": {
          "emailAddressAttribute": "mail",
          "emailImplClassName": "org.forgerock.openam.services.email.MailServerImpl",
          "emailRateLimitSeconds": 1,
          "port": 465,
          "sslState": "SSL"
        },
        "location": "global",
        "nextDescendents": []
      },
      "federation/common": {
        "_id": "",
        "_type": {
          "_id": "federation/common",
          "collection": false,
          "name": "Common Federation Configuration"
        },
        "algorithms": {
          "DigestAlgorithm": "http://www.w3.org/2001/04/xmlenc#sha256",
          "QuerySignatureAlgorithmDSA": "http://www.w3.org/2009/xmldsig11#dsa-sha256",
          "QuerySignatureAlgorithmEC": "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512",
          "QuerySignatureAlgorithmRSA": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
          "aesKeyWrapAlgorithm": "http://www.w3.org/2001/04/xmlenc#kw-aes256",
          "canonicalizationAlgorithm": "http://www.w3.org/2001/10/xml-exc-c14n#",
          "maskGenerationFunction": "http://www.w3.org/2009/xmlenc11#mgf1sha256",
          "rsaKeyTransportAlgorithm": "http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p",
          "signatureAlgorithm": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
          "transformationAlgorithm": "http://www.w3.org/2001/10/xml-exc-c14n#"
        },
        "generalConfig": {
          "certificateChecking": "on",
          "maxContentLength": 20480,
          "samlErrorPageHttpBinding": "HTTP-POST",
          "samlErrorPageUrl": "/saml2/jsp/saml2error.jsp"
        },
        "implementationClasses": {
          "configurationClass": "com.sun.identity.plugin.configuration.impl.ConfigurationInstanceImpl",
          "datastoreClass": "com.sun.identity.plugin.datastore.impl.IdRepoDataStoreProvider",
          "keyProviderClass": "com.sun.identity.saml.xmlsig.JKSKeyProvider",
          "loggerClass": "com.sun.identity.plugin.log.impl.LogProvider",
          "passwordDecoderClass": "com.sun.identity.saml.xmlsig.FMPasswordDecoder",
          "rootUrlProviderClass": "org.forgerock.openam.federation.plugin.rooturl.impl.FmRootUrlProvider",
          "sessionProviderClass": "com.sun.identity.plugin.session.impl.FMSessionProvider",
          "signatureProviderClass": "com.sun.identity.saml.xmlsig.AMSignatureProvider"
        },
        "location": "global",
        "montoring": {
          "monitoringAgentClass": "com.sun.identity.plugin.monitoring.impl.AgentProvider",
          "monitoringSaml2Class": "com.sun.identity.plugin.monitoring.impl.FedMonSAML2SvcProvider"
        },
        "nextDescendents": []
      },
      "federation/multi": {
        "_id": "",
        "_type": {
          "_id": "federation/multi",
          "collection": false,
          "name": "Multi-Federation Protocol"
        },
        "location": "global",
        "nextDescendents": [],
        "singleLogoutHandlerList": [
          "key=WSFED|class=com.sun.identity.multiprotocol.WSFederationSingleLogoutHandler",
          "key=SAML2|class=com.sun.identity.multiprotocol.SAML2SingleLogoutHandler"
        ]
      },
      "federation/saml2soapbinding": {
        "_id": "",
        "_type": {
          "_id": "federation/saml2soapbinding",
          "collection": false,
          "name": "SAML v2.0 SOAP Binding"
        },
        "location": "global",
        "nextDescendents": [],
        "requestHandlers": []
      },
      "globalization": {
        "_id": "",
        "_type": {
          "_id": "globalization",
          "collection": false,
          "name": "Globalization Settings"
        },
        "charsetMappings": [
          "locale=zh|charset=UTF-8;GB2312",
          "locale=ar|charset=UTF-8;ISO-8859-6",
          "locale=es|charset=UTF-8;ISO-8859-15",
          "locale=de|charset=UTF-8;ISO-8859-15",
          "locale=zh_TW|charset=UTF-8;BIG5",
          "locale=fr|charset=UTF-8;ISO-8859-15",
          "locale=ko|charset=UTF-8;EUC-KR",
          "locale=en|charset=UTF-8;ISO-8859-1",
          "locale=th|charset=UTF-8;TIS-620",
          "locale=ja|charset=UTF-8;Shift_JIS;EUC-JP"
        ],
        "defaults": {
          "commonNameFormats": [
            "zh={sn}{givenname}"
          ]
        },
        "location": "global",
        "nextDescendents": [],
        "sun-identity-g11n-settings-charset-alias-mapping": [
          "mimeName=EUC-KR|javaName=EUC_KR",
          "mimeName=EUC-JP|javaName=EUC_JP",
          "mimeName=Shift_JIS|javaName=SJIS"
        ]
      },
      "id-repositories": {
        "_id": "",
        "_type": {
          "_id": "id-repositories",
          "collection": false,
          "name": "sunIdentityRepositoryService"
        },
        "defaults": {
          "sunIdRepoAttributeCombiner": "com.iplanet.am.sdk.AttributeCombiner",
          "sunIdRepoAttributeValidator": [
            "class=com.sun.identity.idm.server.IdRepoAttributeValidatorImpl",
            "minimumPasswordLength=8",
            "usernameInvalidChars=*|(|)|&|!"
          ]
        },
        "location": "global",
        "nextDescendents": [
          {
            "_id": "agent",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "agentgroup",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "agentonly",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "filteredrole",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "group",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "realm",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "role",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "user",
            "_type": {
              "_id": "SupportedIdentities",
              "collection": true,
              "name": "SupportedIdentities"
            }
          },
          {
            "_id": "amAdmin",
            "_type": {
              "_id": "user",
              "collection": true,
              "name": "User"
            },
            "cn": "amAdmin",
            "dn": "uid=amAdmin,ou=people,",
            "givenName": "amAdmin",
            "inetUserStatus": "Active",
            "iplanet-am-user-auth-config": "[Empty]",
            "roles": [],
            "sn": "amAdmin",
            "userPassword": null
          },
          {
            "_id": "anonymous",
            "_type": {
              "_id": "user",
              "collection": true,
              "name": "User"
            },
            "cn": "anonymous",
            "dn": "uid=anonymous,ou=people,",
            "givenName": "anonymous",
            "inetUserStatus": "Inactive",
            "iplanet-am-user-auth-config": "[Empty]",
            "roles": [],
            "sn": "anonymous",
            "userPassword": null
          },
          {
            "_id": "dsameuser",
            "_type": {
              "_id": "user",
              "collection": true,
              "name": "User"
            },
            "dn": "cn=dsameuser,ou=DSAME Users,",
            "inetUserStatus": "Active",
            "iplanet-am-user-auth-config": "[Empty]",
            "roles": [],
            "userPassword": null
          }
        ]
      },
      "idm-integration": {
        "_id": "",
        "_type": {
          "_id": "idm-integration",
          "collection": false,
          "name": "IDM Provisioning"
        },
        "configurationCacheDuration": 0,
        "enabled": false,
        "idmProvisioningClient": "idm-provisioning",
        "jwtSigningCompatibilityMode": false,
        "location": "global",
        "nextDescendents": [],
        "provisioningClientScopes": [
          "fr:idm:*"
        ],
        "useInternalOAuth2Provider": false
      },
      "iot": {
        "_id": "",
        "_type": {
          "_id": "iot",
          "collection": false,
          "name": "IoT Service"
        },
        "defaults": {
          "attributeAllowlist": [
            "thingConfig"
          ],
          "createOAuthClient": false,
          "createOAuthJwtIssuer": false,
          "oauthClientName": "forgerock-iot-oauth2-client",
          "oauthJwtIssuerName": "forgerock-iot-jwt-issuer"
        },
        "location": "global",
        "nextDescendents": []
      },
      "logging": {
        "_id": "",
        "_type": {
          "_id": "logging",
          "collection": false,
          "name": "Logging"
        },
        "database": {
          "databaseFailureMemoryBufferSize": 2,
          "driver": "oracle.jdbc.driver.OracleDriver",
          "maxRecords": 500,
          "user": "dbuser"
        },
        "file": {
          "location": "%BASE_DIR%/var/audit/",
          "maxFileSize": 100000000,
          "numberHistoryFiles": 1,
          "rotationEnabled": true,
          "rotationInterval": -1,
          "suffix": "-MM.dd.yy-kk.mm"
        },
        "general": {
          "bufferSize": 25,
          "bufferTime": 60,
          "buffering": "ON",
          "certificateStore": "%BASE_DIR%/var/audit/Logger.jks",
          "fields": [
            "IPAddr",
            "LoggedBy",
            "LoginID",
            "NameID",
            "ModuleName",
            "ContextID",
            "Domain",
            "LogLevel",
            "HostName",
            "MessageID"
          ],
          "filesPerKeystore": 5,
          "jdkLoggingLevel": "INFO",
          "security": "OFF",
          "signaturePeriod": 900,
          "signingAlgorithm": "SHA1withRSA",
          "status": "INACTIVE",
          "type": "File",
          "verifyPeriod": 3600
        },
        "location": "global",
        "nextDescendents": [],
        "resolveHostName": false,
        "syslog": {
          "facility": "local5",
          "host": "localhost",
          "port": 514,
          "protocol": "UDP",
          "timeout": 30
        }
      },
      "monitoring": {
        "_id": "",
        "_type": {
          "_id": "monitoring",
          "collection": false,
          "name": "Monitoring"
        },
        "authfilePath": "%BASE_DIR%/security/openam_mon_auth",
        "enabled": true,
        "httpEnabled": false,
        "httpPort": 8082,
        "location": "global",
        "nextDescendents": [
          {
            "_id": "crest",
            "_type": {
              "_id": "crest",
              "collection": true,
              "name": "CREST Reporter"
            },
            "enabled": false
          },
          {
            "_id": "prometheus",
            "_type": {
              "_id": "prometheus",
              "collection": true,
              "name": "Prometheus Reporter"
            },
            "authenticationType": "BASIC",
            "enabled": false,
            "password": null,
            "username": "prometheus"
          }
        ],
        "policyHistoryWindowSize": 10000,
        "rmiEnabled": false,
        "rmiPort": 9999,
        "sessionHistoryWindowSize": 10000,
        "snmpEnabled": false,
        "snmpPort": 8085
      },
      "naming": {
        "_id": "",
        "_type": {
          "_id": "naming",
          "collection": false,
          "name": "Naming"
        },
        "endpointConfig": {
          "jaxwsUrl": "%protocol://%host:%port%uri/identityservices/",
          "stsMexUrl": "%protocol://%host:%port%uri/sts/mex",
          "stsUrl": "%protocol://%host:%port%uri/sts"
        },
        "federationConfig": {
          "jaxrpcUrl": "%protocol://%host:%port%uri/jaxrpc/",
          "samlAssertionManagerUrl": "%protocol://%host:%port%uri/AssertionManagerServlet/AssertionManagerIF",
          "samlAwareServletUrl": "%protocol://%host:%port%uri/SAMLAwareServlet",
          "samlPostServletUrl": "%protocol://%host:%port%uri/SAMLPOSTProfileServlet",
          "samlSoapReceiverUrl": "%protocol://%host:%port%uri/SAMLSOAPReceiver"
        },
        "generalConfig": {
          "authUrl": "%protocol://%host:%port%uri/authservice",
          "loggingUrl": "%protocol://%host:%port%uri/loggingservice",
          "policyUrl": "%protocol://%host:%port%uri/policyservice",
          "profileUrl": "%protocol://%host:%port%uri/profileservice",
          "sessionUrl": "%protocol://%host:%port%uri/sessionservice"
        },
        "location": "global",
        "nextDescendents": []
      },
      "oauth-oidc": {
        "_id": "",
        "_type": {
          "_id": "oauth-oidc",
          "collection": false,
          "name": "OAuth2 Provider"
        },
        "allowUnauthorisedAccessToUserCodeForm": false,
        "blacklistCacheSize": 10000,
        "blacklistPollInterval": 60,
        "blacklistPurgeDelay": 1,
        "defaults": {
          "advancedOAuth2Config": {
            "allowClientCredentialsInTokenRequestQueryParameters": false,
            "allowedAudienceValues": [],
            "authenticationAttributes": [
              "uid"
            ],
            "codeVerifierEnforced": "false",
            "defaultScopes": [],
            "displayNameAttribute": "cn",
            "expClaimRequiredInRequestObject": false,
            "grantTypes": [
              "implicit",
              "urn:ietf:params:oauth:grant-type:saml2-bearer",
              "refresh_token",
              "password",
              "client_credentials",
              "urn:ietf:params:oauth:grant-type:device_code",
              "authorization_code",
              "urn:openid:params:grant-type:ciba",
              "urn:ietf:params:oauth:grant-type:uma-ticket",
              "urn:ietf:params:oauth:grant-type:token-exchange",
              "urn:ietf:params:oauth:grant-type:jwt-bearer"
            ],
            "hashSalt": "changeme",
            "includeSubnameInTokenClaims": true,
            "macaroonTokenFormat": "V2",
            "maxAgeOfRequestObjectNbfClaim": 0,
            "maxDifferenceBetweenRequestObjectNbfAndExp": 0,
            "moduleMessageEnabledInPasswordGrant": false,
            "nbfClaimRequiredInRequestObject": false,
            "parRequestUriLifetime": 90,
            "persistentClaims": [],
            "refreshTokenGracePeriod": 0,
            "requestObjectProcessing": "OIDC",
            "requirePushedAuthorizationRequests": false,
            "responseTypeClasses": [
              "code|org.forgerock.oauth2.core.AuthorizationCodeResponseTypeHandler",
              "id_token|org.forgerock.openidconnect.IdTokenResponseTypeHandler",
              "token|org.forgerock.oauth2.core.TokenResponseTypeHandler"
            ],
            "supportedScopes": [],
            "supportedSubjectTypes": [
              "public",
              "pairwise"
            ],
            "tlsCertificateBoundAccessTokensEnabled": true,
            "tlsCertificateRevocationCheckingEnabled": false,
            "tlsClientCertificateHeaderFormat": "URLENCODED_PEM",
            "tokenCompressionEnabled": false,
            "tokenEncryptionEnabled": false,
            "tokenExchangeClasses": [
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToAccessTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToAccessTokenExchanger"
            ],
            "tokenSigningAlgorithm": "HS256",
            "tokenValidatorClasses": [
              "urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.OidcIdTokenValidator",
              "urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.OAuth2AccessTokenValidator"
            ]
          },
          "advancedOIDCConfig": {
            "alwaysAddClaimsToToken": false,
            "amrMappings": {},
            "authorisedIdmDelegationClients": [],
            "authorisedOpenIdConnectSSOClients": [],
            "claimsParameterSupported": false,
            "defaultACR": [],
            "idTokenInfoClientAuthenticationEnabled": true,
            "includeAllKtyAlgCombinationsInJwksUri": false,
            "loaMapping": {},
            "storeOpsTokens": true,
            "supportedAuthorizationResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedAuthorizationResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedAuthorizationResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRequestParameterEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRequestParameterEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRequestParameterSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenEndpointAuthenticationSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenIntrospectionResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedTokenIntrospectionResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedTokenIntrospectionResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedUserInfoEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedUserInfoEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedUserInfoSigningAlgorithms": [
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512"
            ],
            "useForceAuthnForMaxAge": false,
            "useForceAuthnForPromptLogin": false
          },
          "cibaConfig": {
            "cibaAuthReqIdLifetime": 600,
            "cibaMinimumPollingInterval": 2,
            "supportedCibaSigningAlgorithms": [
              "ES256",
              "PS256"
            ]
          },
          "clientDynamicRegistrationConfig": {
            "allowDynamicRegistration": false,
            "dynamicClientRegistrationScope": "dynamic_client_registration",
            "dynamicClientRegistrationSoftwareStatementRequired": false,
            "generateRegistrationAccessTokens": true,
            "requiredSoftwareStatementAttestedAttributes": [
              "redirect_uris"
            ]
          },
          "consent": {
            "clientsCanSkipConsent": false,
            "enableRemoteConsent": false,
            "supportedRcsRequestEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsRequestEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsRequestSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRcsResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsResponseEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsResponseSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "coreOAuth2Config": {
            "accessTokenLifetime": 3600,
            "accessTokenMayActScript": "[Empty]",
            "codeLifetime": 120,
            "issueRefreshToken": true,
            "issueRefreshTokenOnRefreshedToken": true,
            "macaroonTokensEnabled": false,
            "oidcMayActScript": "[Empty]",
            "refreshTokenLifetime": 604800,
            "scopesPolicySet": "oauth2Scopes",
            "statelessTokensEnabled": false,
            "usePolicyEngineForScope": false
          },
          "coreOIDCConfig": {
            "jwtTokenLifetime": 3600,
            "oidcDiscoveryEndpointEnabled": false,
            "overrideableOIDCClaims": [],
            "supportedClaims": [],
            "supportedIDTokenEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedIDTokenEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedIDTokenSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "deviceCodeConfig": {
            "deviceCodeLifetime": 300,
            "devicePollInterval": 5,
            "deviceUserCodeCharacterSet": "234567ACDEFGHJKLMNPQRSTWXYZabcdefhijkmnopqrstwxyz",
            "deviceUserCodeLength": 8
          },
          "pluginsConfig": {
            "accessTokenEnricherClass": "org.forgerock.oauth2.core.plugins.registry.DefaultAccessTokenEnricher",
            "accessTokenModificationPluginType": "SCRIPTED",
            "accessTokenModificationScript": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
            "authorizeEndpointDataProviderClass": "org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider",
            "authorizeEndpointDataProviderPluginType": "JAVA",
            "authorizeEndpointDataProviderScript": "3f93ef6e-e54a-4393-aba1-f322656db28a",
            "evaluateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator",
            "evaluateScopePluginType": "JAVA",
            "evaluateScopeScript": "da56fe60-8b38-4c46-a405-d6b306d4b336",
            "oidcClaimsPluginType": "SCRIPTED",
            "oidcClaimsScript": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
            "userCodeGeneratorClass": "org.forgerock.oauth2.core.plugins.registry.DefaultUserCodeGenerator",
            "validateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator",
            "validateScopePluginType": "JAVA",
            "validateScopeScript": "25e6c06d-cf70-473b-bd28-26931edc476b"
          }
        },
        "jwtTokenLifetimeValidationEnabled": true,
        "jwtTokenRequiredClaims": [],
        "jwtTokenUnreasonableLifetime": 86400,
        "location": "global",
        "nextDescendents": [],
        "statelessGrantTokenUpgradeCompatibilityMode": false,
        "storageScheme": "CTS_ONE_TO_ONE_MODEL"
      },
      "pingOneWorkerService": {
        "_id": "",
        "_type": {
          "_id": "pingOneWorkerService",
          "collection": false,
          "name": "PingOne Worker Service"
        },
        "defaults": {
          "enabled": true
        },
        "location": "global",
        "nextDescendents": []
      },
      "platform": {
        "_id": "",
        "_type": {
          "_id": "platform",
          "collection": false,
          "name": "Platform"
        },
        "cookieDomains": [],
        "locale": "en_US",
        "location": "global",
        "nextDescendents": []
      },
      "policyconfiguration": {
        "_id": "",
        "_type": {
          "_id": "policyconfiguration",
          "collection": false,
          "name": "Policy Configuration"
        },
        "continueEvaluationOnDeny": false,
        "defaults": {
          "bindDn": "cn=Directory Manager",
          "checkIfResourceTypeExists": true,
          "connectionPoolMaximumSize": 10,
          "connectionPoolMinimumSize": 1,
          "ldapServer": [
            "localhost:50636"
          ],
          "maximumSearchResults": 100,
          "mtlsEnabled": false,
          "policyHeartbeatInterval": 10,
          "policyHeartbeatTimeUnit": "SECONDS",
          "realmSearchFilter": "(objectclass=sunismanagedorganization)",
          "searchTimeout": 5,
          "sslEnabled": true,
          "subjectsResultTTL": 10,
          "userAliasEnabled": false,
          "usersBaseDn": "dc=openam,dc=forgerock,dc=org",
          "usersSearchAttribute": "uid",
          "usersSearchFilter": "(objectclass=inetorgperson)",
          "usersSearchScope": "SCOPE_SUB"
        },
        "location": "global",
        "nextDescendents": [],
        "realmAliasReferrals": false,
        "resourceComparators": [
          "serviceType=iPlanetAMWebAgentService|class=com.sun.identity.policy.plugins.HttpURLResourceName|wildcard=*|oneLevelWildcard=-*-|delimiter=/|caseSensitive=false"
        ]
      },
      "pushNotification": {
        "_id": "",
        "_type": {
          "_id": "pushNotification",
          "collection": false,
          "name": "Push Notification Service"
        },
        "defaults": {
          "delegateFactory": "org.forgerock.openam.services.push.sns.SnsHttpDelegateFactory",
          "mdCacheSize": 10000,
          "mdConcurrency": 16,
          "mdDuration": 120,
          "region": "us-east-1"
        },
        "location": "global",
        "nextDescendents": []
      },
      "rest": {
        "_id": "",
        "_type": {
          "_id": "rest",
          "collection": false,
          "name": "REST APIs"
        },
        "csrfFilterEnabled": true,
        "defaultProtocolVersion": "Latest",
        "defaultVersion": "Latest",
        "descriptionsState": "STATIC",
        "location": "global",
        "nextDescendents": [],
        "warningHeader": true
      },
      "saml2": {
        "_id": "",
        "_type": {
          "_id": "saml2",
          "collection": false,
          "name": "SAML v2.0 Service Configuration"
        },
        "bufferLength": 2048,
        "caCertValidation": false,
        "cacheCleanupInterval": 600,
        "encryptedKeyInKeyInfo": true,
        "idpDiscoveryCookieType": "PERSISTENT",
        "idpDiscoveryUrlSchema": "HTTPS",
        "location": "global",
        "nameIDInfoAttribute": "sun-fm-saml2-nameid-info",
        "nameIDInfoKeyAttribute": "sun-fm-saml2-nameid-infokey",
        "nextDescendents": [],
        "signingCertValidation": false,
        "xmlEncryptionClass": "com.sun.identity.saml2.xmlenc.FMEncProvider",
        "xmlSigningClass": "com.sun.identity.saml2.xmlsig.FMSigProvider"
      },
      "security": {
        "_id": "",
        "_type": {
          "_id": "security",
          "collection": false,
          "name": "Legacy User Self Service"
        },
        "defaults": {
          "confirmationIdHmacKey": "YcGfeuzSM14OG5djEcxEnvPydX28nsuxAZyDX1VA8iY=",
          "forgotPasswordConfirmationUrl": "http://localhost:8080/am/XUI/confirm.html",
          "forgotPasswordEnabled": false,
          "forgotPasswordTokenLifetime": 900,
          "protectedUserAttributes": [],
          "selfRegistrationConfirmationUrl": "http://localhost:8080/am/XUI/confirm.html",
          "selfRegistrationEnabled": false,
          "selfRegistrationTokenLifetime": 900,
          "selfServiceEnabled": false,
          "userRegisteredDestination": "default"
        },
        "location": "global",
        "nextDescendents": []
      },
      "selfService": {
        "_id": "",
        "_type": {
          "_id": "selfService",
          "collection": false,
          "name": "User Self-Service"
        },
        "defaults": {
          "advancedConfig": {
            "forgottenPasswordConfirmationUrl": "http://localhost:8080/am/XUI/?realm=${realm}#passwordReset/",
            "forgottenPasswordServiceConfigClass": "org.forgerock.openam.selfservice.config.flows.ForgottenPasswordConfigProvider",
            "forgottenUsernameServiceConfigClass": "org.forgerock.openam.selfservice.config.flows.ForgottenUsernameConfigProvider",
            "userRegistrationConfirmationUrl": "http://localhost:8080/am/XUI/?realm=${realm}#register/",
            "userRegistrationServiceConfigClass": "org.forgerock.openam.selfservice.config.flows.UserRegistrationConfigProvider"
          },
          "forgottenPassword": {
            "forgottenPasswordCaptchaEnabled": false,
            "forgottenPasswordEmailBody": [
              "en|<h2>Click on this <a href=\"%link%\">link</a> to reset your password.</h2>"
            ],
            "forgottenPasswordEmailSubject": [
              "en|Forgotten password email"
            ],
            "forgottenPasswordEmailVerificationEnabled": true,
            "forgottenPasswordEnabled": false,
            "forgottenPasswordKbaEnabled": false,
            "forgottenPasswordTokenPaddingLength": 450,
            "forgottenPasswordTokenTTL": 300,
            "numberOfAllowedAttempts": 1,
            "numberOfAttemptsEnforced": false
          },
          "forgottenUsername": {
            "forgottenUsernameCaptchaEnabled": false,
            "forgottenUsernameEmailBody": [
              "en|<h2>Your username is <span style=\"color:blue\">%username%</span>.</h2>"
            ],
            "forgottenUsernameEmailSubject": [
              "en|Forgotten username email"
            ],
            "forgottenUsernameEmailUsernameEnabled": true,
            "forgottenUsernameEnabled": false,
            "forgottenUsernameKbaEnabled": false,
            "forgottenUsernameShowUsernameEnabled": false,
            "forgottenUsernameTokenTTL": 300
          },
          "generalConfig": {
            "captchaVerificationUrl": "https://www.google.com/recaptcha/api/siteverify",
            "kbaQuestions": [
              "4|en|What is your mother's maiden name?",
              "3|en|What was the name of your childhood pet?",
              "2|en|What was the model of your first car?",
              "1|en|What is the name of your favourite restaurant?"
            ],
            "minimumAnswersToDefine": 1,
            "minimumAnswersToVerify": 1,
            "validQueryAttributes": [
              "uid",
              "mail",
              "givenName",
              "sn"
            ]
          },
          "profileManagement": {
            "profileAttributeWhitelist": [
              "uid",
              "telephoneNumber",
              "mail",
              "kbaInfo",
              "givenName",
              "sn",
              "cn"
            ],
            "profileProtectedUserAttributes": [
              "telephoneNumber",
              "mail"
            ]
          },
          "userRegistration": {
            "userRegisteredDestination": "default",
            "userRegistrationCaptchaEnabled": false,
            "userRegistrationEmailBody": [
              "en|<h2>Click on this <a href=\"%link%\">link</a> to register.</h2>"
            ],
            "userRegistrationEmailSubject": [
              "en|Registration email"
            ],
            "userRegistrationEmailVerificationEnabled": true,
            "userRegistrationEmailVerificationFirstEnabled": false,
            "userRegistrationEnabled": false,
            "userRegistrationKbaEnabled": false,
            "userRegistrationTokenTTL": 300,
            "userRegistrationValidUserAttributes": [
              "userPassword",
              "mail",
              "givenName",
              "kbaInfo",
              "inetUserStatus",
              "sn",
              "username"
            ]
          }
        },
        "location": "global",
        "nextDescendents": []
      },
      "selfServiceTrees": {
        "_id": "",
        "_type": {
          "_id": "selfServiceTrees",
          "collection": false,
          "name": "Self Service Trees"
        },
        "defaults": {
          "enabled": true,
          "treeMapping": {}
        },
        "location": "global",
        "nextDescendents": []
      },
      "session": {
        "_id": "",
        "_type": {
          "_id": "session",
          "collection": false,
          "name": "Session"
        },
        "dynamic": {
          "maxCachingTime": 3,
          "maxIdleTime": 30,
          "maxSessionTime": 120,
          "quotaLimit": 5
        },
        "general": {
          "crossUpgradeReferenceFlag": false,
          "dnRestrictionOnly": false,
          "latestAccessTimeUpdateFrequency": 60,
          "timeoutHandlers": []
        },
        "location": "global",
        "nextDescendents": [],
        "notifications": {
          "notificationPropertyList": [],
          "propertyChangeNotifications": "OFF"
        },
        "quotas": {
          "behaviourWhenQuotaExhausted": "org.forgerock.openam.session.service.DestroyNextExpiringAction",
          "denyLoginWhenRepoDown": "NO",
          "iplanet-am-session-enable-session-constraint": "OFF",
          "quotaConstraintMaxWaitTime": 6000
        },
        "search": {
          "maxSessionListSize": 120,
          "sessionListRetrievalTimeout": 5
        },
        "stateless": {
          "openam-session-stateless-blacklist-cache-size": 10000,
          "openam-session-stateless-blacklist-poll-interval": 60,
          "openam-session-stateless-blacklist-purge-delay": 1,
          "openam-session-stateless-enable-session-blacklisting": false,
          "openam-session-stateless-logout-poll-interval": 60,
          "statelessCompressionType": "NONE",
          "statelessEncryptionAesKey": null,
          "statelessEncryptionType": "DIRECT",
          "statelessLogoutByUser": false,
          "statelessSigningHmacSecret": null,
          "statelessSigningType": "HS256"
        }
      },
      "socialauthentication": {
        "_id": "",
        "_type": {
          "_id": "socialauthentication",
          "collection": false,
          "name": "Social Authentication Implementations"
        },
        "defaults": {
          "authenticationChains": {},
          "displayNames": {},
          "enabledKeys": [],
          "icons": {}
        },
        "location": "global",
        "nextDescendents": []
      },
      "transaction": {
        "_id": "",
        "_type": {
          "_id": "transaction",
          "collection": false,
          "name": "Transaction Authentication Service"
        },
        "defaults": {
          "timeToLive": "180"
        },
        "location": "global",
        "nextDescendents": []
      },
      "uma": {
        "_id": "",
        "_type": {
          "_id": "uma",
          "collection": false,
          "name": "UMA Provider"
        },
        "defaults": {
          "claimsGathering": {
            "claimsGatheringService": "[Empty]",
            "interactiveClaimsGatheringEnabled": false,
            "pctLifetime": 604800
          },
          "generalSettings": {
            "deletePoliciesOnDeleteRS": true,
            "deleteResourceSetsOnDeleteRS": true,
            "emailRequestingPartyOnPendingRequestApproval": true,
            "emailResourceOwnerOnPendingRequestCreation": true,
            "grantResourceOwnerImplicitConsent": true,
            "grantRptConditions": [
              "REQUEST_PARTIAL",
              "REQUEST_NONE",
              "TICKET_PARTIAL"
            ],
            "pendingRequestsEnabled": true,
            "permissionTicketLifetime": 120,
            "resharingMode": "IMPLICIT",
            "userProfileLocaleAttribute": "inetOrgPerson"
          }
        },
        "location": "global",
        "nextDescendents": [],
        "umaPolicyUpgradeCompatibilityMode": false
      },
      "user": {
        "_id": "",
        "_type": {
          "_id": "user",
          "collection": false,
          "name": "User"
        },
        "dynamic": {
          "defaultUserStatus": "Active"
        },
        "location": "global",
        "nextDescendents": []
      },
      "validation": {
        "_id": "",
        "_type": {
          "_id": "validation",
          "collection": false,
          "name": "Validation Service"
        },
        "defaults": {
          "validGotoDestinations": []
        },
        "location": "global",
        "nextDescendents": [],
        "validGotoDestinations": []
      }
    },
    "site": {
      "testsite": {
        "_id": "testsite",
        "secondaryURLs": [],
        "servers": [
          {
            "id": "03",
            "url": "http://localhost:8081/am"
          }
        ],
        "url": "http://testurl.com:8080"
      }
    },
    "webhookService": {
      "webhooks": {
        "_id": "",
        "_type": {
          "_id": "webhooks",
          "collection": false,
          "name": "Webhook Service"
        }
      }
    }
  },
  "realm": {
    "root": {
      "agent": {
        "Test IG": {
          "_id": "Test IG",
          "_type": {
            "_id": "IdentityGatewayAgent",
            "collection": true,
            "name": "Identity Gateway Agents"
          },
          "agentgroup": null,
          "igCdssoLoginUrlTemplate": null,
          "igCdssoRedirectUrls": [],
          "igTokenIntrospection": "None",
          "secretLabelIdentifier": null,
          "status": "Active",
          "userpassword": null
        },
        "Test SOAP STS": {
          "_id": "Test SOAP STS",
          "_type": {
            "_id": "SoapSTSAgent",
            "collection": true,
            "name": "SOAP STS Agents"
          },
          "agentgroup": null,
          "publishServicePollInterval": 300
        },
        "Test Web": {
          "_id": "Test Web",
          "_type": {
            "_id": "WebAgent",
            "collection": true,
            "name": "Web Agents"
          },
          "advancedWebAgentConfig": {
            "apacheAuthDirectives": null,
            "clientHostnameHeader": null,
            "clientIpHeader": null,
            "customProperties": [],
            "fragmentRedirectEnabled": false,
            "hostnameToIpAddress": [],
            "logonAndImpersonation": false,
            "overrideRequestHost": false,
            "overrideRequestPort": false,
            "overrideRequestProtocol": false,
            "pdpJavascriptRepost": false,
            "pdpSkipPostUrl": [
              ""
            ],
            "pdpStickySessionCookieName": null,
            "pdpStickySessionMode": "OFF",
            "pdpStickySessionValue": null,
            "postDataCachePeriod": 10,
            "postDataPreservation": false,
            "replayPasswordKey": null,
            "retainSessionCache": false,
            "showPasswordInHeader": false
          },
          "amServicesWebAgent": {
            "amLoginUrl": [],
            "amLogoutUrl": [
              "http://testurl.com:8080/UI/Logout"
            ],
            "applicationLogoutUrls": [
              ""
            ],
            "conditionalLoginUrl": [
              ""
            ],
            "customLoginMode": 0,
            "enableLogoutRegex": false,
            "fetchPoliciesFromRootResource": false,
            "invalidateLogoutSession": true,
            "logoutRedirectDisabled": false,
            "logoutRedirectUrl": null,
            "logoutResetCookies": [
              ""
            ],
            "logoutUrlRegex": null,
            "policyCachePollingInterval": 3,
            "policyClockSkew": 0,
            "policyEvaluationApplication": "iPlanetAMWebAgentService",
            "policyEvaluationRealm": "/",
            "publicAmUrl": null,
            "regexConditionalLoginPattern": [
              ""
            ],
            "regexConditionalLoginUrl": [
              ""
            ],
            "retrieveClientHostname": false,
            "ssoCachePollingInterval": 3,
            "userIdParameter": "UserToken",
            "userIdParameterType": "session"
          },
          "applicationWebAgentConfig": {
            "attributeMultiValueSeparator": "|",
            "clientIpValidation": false,
            "continuousSecurityCookies": {},
            "continuousSecurityHeaders": {},
            "fetchAttributesForNotEnforcedUrls": false,
            "ignorePathInfoForNotEnforcedUrls": true,
            "invertNotEnforcedUrls": false,
            "notEnforcedIps": [
              ""
            ],
            "notEnforcedIpsList": [
              ""
            ],
            "notEnforcedIpsRegex": false,
            "notEnforcedUrls": [
              ""
            ],
            "notEnforcedUrlsRegex": false,
            "profileAttributeFetchMode": "NONE",
            "profileAttributeMap": {},
            "responseAttributeFetchMode": "NONE",
            "responseAttributeMap": {},
            "sessionAttributeFetchMode": "NONE",
            "sessionAttributeMap": {}
          },
          "globalWebAgentConfig": {
            "accessDeniedUrl": null,
            "agentConfigChangeNotificationsEnabled": true,
            "agentDebugLevel": "Error",
            "agentUriPrefix": "http://testurl.com:8080/amagent",
            "agentgroup": null,
            "amLbCookieEnable": false,
            "auditAccessType": "LOG_NONE",
            "auditLogLocation": "REMOTE",
            "cdssoRootUrl": [
              "agentRootURL=http://testurl.com:8080/"
            ],
            "configurationPollingInterval": 60,
            "disableJwtAudit": false,
            "fqdnCheck": false,
            "fqdnDefault": "testurl.com",
            "fqdnMapping": {},
            "jwtAuditWhitelist": null,
            "jwtName": "am-auth-jwt",
            "notificationsEnabled": true,
            "repositoryLocation": "centralized",
            "resetIdleTime": false,
            "secretLabelIdentifier": null,
            "ssoOnlyMode": false,
            "status": "Active",
            "userpassword": null,
            "webSocketConnectionIntervalInMinutes": 30
          },
          "miscWebAgentConfig": {
            "addCacheControlHeader": false,
            "anonymousUserEnabled": false,
            "anonymousUserId": "anonymous",
            "caseInsensitiveUrlComparison": true,
            "compositeAdviceEncode": false,
            "compositeAdviceRedirect": false,
            "encodeSpecialCharsInCookies": false,
            "encodeUrlSpecialCharacters": false,
            "gotoParameterName": "goto",
            "headerJsonResponse": {},
            "ignorePathInfo": false,
            "invalidUrlRegex": null,
            "invertUrlJsonResponse": false,
            "mineEncodeHeader": 0,
            "profileAttributesCookieMaxAge": 300,
            "profileAttributesCookiePrefix": "HTTP_",
            "statusCodeJsonResponse": 202,
            "urlJsonResponse": [
              ""
            ]
          },
          "ssoWebAgentConfig": {
            "acceptSsoToken": false,
            "cdssoCookieDomain": [
              ""
            ],
            "cdssoRedirectUri": "agent/cdsso-oauth2",
            "cookieName": "iPlanetDirectoryPro",
            "cookieResetEnabled": false,
            "cookieResetList": [
              ""
            ],
            "cookieResetOnRedirect": false,
            "httpOnly": true,
            "multivaluePreAuthnCookie": false,
            "persistentJwtCookie": false,
            "sameSite": null,
            "secureCookies": false
          }
        },
        "my-policy-agent": {
          "_id": "my-policy-agent",
          "_type": {
            "_id": "2.2_Agent",
            "collection": true,
            "name": "Policy Agents"
          },
          "cdssoRootUrl": [],
          "description": null,
          "status": "Active",
          "userpassword": null
        },
        "test": {
          "_id": "test",
          "_type": {
            "_id": "RemoteConsentAgent",
            "collection": true,
            "name": "OAuth2 Remote Consent Service"
          },
          "agentgroup": null,
          "jwkSet": null,
          "jwkStoreCacheMissCacheTime": 60000,
          "jwksCacheTimeout": 3600000,
          "jwksUri": null,
          "publicKeyLocation": "jwks_uri",
          "remoteConsentRedirectUrl": null,
          "remoteConsentRequestEncryptionAlgorithm": "RSA-OAEP-256",
          "remoteConsentRequestEncryptionEnabled": true,
          "remoteConsentRequestEncryptionMethod": "A128GCM",
          "remoteConsentRequestSigningAlgorithm": "RS256",
          "remoteConsentResponseEncryptionAlgorithm": "RSA-OAEP-256",
          "remoteConsentResponseEncryptionMethod": "A128GCM",
          "remoteConsentResponseSigningAlg": "RS256",
          "requestTimeLimit": 180
        },
        "test java": {
          "_id": "test java",
          "_type": {
            "_id": "J2EEAgent",
            "collection": true,
            "name": "J2EE Agents"
          },
          "advancedJ2EEAgentConfig": {
            "alternativeAgentHostname": null,
            "alternativeAgentPort": null,
            "alternativeAgentProtocol": null,
            "clientHostnameHeader": null,
            "clientIpHeader": null,
            "customProperties": [],
            "expiredSessionCacheSize": 500,
            "expiredSessionCacheTTL": 20,
            "fragmentRelayUri": null,
            "idleTimeRefreshWindow": 1,
            "jwtCacheSize": 5000,
            "jwtCacheTTL": 30,
            "missingPostDataPreservationEntryUri": [
              ""
            ],
            "monitoringToCSV": false,
            "policyCachePerUser": 50,
            "policyCacheSize": 5000,
            "policyClientPollingInterval": 3,
            "possibleXssCodeElements": [
              ""
            ],
            "postDataCacheTtlMin": 5,
            "postDataPreservation": false,
            "postDataPreserveCacheEntryMaxEntries": 1000,
            "postDataPreserveCacheEntryMaxTotalSizeMb": -1,
            "postDataPreserveMultipartLimitBytes": 104857600,
            "postDataPreserveMultipartParameterLimitBytes": 104857600,
            "postDataStickySessionKeyValue": null,
            "postDataStickySessionMode": "URL",
            "retainPreviousOverrideBehavior": true,
            "sessionCacheTTL": 15,
            "ssoExchangeCacheSize": 100,
            "ssoExchangeCacheTTL": 5,
            "xssDetectionRedirectUri": {}
          },
          "amServicesJ2EEAgent": {
            "agentAdviceEncode": false,
            "amLoginUrl": [],
            "authServiceHost": "testurl.com",
            "authServicePort": 8080,
            "authServiceProtocol": "http",
            "authSuccessRedirectUrl": false,
            "conditionalLoginUrl": [
              ""
            ],
            "conditionalLogoutUrl": [
              ""
            ],
            "customLoginEnabled": false,
            "legacyLoginUrlList": [
              ""
            ],
            "overridePolicyEvaluationRealmEnabled": false,
            "policyEvaluationApplication": "iPlanetAMWebAgentService",
            "policyEvaluationRealm": "/",
            "policyNotifications": true,
            "restrictToRealm": {},
            "strategyWhenAMUnavailable": "EVAL_NER_USE_CACHE_UNTIL_EXPIRED_ELSE_503",
            "urlPolicyEnvGetParameters": [
              ""
            ],
            "urlPolicyEnvJsessionParameters": [
              ""
            ],
            "urlPolicyEnvPostParameters": [
              ""
            ]
          },
          "applicationJ2EEAgentConfig": {
            "applicationLogoutUris": {},
            "clientIpValidationMode": {
              "": "OFF"
            },
            "clientIpValidationRange": {},
            "continuousSecurityCookies": {},
            "continuousSecurityHeaders": {},
            "cookieAttributeMultiValueSeparator": "|",
            "cookieAttributeUrlEncoded": true,
            "headerAttributeDateFormat": "EEE, d MMM yyyy hh:mm:ss z",
            "invertNotEnforcedIps": false,
            "invertNotEnforcedUris": false,
            "logoutEntryUri": {},
            "logoutIntrospection": false,
            "logoutRequestParameters": {},
            "notEnforcedFavicon": true,
            "notEnforcedIps": [
              ""
            ],
            "notEnforcedIpsCacheEnabled": true,
            "notEnforcedIpsCacheSize": 1000,
            "notEnforcedRuleCompoundSeparator": "|",
            "notEnforcedUris": [
              ""
            ],
            "notEnforcedUrisCacheEnabled": true,
            "notEnforcedUrisCacheSize": 1000,
            "profileAttributeFetchMode": "NONE",
            "profileAttributeMap": {},
            "resourceAccessDeniedUri": {},
            "responseAttributeFetchMode": "NONE",
            "responseAttributeMap": {},
            "sessionAttributeFetchMode": "NONE",
            "sessionAttributeMap": {}
          },
          "globalJ2EEAgentConfig": {
            "agentConfigChangeNotificationsEnabled": true,
            "agentgroup": "Test Java Group",
            "auditAccessType": "LOG_NONE",
            "auditLogLocation": "REMOTE",
            "cdssoRootUrl": [
              "agentRootURL=http://testurl.com:8080/"
            ],
            "configurationReloadInterval": 0,
            "customResponseHeader": {},
            "debugLevel": "error",
            "debugLogfilePrefix": null,
            "debugLogfileRetentionCount": -1,
            "debugLogfileRotationMinutes": -1,
            "debugLogfileRotationSize": 52428800,
            "debugLogfileSuffix": "-yyyy.MM.dd-HH.mm.ss",
            "filterMode": {
              "": "ALL"
            },
            "fqdnCheck": false,
            "fqdnDefault": "testurl.com",
            "fqdnMapping": {},
            "httpSessionBinding": true,
            "jwtName": "am-auth-jwt",
            "lbCookieEnabled": false,
            "lbCookieName": "amlbcookie",
            "localAuditLogRotation": false,
            "localAuditLogfileRetentionCount": -1,
            "localAuditRotationSize": 52428800,
            "loginAttemptLimit": 0,
            "loginAttemptLimitCookieName": "amFilterParam",
            "preAuthCookieMaxAge": 300,
            "preAuthCookieName": "amFilterCDSSORequest",
            "recheckAmUnavailabilityInSeconds": 5,
            "redirectAttemptLimit": 0,
            "redirectAttemptLimitCookieName": "amFilterRDParam",
            "repositoryLocation": "centralized",
            "secretLabelIdentifier": null,
            "status": "Active",
            "userAttributeName": "employeenumber",
            "userMappingMode": "USER_ID",
            "userPrincipalFlag": false,
            "userTokenName": "UserToken",
            "userpassword": null,
            "webSocketConnectionIntervalInMinutes": 30
          },
          "miscJ2EEAgentConfig": {
            "agent302RedirectContentType": "application/json",
            "agent302RedirectEnabled": true,
            "agent302RedirectHttpData": "{redirect:{requestUri:%REQUEST_URI%,requestUrl:%REQUEST_URL%,targetUrl:%TARGET%}}",
            "agent302RedirectInvertEnabled": false,
            "agent302RedirectNerList": [
              ""
            ],
            "agent302RedirectStatusCode": 200,
            "authFailReasonParameterName": null,
            "authFailReasonParameterRemapper": {},
            "authFailReasonUrl": null,
            "gotoParameterName": "goto",
            "gotoUrl": null,
            "ignorePathInfo": false,
            "legacyRedirectUri": "/test/sunwLegacySupportURI",
            "legacyUserAgentList": [
              "Mozilla/4.7*"
            ],
            "legacyUserAgentSupport": false,
            "localeCountry": "US",
            "localeLanguage": "en",
            "loginReasonMap": {},
            "loginReasonParameterName": null,
            "portCheckEnabled": false,
            "portCheckFile": "PortCheckContent.txt",
            "portCheckSetting": {
              "8080": "http"
            },
            "unwantedHttpUrlParams": [
              ""
            ],
            "unwantedHttpUrlRegexParams": [
              ""
            ],
            "wantedHttpUrlParams": [
              ""
            ],
            "wantedHttpUrlRegexParams": [
              ""
            ]
          },
          "ssoJ2EEAgentConfig": {
            "acceptIPDPCookie": false,
            "acceptSsoTokenDomainList": [
              ""
            ],
            "acceptSsoTokenEnabled": false,
            "authExchangeCookieName": null,
            "authExchangeUri": null,
            "cdssoDomainList": [
              ""
            ],
            "cdssoRedirectUri": "/test/post-authn-redirect",
            "cdssoSecureCookies": false,
            "cookieResetDomains": {},
            "cookieResetEnabled": false,
            "cookieResetNames": [
              ""
            ],
            "cookieResetPaths": {},
            "encodeCookies": false,
            "excludedUserAgentsList": [],
            "httpOnly": true,
            "setCookieAttributeMap": {},
            "setCookieInternalMap": {}
          }
        },
        "test software publisher": {
          "_id": "test software publisher",
          "_type": {
            "_id": "SoftwarePublisher",
            "collection": true,
            "name": "OAuth2 Software Publisher"
          },
          "agentgroup": null,
          "issuer": null,
          "jwkSet": null,
          "jwkStoreCacheMissCacheTime": 60000,
          "jwksCacheTimeout": 3600000,
          "jwksUri": null,
          "publicKeyLocation": "jwks_uri",
          "softwareStatementSigningAlgorithm": "RS256"
        }
      },
      "agentGroup": {
        "Oauth2 group": {
          "_id": "Oauth2 group",
          "_type": {
            "_id": "OAuth2Client",
            "collection": true,
            "name": "OAuth2 Clients"
          },
          "advancedOAuth2ClientConfig": {
            "clientUri": [],
            "contacts": [],
            "customProperties": [],
            "descriptions": [],
            "grantTypes": [
              "authorization_code"
            ],
            "isConsentImplied": false,
            "javascriptOrigins": [],
            "logoUri": [],
            "mixUpMitigation": false,
            "name": [],
            "policyUri": [],
            "refreshTokenGracePeriod": 0,
            "requestUris": [],
            "require_pushed_authorization_requests": false,
            "responseTypes": [
              "code",
              "token",
              "id_token",
              "code token",
              "token id_token",
              "code id_token",
              "code token id_token",
              "device_code",
              "device_code id_token"
            ],
            "sectorIdentifierUri": null,
            "softwareIdentity": null,
            "softwareVersion": null,
            "subjectType": "public",
            "tokenEndpointAuthMethod": "client_secret_basic",
            "tokenExchangeAuthLevel": 0,
            "tosURI": [],
            "updateAccessToken": null
          },
          "coreOAuth2ClientConfig": {
            "accessTokenLifetime": 0,
            "authorizationCodeLifetime": 0,
            "clientName": [],
            "clientType": "Confidential",
            "defaultScopes": [],
            "loopbackInterfaceRedirection": false,
            "redirectionUris": [],
            "refreshTokenLifetime": 0,
            "scopes": [],
            "status": "Active"
          },
          "coreOpenIDClientConfig": {
            "backchannel_logout_session_required": false,
            "backchannel_logout_uri": null,
            "claims": [],
            "clientSessionUri": null,
            "defaultAcrValues": [],
            "defaultMaxAge": 600,
            "defaultMaxAgeEnabled": false,
            "jwtTokenLifetime": 0,
            "postLogoutRedirectUri": []
          },
          "coreUmaClientConfig": {
            "claimsRedirectionUris": []
          },
          "signEncOAuth2ClientConfig": {
            "authorizationResponseEncryptionAlgorithm": null,
            "authorizationResponseEncryptionMethod": null,
            "authorizationResponseSigningAlgorithm": "RS256",
            "clientJwtPublicKey": null,
            "idTokenEncryptionAlgorithm": "RSA-OAEP-256",
            "idTokenEncryptionEnabled": false,
            "idTokenEncryptionMethod": "A128CBC-HS256",
            "idTokenPublicEncryptionKey": null,
            "idTokenSignedResponseAlg": "RS256",
            "jwkSet": null,
            "jwkStoreCacheMissCacheTime": 60000,
            "jwksCacheTimeout": 3600000,
            "jwksUri": null,
            "mTLSCertificateBoundAccessTokens": false,
            "mTLSSubjectDN": null,
            "mTLSTrustedCert": null,
            "publicKeyLocation": "jwks_uri",
            "requestParameterEncryptedAlg": null,
            "requestParameterEncryptedEncryptionAlgorithm": "A128CBC-HS256",
            "requestParameterSignedAlg": null,
            "tokenEndpointAuthSigningAlgorithm": "RS256",
            "tokenIntrospectionEncryptedResponseAlg": "RSA-OAEP-256",
            "tokenIntrospectionEncryptedResponseEncryptionAlgorithm": "A128CBC-HS256",
            "tokenIntrospectionResponseFormat": "JSON",
            "tokenIntrospectionSignedResponseAlg": "RS256",
            "userinfoEncryptedResponseAlg": null,
            "userinfoEncryptedResponseEncryptionAlgorithm": "A128CBC-HS256",
            "userinfoResponseFormat": "JSON",
            "userinfoSignedResponseAlg": null
          }
        },
        "Remote consent group": {
          "_id": "Remote consent group",
          "_type": {
            "_id": "RemoteConsentAgent",
            "collection": true,
            "name": "OAuth2 Remote Consent Service"
          },
          "jwkSet": null,
          "jwkStoreCacheMissCacheTime": 60000,
          "jwksCacheTimeout": 3600000,
          "jwksUri": null,
          "publicKeyLocation": "jwks_uri",
          "remoteConsentRedirectUrl": null,
          "remoteConsentRequestEncryptionAlgorithm": "RSA-OAEP-256",
          "remoteConsentRequestEncryptionEnabled": true,
          "remoteConsentRequestEncryptionMethod": "A128GCM",
          "remoteConsentRequestSigningAlgorithm": "RS256",
          "remoteConsentResponseEncryptionAlgorithm": "RSA-OAEP-256",
          "remoteConsentResponseEncryptionMethod": "A128GCM",
          "remoteConsentResponseSigningAlg": "RS256",
          "requestTimeLimit": 180
        },
        "Software publisher group": {
          "_id": "Software publisher group",
          "_type": {
            "_id": "SoftwarePublisher",
            "collection": true,
            "name": "OAuth2 Software Publisher"
          },
          "issuer": null,
          "jwkSet": null,
          "jwkStoreCacheMissCacheTime": 60000,
          "jwksCacheTimeout": 3600000,
          "jwksUri": null,
          "publicKeyLocation": "jwks_uri",
          "softwareStatementSigningAlgorithm": "RS256"
        },
        "Test IG Group": {
          "_id": "Test IG Group",
          "_type": {
            "_id": "IdentityGatewayAgent",
            "collection": true,
            "name": "Identity Gateway Agents"
          },
          "igCdssoLoginUrlTemplate": null,
          "igCdssoRedirectUrls": [],
          "igTokenIntrospection": "None",
          "status": "Active"
        },
        "Test Java Group": {
          "_id": "Test Java Group",
          "_type": {
            "_id": "J2EEAgent",
            "collection": true,
            "name": "J2EE Agents"
          },
          "advancedJ2EEAgentConfig": {
            "alternativeAgentHostname": null,
            "alternativeAgentPort": null,
            "alternativeAgentProtocol": null,
            "clientHostnameHeader": null,
            "clientIpHeader": null,
            "customProperties": [],
            "expiredSessionCacheSize": 500,
            "expiredSessionCacheTTL": 20,
            "fragmentRelayUri": null,
            "idleTimeRefreshWindow": 1,
            "jwtCacheSize": 5000,
            "jwtCacheTTL": 30,
            "missingPostDataPreservationEntryUri": [
              ""
            ],
            "monitoringToCSV": false,
            "policyCachePerUser": 50,
            "policyCacheSize": 5000,
            "policyClientPollingInterval": 3,
            "possibleXssCodeElements": [
              ""
            ],
            "postDataCacheTtlMin": 5,
            "postDataPreservation": false,
            "postDataPreserveCacheEntryMaxEntries": 1000,
            "postDataPreserveCacheEntryMaxTotalSizeMb": -1,
            "postDataPreserveMultipartLimitBytes": 104857600,
            "postDataPreserveMultipartParameterLimitBytes": 104857600,
            "postDataStickySessionKeyValue": null,
            "postDataStickySessionMode": "URL",
            "retainPreviousOverrideBehavior": true,
            "sessionCacheTTL": 15,
            "ssoExchangeCacheSize": 100,
            "ssoExchangeCacheTTL": 5,
            "xssDetectionRedirectUri": {}
          },
          "amServicesJ2EEAgent": {
            "agentAdviceEncode": false,
            "amLoginUrl": [],
            "authServiceHost": "testurl.com",
            "authServicePort": 8080,
            "authServiceProtocol": "http",
            "authSuccessRedirectUrl": false,
            "conditionalLoginUrl": [
              ""
            ],
            "conditionalLogoutUrl": [
              ""
            ],
            "customLoginEnabled": false,
            "legacyLoginUrlList": [
              ""
            ],
            "overridePolicyEvaluationRealmEnabled": false,
            "policyEvaluationApplication": "iPlanetAMWebAgentService",
            "policyEvaluationRealm": "/",
            "policyNotifications": true,
            "restrictToRealm": {},
            "strategyWhenAMUnavailable": "EVAL_NER_USE_CACHE_UNTIL_EXPIRED_ELSE_503",
            "urlPolicyEnvGetParameters": [
              ""
            ],
            "urlPolicyEnvJsessionParameters": [
              ""
            ],
            "urlPolicyEnvPostParameters": [
              ""
            ]
          },
          "applicationJ2EEAgentConfig": {
            "applicationLogoutUris": {},
            "clientIpValidationMode": {
              "": "OFF"
            },
            "clientIpValidationRange": {},
            "continuousSecurityCookies": {},
            "continuousSecurityHeaders": {},
            "cookieAttributeMultiValueSeparator": "|",
            "cookieAttributeUrlEncoded": true,
            "headerAttributeDateFormat": "EEE, d MMM yyyy hh:mm:ss z",
            "invertNotEnforcedIps": false,
            "invertNotEnforcedUris": false,
            "logoutEntryUri": {},
            "logoutIntrospection": false,
            "logoutRequestParameters": {},
            "notEnforcedFavicon": true,
            "notEnforcedIps": [
              ""
            ],
            "notEnforcedIpsCacheEnabled": true,
            "notEnforcedIpsCacheSize": 1000,
            "notEnforcedRuleCompoundSeparator": "|",
            "notEnforcedUris": [
              ""
            ],
            "notEnforcedUrisCacheEnabled": true,
            "notEnforcedUrisCacheSize": 1000,
            "profileAttributeFetchMode": "NONE",
            "profileAttributeMap": {},
            "resourceAccessDeniedUri": {},
            "responseAttributeFetchMode": "NONE",
            "responseAttributeMap": {},
            "sessionAttributeFetchMode": "NONE",
            "sessionAttributeMap": {}
          },
          "globalJ2EEAgentConfig": {
            "agentConfigChangeNotificationsEnabled": true,
            "auditAccessType": "LOG_NONE",
            "auditLogLocation": "REMOTE",
            "cdssoRootUrl": [],
            "configurationReloadInterval": 0,
            "customResponseHeader": {},
            "debugLevel": "error",
            "debugLogfilePrefix": null,
            "debugLogfileRetentionCount": -1,
            "debugLogfileRotationMinutes": -1,
            "debugLogfileRotationSize": 52428800,
            "debugLogfileSuffix": "-yyyy.MM.dd-HH.mm.ss",
            "filterMode": {
              "": "ALL"
            },
            "fqdnCheck": false,
            "fqdnDefault": null,
            "fqdnMapping": {},
            "httpSessionBinding": true,
            "jwtName": "am-auth-jwt",
            "lbCookieEnabled": false,
            "lbCookieName": "amlbcookie",
            "localAuditLogRotation": false,
            "localAuditLogfileRetentionCount": -1,
            "localAuditRotationSize": 52428800,
            "loginAttemptLimit": 0,
            "loginAttemptLimitCookieName": "amFilterParam",
            "preAuthCookieMaxAge": 300,
            "preAuthCookieName": "amFilterCDSSORequest",
            "recheckAmUnavailabilityInSeconds": 5,
            "redirectAttemptLimit": 0,
            "redirectAttemptLimitCookieName": "amFilterRDParam",
            "status": "Active",
            "userAttributeName": "employeenumber",
            "userMappingMode": "USER_ID",
            "userPrincipalFlag": false,
            "userTokenName": "UserToken",
            "webSocketConnectionIntervalInMinutes": 30
          },
          "miscJ2EEAgentConfig": {
            "agent302RedirectContentType": "application/json",
            "agent302RedirectEnabled": true,
            "agent302RedirectHttpData": "{redirect:{requestUri:%REQUEST_URI%,requestUrl:%REQUEST_URL%,targetUrl:%TARGET%}}",
            "agent302RedirectInvertEnabled": false,
            "agent302RedirectNerList": [
              ""
            ],
            "agent302RedirectStatusCode": 200,
            "authFailReasonParameterName": null,
            "authFailReasonParameterRemapper": {},
            "authFailReasonUrl": null,
            "gotoParameterName": "goto",
            "gotoUrl": null,
            "ignorePathInfo": false,
            "legacyRedirectUri": null,
            "legacyUserAgentList": [
              "Mozilla/4.7*"
            ],
            "legacyUserAgentSupport": false,
            "localeCountry": "US",
            "localeLanguage": "en",
            "loginReasonMap": {},
            "loginReasonParameterName": null,
            "portCheckEnabled": false,
            "portCheckFile": "PortCheckContent.txt",
            "portCheckSetting": {},
            "unwantedHttpUrlParams": [
              ""
            ],
            "unwantedHttpUrlRegexParams": [
              ""
            ],
            "wantedHttpUrlParams": [
              ""
            ],
            "wantedHttpUrlRegexParams": [
              ""
            ]
          },
          "ssoJ2EEAgentConfig": {
            "acceptIPDPCookie": false,
            "acceptSsoTokenDomainList": [
              ""
            ],
            "acceptSsoTokenEnabled": false,
            "authExchangeCookieName": null,
            "authExchangeUri": null,
            "cdssoDomainList": [
              ""
            ],
            "cdssoRedirectUri": null,
            "cdssoSecureCookies": false,
            "cookieResetDomains": {},
            "cookieResetEnabled": false,
            "cookieResetNames": [
              ""
            ],
            "cookieResetPaths": {},
            "encodeCookies": false,
            "excludedUserAgentsList": [],
            "httpOnly": true,
            "setCookieAttributeMap": {},
            "setCookieInternalMap": {}
          }
        },
        "Test SOAP STS group": {
          "_id": "Test SOAP STS group",
          "_type": {
            "_id": "SoapSTSAgent",
            "collection": true,
            "name": "SOAP STS Agents"
          },
          "publishServicePollInterval": 300
        },
        "Test Web Group": {
          "_id": "Test Web Group",
          "_type": {
            "_id": "WebAgent",
            "collection": true,
            "name": "Web Agents"
          },
          "advancedWebAgentConfig": {
            "apacheAuthDirectives": null,
            "clientHostnameHeader": null,
            "clientIpHeader": null,
            "customProperties": [],
            "fragmentRedirectEnabled": false,
            "hostnameToIpAddress": [],
            "logonAndImpersonation": false,
            "overrideRequestHost": false,
            "overrideRequestPort": false,
            "overrideRequestProtocol": false,
            "pdpJavascriptRepost": false,
            "pdpSkipPostUrl": [
              ""
            ],
            "pdpStickySessionCookieName": null,
            "pdpStickySessionMode": "OFF",
            "pdpStickySessionValue": null,
            "postDataCachePeriod": 10,
            "postDataPreservation": false,
            "replayPasswordKey": null,
            "retainSessionCache": false,
            "showPasswordInHeader": false
          },
          "amServicesWebAgent": {
            "amLoginUrl": [],
            "amLogoutUrl": [
              "http://testurl.com:8080/UI/Logout"
            ],
            "applicationLogoutUrls": [
              ""
            ],
            "conditionalLoginUrl": [
              ""
            ],
            "customLoginMode": 0,
            "enableLogoutRegex": false,
            "fetchPoliciesFromRootResource": false,
            "invalidateLogoutSession": true,
            "logoutRedirectDisabled": false,
            "logoutRedirectUrl": null,
            "logoutResetCookies": [
              ""
            ],
            "logoutUrlRegex": null,
            "policyCachePollingInterval": 3,
            "policyClockSkew": 0,
            "policyEvaluationApplication": "iPlanetAMWebAgentService",
            "policyEvaluationRealm": "/",
            "publicAmUrl": null,
            "regexConditionalLoginPattern": [
              ""
            ],
            "regexConditionalLoginUrl": [
              ""
            ],
            "retrieveClientHostname": false,
            "ssoCachePollingInterval": 3,
            "userIdParameter": "UserToken",
            "userIdParameterType": "session"
          },
          "applicationWebAgentConfig": {
            "attributeMultiValueSeparator": "|",
            "clientIpValidation": false,
            "continuousSecurityCookies": {},
            "continuousSecurityHeaders": {},
            "fetchAttributesForNotEnforcedUrls": false,
            "ignorePathInfoForNotEnforcedUrls": true,
            "invertNotEnforcedUrls": false,
            "notEnforcedIps": [
              ""
            ],
            "notEnforcedIpsList": [
              ""
            ],
            "notEnforcedIpsRegex": false,
            "notEnforcedUrls": [
              ""
            ],
            "notEnforcedUrlsRegex": false,
            "profileAttributeFetchMode": "NONE",
            "profileAttributeMap": {},
            "responseAttributeFetchMode": "NONE",
            "responseAttributeMap": {},
            "sessionAttributeFetchMode": "NONE",
            "sessionAttributeMap": {}
          },
          "globalWebAgentConfig": {
            "accessDeniedUrl": null,
            "agentConfigChangeNotificationsEnabled": true,
            "agentDebugLevel": "Error",
            "agentUriPrefix": null,
            "amLbCookieEnable": false,
            "auditAccessType": "LOG_NONE",
            "auditLogLocation": "REMOTE",
            "cdssoRootUrl": [],
            "configurationPollingInterval": 60,
            "disableJwtAudit": false,
            "fqdnCheck": false,
            "fqdnDefault": null,
            "fqdnMapping": {},
            "jwtAuditWhitelist": null,
            "jwtName": "am-auth-jwt",
            "notificationsEnabled": true,
            "resetIdleTime": false,
            "ssoOnlyMode": false,
            "status": "Active",
            "webSocketConnectionIntervalInMinutes": 30
          },
          "miscWebAgentConfig": {
            "addCacheControlHeader": false,
            "anonymousUserEnabled": false,
            "anonymousUserId": "anonymous",
            "caseInsensitiveUrlComparison": true,
            "compositeAdviceEncode": false,
            "compositeAdviceRedirect": false,
            "encodeSpecialCharsInCookies": false,
            "encodeUrlSpecialCharacters": false,
            "gotoParameterName": "goto",
            "headerJsonResponse": {},
            "ignorePathInfo": false,
            "invalidUrlRegex": null,
            "invertUrlJsonResponse": false,
            "mineEncodeHeader": 0,
            "profileAttributesCookieMaxAge": 300,
            "profileAttributesCookiePrefix": "HTTP_",
            "statusCodeJsonResponse": 202,
            "urlJsonResponse": [
              ""
            ]
          },
          "ssoWebAgentConfig": {
            "acceptSsoToken": false,
            "cdssoCookieDomain": [
              ""
            ],
            "cdssoRedirectUri": "agent/cdsso-oauth2",
            "cookieName": "iPlanetDirectoryPro",
            "cookieResetEnabled": false,
            "cookieResetList": [
              ""
            ],
            "cookieResetOnRedirect": false,
            "httpOnly": true,
            "multivaluePreAuthnCookie": false,
            "persistentJwtCookie": false,
            "sameSite": null,
            "secureCookies": false
          }
        },
        "Trusted JWT group": {
          "_id": "Trusted JWT group",
          "_type": {
            "_id": "TrustedJwtIssuer",
            "collection": true,
            "name": "OAuth2 Trusted JWT Issuer"
          },
          "allowedSubjects": [],
          "consentedScopesClaim": "scope",
          "issuer": null,
          "jwkSet": null,
          "jwkStoreCacheMissCacheTime": 60000,
          "jwksCacheTimeout": 3600000,
          "jwksUri": null,
          "resourceOwnerIdentityClaim": "sub"
        },
        "testwebgroup": {
          "_id": "testwebgroup",
          "_type": {
            "_id": "WebAgent",
            "collection": true,
            "name": "Web Agents"
          },
          "advancedWebAgentConfig": {
            "apacheAuthDirectives": null,
            "clientHostnameHeader": null,
            "clientIpHeader": null,
            "customProperties": [],
            "fragmentRedirectEnabled": false,
            "hostnameToIpAddress": [],
            "logonAndImpersonation": false,
            "overrideRequestHost": false,
            "overrideRequestPort": false,
            "overrideRequestProtocol": false,
            "pdpJavascriptRepost": false,
            "pdpSkipPostUrl": [
              ""
            ],
            "pdpStickySessionCookieName": null,
            "pdpStickySessionMode": "OFF",
            "pdpStickySessionValue": null,
            "postDataCachePeriod": 10,
            "postDataPreservation": false,
            "replayPasswordKey": null,
            "retainSessionCache": false,
            "showPasswordInHeader": false
          },
          "amServicesWebAgent": {
            "amLoginUrl": [],
            "amLogoutUrl": [
              "http://test.com:8080/cool/UI/Logout"
            ],
            "applicationLogoutUrls": [
              ""
            ],
            "conditionalLoginUrl": [
              ""
            ],
            "customLoginMode": 0,
            "enableLogoutRegex": false,
            "fetchPoliciesFromRootResource": false,
            "invalidateLogoutSession": true,
            "logoutRedirectDisabled": false,
            "logoutRedirectUrl": null,
            "logoutResetCookies": [
              ""
            ],
            "logoutUrlRegex": null,
            "policyCachePollingInterval": 3,
            "policyClockSkew": 0,
            "policyEvaluationApplication": "iPlanetAMWebAgentService",
            "policyEvaluationRealm": "/",
            "publicAmUrl": null,
            "regexConditionalLoginPattern": [
              ""
            ],
            "regexConditionalLoginUrl": [
              ""
            ],
            "retrieveClientHostname": false,
            "ssoCachePollingInterval": 3,
            "userIdParameter": "UserToken",
            "userIdParameterType": "session"
          },
          "applicationWebAgentConfig": {
            "attributeMultiValueSeparator": "|",
            "clientIpValidation": false,
            "continuousSecurityCookies": {},
            "continuousSecurityHeaders": {},
            "fetchAttributesForNotEnforcedUrls": false,
            "ignorePathInfoForNotEnforcedUrls": true,
            "invertNotEnforcedUrls": false,
            "notEnforcedIps": [
              ""
            ],
            "notEnforcedIpsList": [
              ""
            ],
            "notEnforcedIpsRegex": false,
            "notEnforcedUrls": [
              ""
            ],
            "notEnforcedUrlsRegex": false,
            "profileAttributeFetchMode": "NONE",
            "profileAttributeMap": {},
            "responseAttributeFetchMode": "NONE",
            "responseAttributeMap": {},
            "sessionAttributeFetchMode": "NONE",
            "sessionAttributeMap": {}
          },
          "globalWebAgentConfig": {
            "accessDeniedUrl": null,
            "agentConfigChangeNotificationsEnabled": true,
            "agentDebugLevel": "Error",
            "agentUriPrefix": null,
            "amLbCookieEnable": false,
            "auditAccessType": "LOG_NONE",
            "auditLogLocation": "REMOTE",
            "cdssoRootUrl": [],
            "configurationPollingInterval": 60,
            "disableJwtAudit": false,
            "fqdnCheck": false,
            "fqdnDefault": null,
            "fqdnMapping": {},
            "jwtAuditWhitelist": null,
            "jwtName": "am-auth-jwt",
            "notificationsEnabled": true,
            "resetIdleTime": false,
            "ssoOnlyMode": false,
            "status": "Active",
            "webSocketConnectionIntervalInMinutes": 30
          },
          "miscWebAgentConfig": {
            "addCacheControlHeader": false,
            "anonymousUserEnabled": false,
            "anonymousUserId": "anonymous",
            "caseInsensitiveUrlComparison": true,
            "compositeAdviceEncode": false,
            "compositeAdviceRedirect": false,
            "encodeSpecialCharsInCookies": false,
            "encodeUrlSpecialCharacters": false,
            "gotoParameterName": "goto",
            "headerJsonResponse": {},
            "ignorePathInfo": false,
            "invalidUrlRegex": null,
            "invertUrlJsonResponse": false,
            "mineEncodeHeader": 0,
            "profileAttributesCookieMaxAge": 300,
            "profileAttributesCookiePrefix": "HTTP_",
            "statusCodeJsonResponse": 202,
            "urlJsonResponse": [
              ""
            ]
          },
          "ssoWebAgentConfig": {
            "acceptSsoToken": false,
            "cdssoCookieDomain": [
              ""
            ],
            "cdssoRedirectUri": "agent/cdsso-oauth2",
            "cookieName": "iPlanetDirectoryPro",
            "cookieResetEnabled": false,
            "cookieResetList": [
              ""
            ],
            "cookieResetOnRedirect": false,
            "httpOnly": true,
            "multivaluePreAuthnCookie": false,
            "persistentJwtCookie": false,
            "sameSite": null,
            "secureCookies": false
          }
        }
      },
      "application": {
        "test client": {
          "_id": "test client",
          "_provider": {
            "_id": "",
            "_type": {
              "_id": "oauth-oidc",
              "collection": false,
              "name": "OAuth2 Provider"
            },
            "advancedOAuth2Config": {
              "allowClientCredentialsInTokenRequestQueryParameters": false,
              "allowedAudienceValues": [],
              "authenticationAttributes": [
                "uid"
              ],
              "codeVerifierEnforced": "false",
              "defaultScopes": [],
              "displayNameAttribute": "cn",
              "expClaimRequiredInRequestObject": false,
              "grantTypes": [
                "implicit",
                "urn:ietf:params:oauth:grant-type:saml2-bearer",
                "refresh_token",
                "password",
                "client_credentials",
                "urn:ietf:params:oauth:grant-type:device_code",
                "authorization_code",
                "urn:openid:params:grant-type:ciba",
                "urn:ietf:params:oauth:grant-type:uma-ticket",
                "urn:ietf:params:oauth:grant-type:token-exchange",
                "urn:ietf:params:oauth:grant-type:jwt-bearer"
              ],
              "hashSalt": "changeme",
              "includeSubnameInTokenClaims": true,
              "macaroonTokenFormat": "V2",
              "maxAgeOfRequestObjectNbfClaim": 0,
              "maxDifferenceBetweenRequestObjectNbfAndExp": 0,
              "moduleMessageEnabledInPasswordGrant": false,
              "nbfClaimRequiredInRequestObject": false,
              "parRequestUriLifetime": 90,
              "passwordGrantAuthService": "[Empty]",
              "persistentClaims": [],
              "refreshTokenGracePeriod": 0,
              "requestObjectProcessing": "OIDC",
              "requirePushedAuthorizationRequests": false,
              "responseTypeClasses": [
                "code|org.forgerock.oauth2.core.AuthorizationCodeResponseTypeHandler",
                "id_token|org.forgerock.openidconnect.IdTokenResponseTypeHandler",
                "token|org.forgerock.oauth2.core.TokenResponseTypeHandler"
              ],
              "supportedScopes": [],
              "supportedSubjectTypes": [
                "public",
                "pairwise"
              ],
              "tlsCertificateBoundAccessTokensEnabled": true,
              "tlsCertificateRevocationCheckingEnabled": false,
              "tlsClientCertificateHeaderFormat": "URLENCODED_PEM",
              "tokenCompressionEnabled": false,
              "tokenEncryptionEnabled": false,
              "tokenExchangeClasses": [
                "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToAccessTokenExchanger",
                "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToIdTokenExchanger",
                "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToIdTokenExchanger",
                "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToAccessTokenExchanger"
              ],
              "tokenSigningAlgorithm": "HS256",
              "tokenValidatorClasses": [
                "urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.OidcIdTokenValidator",
                "urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.OAuth2AccessTokenValidator"
              ]
            },
            "advancedOIDCConfig": {
              "alwaysAddClaimsToToken": false,
              "amrMappings": {},
              "authorisedIdmDelegationClients": [],
              "authorisedOpenIdConnectSSOClients": [],
              "claimsParameterSupported": false,
              "defaultACR": [],
              "idTokenInfoClientAuthenticationEnabled": true,
              "includeAllKtyAlgCombinationsInJwksUri": false,
              "loaMapping": {},
              "storeOpsTokens": true,
              "supportedAuthorizationResponseEncryptionAlgorithms": [
                "ECDH-ES+A256KW",
                "ECDH-ES+A192KW",
                "RSA-OAEP",
                "ECDH-ES+A128KW",
                "RSA-OAEP-256",
                "A128KW",
                "A256KW",
                "ECDH-ES",
                "dir",
                "A192KW"
              ],
              "supportedAuthorizationResponseEncryptionEnc": [
                "A256GCM",
                "A192GCM",
                "A128GCM",
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512"
              ],
              "supportedAuthorizationResponseSigningAlgorithms": [
                "PS384",
                "RS384",
                "EdDSA",
                "ES384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512",
                "PS256",
                "PS512",
                "RS512"
              ],
              "supportedRequestParameterEncryptionAlgorithms": [
                "ECDH-ES+A256KW",
                "ECDH-ES+A192KW",
                "ECDH-ES+A128KW",
                "RSA-OAEP",
                "RSA-OAEP-256",
                "A128KW",
                "A256KW",
                "ECDH-ES",
                "dir",
                "A192KW"
              ],
              "supportedRequestParameterEncryptionEnc": [
                "A256GCM",
                "A192GCM",
                "A128GCM",
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512"
              ],
              "supportedRequestParameterSigningAlgorithms": [
                "PS384",
                "ES384",
                "RS384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512",
                "PS256",
                "PS512",
                "RS512"
              ],
              "supportedTokenEndpointAuthenticationSigningAlgorithms": [
                "PS384",
                "ES384",
                "RS384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512",
                "PS256",
                "PS512",
                "RS512"
              ],
              "supportedTokenIntrospectionResponseEncryptionAlgorithms": [
                "ECDH-ES+A256KW",
                "ECDH-ES+A192KW",
                "RSA-OAEP",
                "ECDH-ES+A128KW",
                "RSA-OAEP-256",
                "A128KW",
                "A256KW",
                "ECDH-ES",
                "dir",
                "A192KW"
              ],
              "supportedTokenIntrospectionResponseEncryptionEnc": [
                "A256GCM",
                "A192GCM",
                "A128GCM",
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512"
              ],
              "supportedTokenIntrospectionResponseSigningAlgorithms": [
                "PS384",
                "RS384",
                "EdDSA",
                "ES384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512",
                "PS256",
                "PS512",
                "RS512"
              ],
              "supportedUserInfoEncryptionAlgorithms": [
                "ECDH-ES+A256KW",
                "ECDH-ES+A192KW",
                "RSA-OAEP",
                "ECDH-ES+A128KW",
                "RSA-OAEP-256",
                "A128KW",
                "A256KW",
                "ECDH-ES",
                "dir",
                "A192KW"
              ],
              "supportedUserInfoEncryptionEnc": [
                "A256GCM",
                "A192GCM",
                "A128GCM",
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512"
              ],
              "supportedUserInfoSigningAlgorithms": [
                "ES384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512"
              ],
              "useForceAuthnForMaxAge": false,
              "useForceAuthnForPromptLogin": false
            },
            "cibaConfig": {
              "cibaAuthReqIdLifetime": 600,
              "cibaMinimumPollingInterval": 2,
              "supportedCibaSigningAlgorithms": [
                "ES256",
                "PS256"
              ]
            },
            "clientDynamicRegistrationConfig": {
              "allowDynamicRegistration": false,
              "dynamicClientRegistrationScope": "dynamic_client_registration",
              "dynamicClientRegistrationSoftwareStatementRequired": false,
              "generateRegistrationAccessTokens": true,
              "requiredSoftwareStatementAttestedAttributes": [
                "redirect_uris"
              ]
            },
            "consent": {
              "clientsCanSkipConsent": false,
              "enableRemoteConsent": false,
              "supportedRcsRequestEncryptionAlgorithms": [
                "ECDH-ES+A256KW",
                "ECDH-ES+A192KW",
                "RSA-OAEP",
                "ECDH-ES+A128KW",
                "RSA-OAEP-256",
                "A128KW",
                "A256KW",
                "ECDH-ES",
                "dir",
                "A192KW"
              ],
              "supportedRcsRequestEncryptionMethods": [
                "A256GCM",
                "A192GCM",
                "A128GCM",
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512"
              ],
              "supportedRcsRequestSigningAlgorithms": [
                "PS384",
                "ES384",
                "RS384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512",
                "PS256",
                "PS512",
                "RS512"
              ],
              "supportedRcsResponseEncryptionAlgorithms": [
                "ECDH-ES+A256KW",
                "ECDH-ES+A192KW",
                "ECDH-ES+A128KW",
                "RSA-OAEP",
                "RSA-OAEP-256",
                "A128KW",
                "A256KW",
                "ECDH-ES",
                "dir",
                "A192KW"
              ],
              "supportedRcsResponseEncryptionMethods": [
                "A256GCM",
                "A192GCM",
                "A128GCM",
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512"
              ],
              "supportedRcsResponseSigningAlgorithms": [
                "PS384",
                "ES384",
                "RS384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512",
                "PS256",
                "PS512",
                "RS512"
              ]
            },
            "coreOAuth2Config": {
              "accessTokenLifetime": 3600,
              "accessTokenMayActScript": "[Empty]",
              "codeLifetime": 120,
              "issueRefreshToken": true,
              "issueRefreshTokenOnRefreshedToken": true,
              "macaroonTokensEnabled": false,
              "oidcMayActScript": "[Empty]",
              "refreshTokenLifetime": 604800,
              "scopesPolicySet": "oauth2Scopes",
              "statelessTokensEnabled": false,
              "usePolicyEngineForScope": false
            },
            "coreOIDCConfig": {
              "jwtTokenLifetime": 3600,
              "oidcDiscoveryEndpointEnabled": false,
              "overrideableOIDCClaims": [],
              "supportedClaims": [],
              "supportedIDTokenEncryptionAlgorithms": [
                "ECDH-ES+A256KW",
                "ECDH-ES+A192KW",
                "RSA-OAEP",
                "ECDH-ES+A128KW",
                "RSA-OAEP-256",
                "A128KW",
                "A256KW",
                "ECDH-ES",
                "dir",
                "A192KW"
              ],
              "supportedIDTokenEncryptionMethods": [
                "A256GCM",
                "A192GCM",
                "A128GCM",
                "A128CBC-HS256",
                "A192CBC-HS384",
                "A256CBC-HS512"
              ],
              "supportedIDTokenSigningAlgorithms": [
                "PS384",
                "ES384",
                "RS384",
                "HS256",
                "HS512",
                "ES256",
                "RS256",
                "HS384",
                "ES512",
                "PS256",
                "PS512",
                "RS512"
              ]
            },
            "deviceCodeConfig": {
              "deviceCodeLifetime": 300,
              "devicePollInterval": 5,
              "deviceUserCodeCharacterSet": "234567ACDEFGHJKLMNPQRSTWXYZabcdefhijkmnopqrstwxyz",
              "deviceUserCodeLength": 8
            },
            "pluginsConfig": {
              "accessTokenEnricherClass": "org.forgerock.oauth2.core.plugins.registry.DefaultAccessTokenEnricher",
              "accessTokenModificationPluginType": "SCRIPTED",
              "accessTokenModificationScript": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
              "authorizeEndpointDataProviderClass": "org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider",
              "authorizeEndpointDataProviderPluginType": "JAVA",
              "authorizeEndpointDataProviderScript": "3f93ef6e-e54a-4393-aba1-f322656db28a",
              "evaluateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator",
              "evaluateScopePluginType": "JAVA",
              "evaluateScopeScript": "da56fe60-8b38-4c46-a405-d6b306d4b336",
              "oidcClaimsPluginType": "SCRIPTED",
              "oidcClaimsScript": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
              "userCodeGeneratorClass": "org.forgerock.oauth2.core.plugins.registry.DefaultUserCodeGenerator",
              "validateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator",
              "validateScopePluginType": "JAVA",
              "validateScopeScript": "25e6c06d-cf70-473b-bd28-26931edc476b"
            }
          },
          "_type": {
            "_id": "OAuth2Client",
            "collection": true,
            "name": "OAuth2 Clients"
          },
          "advancedOAuth2ClientConfig": {
            "clientUri": [],
            "contacts": [],
            "customProperties": [],
            "descriptions": [],
            "grantTypes": [
              "authorization_code"
            ],
            "isConsentImplied": false,
            "javascriptOrigins": [],
            "logoUri": [],
            "mixUpMitigation": false,
            "name": [],
            "policyUri": [],
            "refreshTokenGracePeriod": 0,
            "requestUris": [],
            "require_pushed_authorization_requests": false,
            "responseTypes": [
              "code",
              "token",
              "id_token",
              "code token",
              "token id_token",
              "code id_token",
              "code token id_token",
              "device_code",
              "device_code id_token"
            ],
            "sectorIdentifierUri": null,
            "softwareIdentity": null,
            "softwareVersion": null,
            "subjectType": "public",
            "tokenEndpointAuthMethod": "client_secret_basic",
            "tokenExchangeAuthLevel": 0,
            "tosURI": [],
            "updateAccessToken": null
          },
          "coreOAuth2ClientConfig": {
            "accessTokenLifetime": 0,
            "agentgroup": null,
            "authorizationCodeLifetime": 0,
            "clientName": [],
            "clientType": "Confidential",
            "defaultScopes": [],
            "loopbackInterfaceRedirection": false,
            "redirectionUris": [],
            "refreshTokenLifetime": 0,
            "scopes": [],
            "secretLabelIdentifier": null,
            "status": "Active"
          },
          "coreOpenIDClientConfig": {
            "backchannel_logout_session_required": false,
            "backchannel_logout_uri": null,
            "claims": [],
            "clientSessionUri": null,
            "defaultAcrValues": [],
            "defaultMaxAge": 600,
            "defaultMaxAgeEnabled": false,
            "jwtTokenLifetime": 0,
            "postLogoutRedirectUri": []
          },
          "coreUmaClientConfig": {
            "claimsRedirectionUris": []
          },
          "overrideOAuth2ClientConfig": {
            "accessTokenMayActScript": "[Empty]",
            "accessTokenModificationPluginType": "PROVIDER",
            "accessTokenModificationScript": "[Empty]",
            "authorizeEndpointDataProviderClass": "org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider",
            "authorizeEndpointDataProviderPluginType": "PROVIDER",
            "authorizeEndpointDataProviderScript": "[Empty]",
            "clientsCanSkipConsent": false,
            "enableRemoteConsent": false,
            "evaluateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator",
            "evaluateScopePluginType": "PROVIDER",
            "evaluateScopeScript": "[Empty]",
            "issueRefreshToken": true,
            "issueRefreshTokenOnRefreshedToken": true,
            "oidcClaimsPluginType": "PROVIDER",
            "oidcClaimsScript": "[Empty]",
            "oidcMayActScript": "[Empty]",
            "overrideableOIDCClaims": [],
            "providerOverridesEnabled": false,
            "remoteConsentServiceId": null,
            "scopesPolicySet": "oauth2Scopes",
            "statelessTokensEnabled": false,
            "tokenEncryptionEnabled": false,
            "useForceAuthnForMaxAge": false,
            "usePolicyEngineForScope": false,
            "validateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator",
            "validateScopePluginType": "PROVIDER",
            "validateScopeScript": "[Empty]"
          },
          "signEncOAuth2ClientConfig": {
            "authorizationResponseEncryptionAlgorithm": null,
            "authorizationResponseEncryptionMethod": null,
            "authorizationResponseSigningAlgorithm": "RS256",
            "clientJwtPublicKey": null,
            "idTokenEncryptionAlgorithm": "RSA-OAEP-256",
            "idTokenEncryptionEnabled": false,
            "idTokenEncryptionMethod": "A128CBC-HS256",
            "idTokenPublicEncryptionKey": null,
            "idTokenSignedResponseAlg": "RS256",
            "jwkSet": null,
            "jwkStoreCacheMissCacheTime": 60000,
            "jwksCacheTimeout": 3600000,
            "jwksUri": null,
            "mTLSCertificateBoundAccessTokens": false,
            "mTLSSubjectDN": null,
            "mTLSTrustedCert": null,
            "publicKeyLocation": "jwks_uri",
            "requestParameterEncryptedAlg": null,
            "requestParameterEncryptedEncryptionAlgorithm": "A128CBC-HS256",
            "requestParameterSignedAlg": null,
            "tokenEndpointAuthSigningAlgorithm": "RS256",
            "tokenIntrospectionEncryptedResponseAlg": "RSA-OAEP-256",
            "tokenIntrospectionEncryptedResponseEncryptionAlgorithm": "A128CBC-HS256",
            "tokenIntrospectionResponseFormat": "JSON",
            "tokenIntrospectionSignedResponseAlg": "RS256",
            "userinfoEncryptedResponseAlg": null,
            "userinfoEncryptedResponseEncryptionAlgorithm": "A128CBC-HS256",
            "userinfoResponseFormat": "JSON",
            "userinfoSignedResponseAlg": null
          }
        }
      },
      "applicationTypes": {
        "iPlanetAMWebAgentService": {
          "_id": "iPlanetAMWebAgentService",
          "actions": {
            "DELETE": true,
            "GET": true,
            "HEAD": true,
            "OPTIONS": true,
            "PATCH": true,
            "POST": true,
            "PUT": true
          },
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "iPlanetAMWebAgentService",
          "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
          "saveIndex": "org.forgerock.openam.entitlement.indextree.TreeSaveIndex",
          "searchIndex": "org.forgerock.openam.entitlement.indextree.TreeSearchIndex"
        },
        "sunAMDelegationService": {
          "_id": "sunAMDelegationService",
          "actions": {
            "DELEGATE": true,
            "MODIFY": true,
            "READ": true
          },
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "sunAMDelegationService",
          "resourceComparator": "com.sun.identity.entitlement.RegExResourceName",
          "saveIndex": "com.sun.identity.entitlement.opensso.DelegationResourceNameIndexGenerator",
          "searchIndex": "com.sun.identity.entitlement.opensso.DelegationResourceNameSplitter"
        },
        "umaApplicationType": {
          "_id": "umaApplicationType",
          "actions": {},
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "umaApplicationType",
          "resourceComparator": "org.forgerock.openam.uma.UmaPolicyResourceMatcher",
          "saveIndex": "org.forgerock.openam.uma.UmaPolicySaveIndex",
          "searchIndex": "org.forgerock.openam.uma.UmaPolicySearchIndex"
        }
      },
      "authentication": {
        "_id": "",
        "_type": {
          "_id": "EMPTY",
          "collection": false,
          "name": "Core"
        },
        "accountlockout": {
          "lockoutDuration": 0,
          "lockoutDurationMultiplier": 1,
          "lockoutWarnUserCount": 0,
          "loginFailureCount": 5,
          "loginFailureDuration": 300,
          "loginFailureLockoutMode": false,
          "storeInvalidAttemptsInDataStore": true
        },
        "core": {
          "adminAuthModule": "ldapService",
          "orgConfig": "ldapService"
        },
        "general": {
          "defaultAuthLevel": 0,
          "identityType": [
            "agent",
            "user"
          ],
          "locale": "en_US",
          "statelessSessionsEnabled": false,
          "twoFactorRequired": false,
          "userStatusCallbackPlugins": []
        },
        "postauthprocess": {
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": [
            "/am/console"
          ],
          "userAttributeSessionMapping": [],
          "usernameGeneratorClass": "com.sun.identity.authentication.spi.DefaultUserIDGenerator",
          "usernameGeneratorEnabled": true
        },
        "security": {
          "addClearSiteDataHeader": true,
          "moduleBasedAuthEnabled": true,
          "sharedSecret": null,
          "zeroPageLoginAllowedWithoutReferrer": true,
          "zeroPageLoginEnabled": false,
          "zeroPageLoginReferrerWhiteList": []
        },
        "trees": {
          "authenticationSessionsMaxDuration": 5,
          "authenticationSessionsStateManagement": "JWT",
          "authenticationSessionsWhitelist": false,
          "authenticationTreeCookieHttpOnly": true,
          "suspendedAuthenticationTimeout": 5
        },
        "userprofile": {
          "aliasAttributeName": [
            "uid"
          ],
          "defaultRole": [],
          "dynamicProfileCreation": "false"
        }
      },
      "authenticationChains": {
        "amsterService": {
          "_id": "amsterService",
          "_type": {
            "_id": "EMPTY",
            "collection": true,
            "name": "Authentication Configuration"
          },
          "authChainConfiguration": [
            {
              "criteria": "REQUIRED",
              "module": "Amster",
              "options": {}
            }
          ],
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": []
        },
        "ldapService": {
          "_id": "ldapService",
          "_type": {
            "_id": "EMPTY",
            "collection": true,
            "name": "Authentication Configuration"
          },
          "authChainConfiguration": [
            {
              "criteria": "REQUIRED",
              "module": "DataStore",
              "options": {}
            }
          ],
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": []
        }
      },
      "authenticationModules": {
        "amster": {
          "_id": "amster",
          "_type": {
            "_id": "amster",
            "collection": true,
            "name": "ForgeRock Amster"
          },
          "authenticationLevel": 0,
          "authorizedKeys": "/home/prestonhales/am/security/keys/amster/authorized_keys",
          "enabled": true
        },
        "datastore": {
          "_id": "datastore",
          "_type": {
            "_id": "datastore",
            "collection": true,
            "name": "Data Store"
          },
          "authenticationLevel": 0
        },
        "federation": {
          "_id": "federation",
          "_type": {
            "_id": "federation",
            "collection": true,
            "name": "Federation"
          },
          "authenticationLevel": 0
        },
        "hotp": {
          "_id": "hotp",
          "_type": {
            "_id": "hotp",
            "collection": true,
            "name": "HOTP"
          },
          "authenticationLevel": 0,
          "autoSendOTP": false,
          "otpDeliveryMethod": "SMS and E-mail",
          "otpLength": "8",
          "otpMaxRetry": 3,
          "otpValidityDuration": 5,
          "smsGatewayClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
          "smtpFromAddress": "no-reply@openam.org",
          "smtpHostPort": 465,
          "smtpHostname": "smtp.gmail.com",
          "smtpSslEnabled": "SSL",
          "smtpUserPassword": null,
          "smtpUsername": "opensso.sun",
          "userProfileEmailAttribute": "mail",
          "userProfileTelephoneAttribute": "telephoneNumber"
        },
        "ldap": {
          "_id": "ldap",
          "_type": {
            "_id": "ldap",
            "collection": true,
            "name": "LDAP"
          },
          "authenticationLevel": 0,
          "beheraPasswordPolicySupportEnabled": true,
          "connectionHeartbeatInterval": 10,
          "connectionHeartbeatTimeUnit": "SECONDS",
          "minimumPasswordLength": "8",
          "openam-auth-ldap-connection-mode": "LDAPS",
          "operationTimeout": 0,
          "primaryLdapServer": [
            "localhost:50636"
          ],
          "profileAttributeMappings": [],
          "returnUserDN": true,
          "searchScope": "SUBTREE",
          "secondaryLdapServer": [],
          "stopLdapbindAfterInmemoryLockedEnabled": false,
          "trustAllServerCertificates": false,
          "userBindDN": "cn=Directory Manager",
          "userBindPassword": null,
          "userProfileRetrievalAttribute": "uid",
          "userSearchAttributes": [
            "uid"
          ],
          "userSearchStartDN": [
            "dc=openam,dc=forgerock,dc=org"
          ]
        },
        "oath": {
          "_id": "oath",
          "_type": {
            "_id": "oath",
            "collection": true,
            "name": "OATH"
          },
          "addChecksum": "False",
          "authenticationLevel": 0,
          "forgerock-oath-maximum-clock-drift": 0,
          "forgerock-oath-sharedsecret-implementation-class": "org.forgerock.openam.authentication.modules.oath.plugins.DefaultSharedSecretProvider",
          "hotpWindowSize": 100,
          "minimumSecretKeyLength": "32",
          "oathAlgorithm": "HOTP",
          "oathOtpMaxRetry": 3,
          "passwordLength": "6",
          "stepsInWindow": 2,
          "timeStepSize": 30,
          "truncationOffset": -1
        },
        "sae": {
          "_id": "sae",
          "_type": {
            "_id": "sae",
            "collection": true,
            "name": "SAE"
          },
          "authenticationLevel": 0
        }
      },
      "conditionTypes": {
        "AMIdentityMembership": {
          "_id": "AMIdentityMembership",
          "config": {
            "properties": {
              "amIdentityName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AMIdentityMembership"
        },
        "AND": {
          "_id": "AND",
          "config": {
            "properties": {
              "conditions": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "AND"
        },
        "AuthLevel": {
          "_id": "AuthLevel",
          "config": {
            "properties": {
              "authLevel": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthLevel"
        },
        "AuthScheme": {
          "_id": "AuthScheme",
          "config": {
            "properties": {
              "applicationIdleTimeout": {
                "type": "integer"
              },
              "applicationName": {
                "type": "string"
              },
              "authScheme": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthScheme"
        },
        "AuthenticateToRealm": {
          "_id": "AuthenticateToRealm",
          "config": {
            "properties": {
              "authenticateToRealm": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticateToRealm"
        },
        "AuthenticateToService": {
          "_id": "AuthenticateToService",
          "config": {
            "properties": {
              "authenticateToService": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticateToService"
        },
        "IPv4": {
          "_id": "IPv4",
          "config": {
            "properties": {
              "dnsName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "endIp": {
                "type": "string"
              },
              "startIp": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "IPv4"
        },
        "IPv6": {
          "_id": "IPv6",
          "config": {
            "properties": {
              "dnsName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "endIp": {
                "type": "string"
              },
              "startIp": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "IPv6"
        },
        "LDAPFilter": {
          "_id": "LDAPFilter",
          "config": {
            "properties": {
              "ldapFilter": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "LDAPFilter"
        },
        "LEAuthLevel": {
          "_id": "LEAuthLevel",
          "config": {
            "properties": {
              "authLevel": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "LEAuthLevel"
        },
        "NOT": {
          "_id": "NOT",
          "config": {
            "properties": {
              "condition": {
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "NOT"
        },
        "OAuth2Scope": {
          "_id": "OAuth2Scope",
          "config": {
            "properties": {
              "requiredScopes": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "OAuth2Scope"
        },
        "OR": {
          "_id": "OR",
          "config": {
            "properties": {
              "conditions": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "OR"
        },
        "Policy": {
          "_id": "Policy",
          "config": {
            "properties": {
              "className": {
                "type": "string"
              },
              "properties": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Policy"
        },
        "ResourceEnvIP": {
          "_id": "ResourceEnvIP",
          "config": {
            "properties": {
              "resourceEnvIPConditionValue": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "ResourceEnvIP"
        },
        "Script": {
          "_id": "Script",
          "config": {
            "properties": {
              "scriptId": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Script"
        },
        "Session": {
          "_id": "Session",
          "config": {
            "properties": {
              "maxSessionTime": {
                "type": "integer"
              },
              "terminateSession": {
                "required": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Session"
        },
        "SessionProperty": {
          "_id": "SessionProperty",
          "config": {
            "properties": {
              "ignoreValueCase": {
                "required": true,
                "type": "boolean"
              },
              "properties": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "SessionProperty"
        },
        "SimpleTime": {
          "_id": "SimpleTime",
          "config": {
            "properties": {
              "endDate": {
                "type": "string"
              },
              "endDay": {
                "type": "string"
              },
              "endTime": {
                "type": "string"
              },
              "enforcementTimeZone": {
                "type": "string"
              },
              "startDate": {
                "type": "string"
              },
              "startDay": {
                "type": "string"
              },
              "startTime": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "SimpleTime"
        },
        "Transaction": {
          "_id": "Transaction",
          "config": {
            "properties": {
              "authenticationStrategy": {
                "type": "string"
              },
              "strategySpecifier": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Transaction"
        }
      },
      "decisionCombiners": {
        "DenyOverride": {
          "_id": "DenyOverride",
          "title": "DenyOverride"
        }
      },
      "idp": {
        "Google Test": {
          "_id": "Google Test",
          "_type": {
            "_id": "googleConfig",
            "collection": true,
            "name": "Client configuration for Google."
          },
          "acrValues": [],
          "authenticationIdKey": "sub",
          "authorizationEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
          "clientAuthenticationMethod": "CLIENT_SECRET_POST",
          "clientId": "test",
          "enableNativeNonce": true,
          "enabled": true,
          "encryptJwtRequestParameter": false,
          "encryptedIdTokens": false,
          "issuer": "https://accounts.google.com",
          "issuerComparisonCheckType": "EXACT",
          "jwtEncryptionAlgorithm": "NONE",
          "jwtEncryptionMethod": "NONE",
          "jwtRequestParameterOption": "NONE",
          "jwtSigningAlgorithm": "NONE",
          "pkceMethod": "S256",
          "privateKeyJwtExpTime": 600,
          "redirectURI": "https://testurl.com",
          "responseMode": "DEFAULT",
          "revocationCheckOptions": [],
          "scopeDelimiter": " ",
          "scopes": [
            "openid",
            "profile",
            "email"
          ],
          "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
          "transform": "58d29080-4563-480b-89bb-1e7719776a21",
          "uiConfig": {
            "buttonClass": "",
            "buttonCustomStyle": "background-color: #fff; color: #757575; border-color: #ddd;",
            "buttonCustomStyleHover": "color: #6d6d6d; background-color: #eee; border-color: #ccc;",
            "buttonDisplayName": "Google",
            "buttonImage": "images/g-logo.png",
            "iconBackground": "#4184f3",
            "iconClass": "fa-google",
            "iconFontColor": "white"
          },
          "useCustomTrustStore": false,
          "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo",
          "userInfoResponseType": "JSON",
          "wellKnownEndpoint": "https://accounts.google.com/.well-known/openid-configuration"
        }
      },
      "policy": {
        "Test Policy": {
          "_id": "Test Policy",
          "actionValues": {},
          "active": true,
          "applicationName": "iPlanetAMWebAgentService",
          "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "creationDate": "2024-06-27T17:07:04.220Z",
          "description": "",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": "2024-10-09T21:36:26.771Z",
          "name": "Test Policy",
          "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
          "resources": [
            "*://*:*/*?*"
          ],
          "subject": {
            "subjects": [
              {
                "type": "NONE"
              },
              {
                "subjectValues": [
                  "id=phales,ou=user,dc=openam,dc=forgerock,dc=org"
                ],
                "type": "Identity"
              }
            ],
            "type": "AND"
          }
        }
      },
      "policyset": {
        "iPlanetAMWebAgentService": {
          "applicationType": "iPlanetAMWebAgentService",
          "attributeNames": [],
          "conditions": [
            "AND",
            "OR",
            "NOT",
            "AMIdentityMembership",
            "AuthLevel",
            "LEAuthLevel",
            "AuthScheme",
            "AuthenticateToRealm",
            "AuthenticateToService",
            "IPv4",
            "IPv6",
            "LDAPFilter",
            "OAuth2Scope",
            "ResourceEnvIP",
            "Session",
            "SessionProperty",
            "SimpleTime",
            "Script",
            "Transaction"
          ],
          "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
          "creationDate": 1718897366825,
          "description": "The built-in Application used by OpenAM Policy Agents.",
          "displayName": "Default Policy Set",
          "editable": true,
          "entitlementCombiner": "DenyOverride",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509786744,
          "name": "iPlanetAMWebAgentService",
          "resourceComparator": null,
          "resourceTypeUuids": [
            "76656a38-5f8e-401b-83aa-4ccb74ce88d2"
          ],
          "saveIndex": null,
          "searchIndex": null,
          "subjects": [
            "AND",
            "OR",
            "NOT",
            "AuthenticatedUsers",
            "Identity",
            "JwtClaim",
            "NONE"
          ]
        },
        "oauth2Scopes": {
          "applicationType": "iPlanetAMWebAgentService",
          "attributeNames": [],
          "conditions": [
            "AND",
            "OR",
            "NOT",
            "AMIdentityMembership",
            "AuthLevel",
            "LEAuthLevel",
            "AuthScheme",
            "AuthenticateToRealm",
            "AuthenticateToService",
            "IPv4",
            "IPv6",
            "LDAPFilter",
            "OAuth2Scope",
            "ResourceEnvIP",
            "Session",
            "SessionProperty",
            "SimpleTime",
            "Script",
            "Transaction"
          ],
          "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
          "creationDate": 1718897366918,
          "description": "The built-in Application used by the OAuth2 scope authorization process.",
          "displayName": "Default OAuth2 Scopes Policy Set",
          "editable": true,
          "entitlementCombiner": "DenyOverride",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509786761,
          "name": "oauth2Scopes",
          "resourceComparator": null,
          "resourceTypeUuids": [
            "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b"
          ],
          "saveIndex": null,
          "searchIndex": null,
          "subjects": [
            "AND",
            "OR",
            "NOT",
            "AuthenticatedUsers",
            "Identity",
            "JwtClaim",
            "NONE"
          ]
        }
      },
      "resourcetype": {
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2": {
          "actions": {
            "DELETE": true,
            "GET": true,
            "HEAD": true,
            "OPTIONS": true,
            "PATCH": true,
            "POST": true,
            "PUT": true
          },
          "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
          "creationDate": 1422892465848,
          "description": "The built-in URL Resource Type available to OpenAM Policies.",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509786629,
          "name": "URL",
          "patterns": [
            "*://*:*/*",
            "*://*:*/*?*"
          ],
          "uuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2"
        },
        "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b": {
          "actions": {
            "GRANT": true
          },
          "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
          "creationDate": 1517161800564,
          "description": "The built-in OAuth2 Scope Resource Type for OAuth2 policy-provided scope.",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509786611,
          "name": "OAuth2 Scope",
          "patterns": [
            "*://*:*/*",
            "*://*:*/*?*",
            "*"
          ],
          "uuid": "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b"
        }
      },
      "saml": {
        "cot": {
          "Test COT": {
            "_id": "Test COT",
            "_type": {
              "_id": "circlesoftrust",
              "collection": true,
              "name": "Circle of Trust"
            },
            "status": "active",
            "trustedProviders": []
          }
        },
        "hosted": {
          "VGVzdCBFbnRpdHk": {
            "_id": "VGVzdCBFbnRpdHk",
            "entityId": "Test Entity",
            "identityProvider": {
              "advanced": {
                "ecpConfiguration": {
                  "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper"
                },
                "idpAdapter": {
                  "idpAdapterScript": "[Empty]"
                },
                "idpFinderImplementation": {},
                "relayStateUrlList": {},
                "saeConfiguration": {
                  "idpUrl": "http://localhost:8080/am/idpsaehandler/metaAlias/test"
                },
                "sessionSynchronization": {}
              },
              "assertionContent": {
                "assertionCache": {},
                "assertionTime": {
                  "effectiveTime": 600,
                  "notBeforeTimeSkew": 600
                },
                "authenticationContext": {
                  "authContextItems": [
                    {
                      "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                      "level": 0
                    }
                  ],
                  "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper"
                },
                "basicAuthentication": {},
                "nameIdFormat": {
                  "nameIdFormatList": [
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"
                  ],
                  "nameIdValueMap": [
                    {
                      "binary": false,
                      "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                      "value": "mail"
                    }
                  ]
                },
                "signingAndEncryption": {
                  "encryption": {},
                  "requestResponseSigning": {},
                  "secretIdAndAlgorithms": {}
                }
              },
              "assertionProcessing": {
                "accountMapper": {
                  "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper"
                },
                "attributeMapper": {
                  "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
                  "attributeMapperScript": "[Empty]"
                },
                "localConfiguration": {}
              },
              "services": {
                "assertionIdRequest": [
                  {
                    "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                    "location": "http://localhost:8080/am/AIDReqSoap/IDPRole/metaAlias/test"
                  },
                  {
                    "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                    "location": "http://localhost:8080/am/AIDReqUri/IDPRole/metaAlias/test"
                  }
                ],
                "metaAlias": "/test",
                "nameIdMapping": [
                  {
                    "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                    "location": "http://localhost:8080/am/NIMSoap/metaAlias/test"
                  }
                ],
                "serviceAttributes": {
                  "artifactResolutionService": [
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                      "location": "http://localhost:8080/am/ArtifactResolver/metaAlias/test"
                    }
                  ],
                  "nameIdService": [
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                      "location": "http://localhost:8080/am/IDPMniRedirect/metaAlias/test",
                      "responseLocation": "http://localhost:8080/am/IDPMniRedirect/metaAlias/test"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                      "location": "http://localhost:8080/am/IDPMniPOST/metaAlias/test",
                      "responseLocation": "http://localhost:8080/am/IDPMniPOST/metaAlias/test"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                      "location": "http://localhost:8080/am/IDPMniSoap/metaAlias/test"
                    }
                  ],
                  "singleLogoutService": [
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                      "location": "http://localhost:8080/am/IDPSloRedirect/metaAlias/test",
                      "responseLocation": "http://localhost:8080/am/IDPSloRedirect/metaAlias/test"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                      "location": "http://localhost:8080/am/IDPSloPOST/metaAlias/test",
                      "responseLocation": "http://localhost:8080/am/IDPSloPOST/metaAlias/test"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                      "location": "http://localhost:8080/am/IDPSloSoap/metaAlias/test"
                    }
                  ],
                  "singleSignOnService": [
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                      "location": "http://localhost:8080/am/SSORedirect/metaAlias/test"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                      "location": "http://localhost:8080/am/SSOPOST/metaAlias/test"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                      "location": "http://localhost:8080/am/SSOSoap/metaAlias/test"
                    }
                  ]
                }
              }
            },
            "serviceProvider": {
              "advanced": {
                "ecpConfiguration": {
                  "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder"
                },
                "idpProxy": {},
                "relayStateUrlList": {},
                "saeConfiguration": {
                  "spUrl": "http://localhost:8080/am/spsaehandler/metaAlias/test2"
                }
              },
              "assertionContent": {
                "assertionTimeSkew": 300,
                "authenticationContext": {
                  "authContextItems": [
                    {
                      "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                      "defaultItem": true,
                      "level": 0
                    }
                  ],
                  "authenticationComparisonType": "Exact",
                  "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
                  "includeRequestedAuthenticationContext": true
                },
                "basicAuthentication": {},
                "nameIdFormat": {
                  "nameIdFormatList": [
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                    "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                    "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName"
                  ]
                },
                "signingAndEncryption": {
                  "encryption": {},
                  "requestResponseSigning": {},
                  "secretIdAndAlgorithms": {}
                }
              },
              "assertionProcessing": {
                "accountMapping": {
                  "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper"
                },
                "adapter": {
                  "spAdapterScript": "[Empty]"
                },
                "attributeMapper": {
                  "attributeMap": [
                    {
                      "key": "*",
                      "value": "*"
                    }
                  ],
                  "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper"
                },
                "autoFederation": {},
                "responseArtifactMessageEncoding": {
                  "encoding": "URI"
                },
                "url": {}
              },
              "services": {
                "metaAlias": "/test2",
                "serviceAttributes": {
                  "assertionConsumerService": [
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                      "index": 0,
                      "isDefault": true,
                      "location": "http://localhost:8080/am/Consumer/metaAlias/test2"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                      "index": 1,
                      "isDefault": false,
                      "location": "http://localhost:8080/am/Consumer/metaAlias/test2"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                      "index": 2,
                      "isDefault": false,
                      "location": "http://localhost:8080/am/Consumer/ECP/metaAlias/test2"
                    }
                  ],
                  "nameIdService": [
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                      "location": "http://localhost:8080/am/SPMniRedirect/metaAlias/test2",
                      "responseLocation": "http://localhost:8080/am/SPMniRedirect/metaAlias/test2"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                      "location": "http://localhost:8080/am/SPMniPOST/metaAlias/test2",
                      "responseLocation": "http://localhost:8080/am/SPMniPOST/metaAlias/test2"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                      "location": "http://localhost:8080/am/SPMniSoap/metaAlias/test2",
                      "responseLocation": "http://localhost:8080/am/SPMniSoap/metaAlias/test2"
                    }
                  ],
                  "singleLogoutService": [
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                      "location": "http://localhost:8080/am/SPSloRedirect/metaAlias/test2",
                      "responseLocation": "http://localhost:8080/am/SPSloRedirect/metaAlias/test2"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                      "location": "http://localhost:8080/am/SPSloPOST/metaAlias/test2",
                      "responseLocation": "http://localhost:8080/am/SPSloPOST/metaAlias/test2"
                    },
                    {
                      "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                      "location": "http://localhost:8080/am/SPSloSoap/metaAlias/test2"
                    }
                  ]
                }
              }
            }
          }
        },
        "metadata": {
          "VGVzdCBFbnRpdHk": [
            "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>",
            "<EntityDescriptor entityID=\"Test Entity\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:query=\"urn:oasis:names:tc:SAML:metadata:ext:query\" xmlns:mdattr=\"urn:oasis:names:tc:SAML:metadata:attribute\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:xenc=\"http://www.w3.org/2001/04/xmlenc#\" xmlns:xenc11=\"http://www.w3.org/2009/xmlenc11#\" xmlns:alg=\"urn:oasis:names:tc:SAML:metadata:algsupport\" xmlns:x509qry=\"urn:oasis:names:tc:SAML:metadata:X509:query\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">",
            "    <IDPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">",
            "        <KeyDescriptor use=\"signing\">",
            "            <ds:KeyInfo>",
            "                <ds:X509Data>",
            "                    <ds:X509Certificate>",
            "MIIDdzCCAl+gAwIBAgIES3eb+zANBgkqhkiG9w0BAQsFADBsMRAwDgYDVQQGEwdVbmtub3duMRAw",
            "DgYDVQQIEwdVbmtub3duMRAwDgYDVQQHEwdVbmtub3duMRAwDgYDVQQKEwdVbmtub3duMRAwDgYD",
            "VQQLEwdVbmtub3duMRAwDgYDVQQDEwdVbmtub3duMB4XDTE2MDUyNDEzNDEzN1oXDTI2MDUyMjEz",
            "NDEzN1owbDEQMA4GA1UEBhMHVW5rbm93bjEQMA4GA1UECBMHVW5rbm93bjEQMA4GA1UEBxMHVW5r",
            "bm93bjEQMA4GA1UEChMHVW5rbm93bjEQMA4GA1UECxMHVW5rbm93bjEQMA4GA1UEAxMHVW5rbm93",
            "bjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANdIhkOZeSHagT9ZecG+QQwWaUsi7OMv",
            "1JvpBr/7HtAZEZMDGWrxg/zao6vMd/nyjSOOZ1OxOwjgIfII5+iwl37oOexEH4tIDoCoToVXC5iq",
            "iBFz5qnmoLzJ3bF1iMupPFjz8Ac0pDeTwyygVyhv19QcFbzhPdu+p68epSatwoDW5ohIoaLzbf+o",
            "OaQsYkmqyJNrmht091XuoVCazNFt+UJqqzTPay95Wj4F7Qrs+LCSTd6xp0Kv9uWG1GsFvS9TE1W6",
            "isVosjeVm16FlIPLaNQ4aEJ18w8piDIRWuOTUy4cbXR/Qg6a11l1gWls6PJiBXrOciOACVuGUoNT",
            "zztlCUkCAwEAAaMhMB8wHQYDVR0OBBYEFMm4/1hF4WEPYS5gMXRmmH0gs6XjMA0GCSqGSIb3DQEB",
            "CwUAA4IBAQDVH/Md9lCQWxbSbie5lPdPLB72F4831glHlaqms7kzAM6IhRjXmd0QTYq3Ey1J88KS",
            "Df8A0HUZefhudnFaHmtxFv0SF5VdMUY14bJ9UsxJ5f4oP4CVh57fHK0w+EaKGGIw6TQEkL5L/+5Q",
            "ZZAywKgPz67A3o+uk45aKpF3GaNWjGRWEPqcGkyQ0sIC2o7FUTV+MV1KHDRuBgreRCEpqMoY5XGX",
            "e/IJc1EJLFDnsjIOQU1rrUzfM+WP/DigEQTPpkKWHJpouP+LLrGRj2ziYVbBDveP8KtHvLFsnexA",
            "/TidjOOxChKSLT9LYFyQqsvUyCagBb4aLs009kbW6inN8zA6",
            "                    </ds:X509Certificate>",
            "                </ds:X509Data>",
            "            </ds:KeyInfo>",
            "        </KeyDescriptor>",
            "        <KeyDescriptor use=\"encryption\">",
            "            <ds:KeyInfo>",
            "                <ds:X509Data>",
            "                    <ds:X509Certificate>",
            "MIIDYTCCAkmgAwIBAgIEFt4OQjANBgkqhkiG9w0BAQsFADBhMQswCQYDVQQGEwJVSzEQMA4GA1UE",
            "CBMHQnJpc3RvbDEQMA4GA1UEBxMHQnJpc3RvbDESMBAGA1UEChMJRm9yZ2VSb2NrMQswCQYDVQQL",
            "EwJBTTENMAsGA1UEAxMEdGVzdDAeFw0xODA0MDMxNDIwNThaFw0yODAzMzExNDIwNThaMGExCzAJ",
            "BgNVBAYTAlVLMRAwDgYDVQQIEwdCcmlzdG9sMRAwDgYDVQQHEwdCcmlzdG9sMRIwEAYDVQQKEwlG",
            "b3JnZVJvY2sxCzAJBgNVBAsTAkFNMQ0wCwYDVQQDEwR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOC",
            "AQ8AMIIBCgKCAQEAi7t6m4d/02dZ8dOe+DFcuUYiOWueHlNkFwdUfOs06eUETOV6Y9WCXu3D71db",
            "F0Fhou69ez5c3HAZrSVS2qC1Htw9NkVlLDeED7qwQQMmSr7RFYNQ6BYekAtn/ScFHpq8Tx4BzhcD",
            "b6P0+PHCo+bkQedxwhbMD412KSM2UAVQaZ+TW+ngdaaVEs1Cgl4b8xxZ9ZuApXZfpddNdgvjBeeY",
            "QbZnaqU3b0P5YE0s0YvIQqYmTjxh4RyLfkt6s/BS1obWUOC+0ChRWlpWE7QTEVEWJP5yt8hgZ5Me",
            "cTmBi3yZ/0ts3NsL83413NdbWYh+ChtP696mZbJozflF8jR9pewTbQIDAQABoyEwHzAdBgNVHQ4E",
            "FgQUDAvAglxsoXuEwI2NT1hFtVww2SUwDQYJKoZIhvcNAQELBQADggEBADiHqUwRlq1xdHP7S387",
            "vMLOr+/OUgNvDUogeyrpdj5vFve/CBxSFlcoY215eE0xzj2+bQoe5To3s8CWkP9hqB3EdhaRBfCr",
            "d8Vpvu8xBZcxQzmqwNjmeDrxNpKes717t05fDGgygUM8xIBs29JwRzHzf7e0ByJjn9fvlUjDAGZ7",
            "emCTN382F2iOeLC2ibVl7dpmsWZTINhQRbmq5L4ztOcjITk5WZnBF439oRRn68fWZVkOv2UqaKbk",
            "uMjgotNuot+ebHtOchEiwKz8VAK7O3/IgD6rfNBfz+c/WeoPcrfQBR4zfizw/ioR115RSywifzlw",
            "q5yziqyU04eP4wLr3cM=",
            "                    </ds:X509Certificate>",
            "                </ds:X509Data>",
            "            </ds:KeyInfo>",
            "            <EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\">",
            "                <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>",
            "            </EncryptionMethod>",
            "            <EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#aes128-cbc\">",
            "                <xenc:KeySize>128</xenc:KeySize>",
            "            </EncryptionMethod>",
            "        </KeyDescriptor>",
            "        <ArtifactResolutionService index=\"0\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/ArtifactResolver/metaAlias/test\"/>",
            "        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost:8080/am/IDPSloRedirect/metaAlias/test\" ResponseLocation=\"http://localhost:8080/am/IDPSloRedirect/metaAlias/test\"/>",
            "        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost:8080/am/IDPSloPOST/metaAlias/test\" ResponseLocation=\"http://localhost:8080/am/IDPSloPOST/metaAlias/test\"/>",
            "        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/IDPSloSoap/metaAlias/test\"/>",
            "        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost:8080/am/IDPMniRedirect/metaAlias/test\" ResponseLocation=\"http://localhost:8080/am/IDPMniRedirect/metaAlias/test\"/>",
            "        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost:8080/am/IDPMniPOST/metaAlias/test\" ResponseLocation=\"http://localhost:8080/am/IDPMniPOST/metaAlias/test\"/>",
            "        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/IDPMniSoap/metaAlias/test\"/>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</NameIDFormat>",
            "        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost:8080/am/SSORedirect/metaAlias/test\"/>",
            "        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost:8080/am/SSOPOST/metaAlias/test\"/>",
            "        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/SSOSoap/metaAlias/test\"/>",
            "        <NameIDMappingService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/NIMSoap/metaAlias/test\"/>",
            "        <AssertionIDRequestService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/AIDReqSoap/IDPRole/metaAlias/test\"/>",
            "        <AssertionIDRequestService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:URI\" Location=\"http://localhost:8080/am/AIDReqUri/IDPRole/metaAlias/test\"/>",
            "    </IDPSSODescriptor>",
            "    <SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">",
            "        <KeyDescriptor use=\"signing\">",
            "            <ds:KeyInfo>",
            "                <ds:X509Data>",
            "                    <ds:X509Certificate>",
            "MIIDdzCCAl+gAwIBAgIES3eb+zANBgkqhkiG9w0BAQsFADBsMRAwDgYDVQQGEwdVbmtub3duMRAw",
            "DgYDVQQIEwdVbmtub3duMRAwDgYDVQQHEwdVbmtub3duMRAwDgYDVQQKEwdVbmtub3duMRAwDgYD",
            "VQQLEwdVbmtub3duMRAwDgYDVQQDEwdVbmtub3duMB4XDTE2MDUyNDEzNDEzN1oXDTI2MDUyMjEz",
            "NDEzN1owbDEQMA4GA1UEBhMHVW5rbm93bjEQMA4GA1UECBMHVW5rbm93bjEQMA4GA1UEBxMHVW5r",
            "bm93bjEQMA4GA1UEChMHVW5rbm93bjEQMA4GA1UECxMHVW5rbm93bjEQMA4GA1UEAxMHVW5rbm93",
            "bjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANdIhkOZeSHagT9ZecG+QQwWaUsi7OMv",
            "1JvpBr/7HtAZEZMDGWrxg/zao6vMd/nyjSOOZ1OxOwjgIfII5+iwl37oOexEH4tIDoCoToVXC5iq",
            "iBFz5qnmoLzJ3bF1iMupPFjz8Ac0pDeTwyygVyhv19QcFbzhPdu+p68epSatwoDW5ohIoaLzbf+o",
            "OaQsYkmqyJNrmht091XuoVCazNFt+UJqqzTPay95Wj4F7Qrs+LCSTd6xp0Kv9uWG1GsFvS9TE1W6",
            "isVosjeVm16FlIPLaNQ4aEJ18w8piDIRWuOTUy4cbXR/Qg6a11l1gWls6PJiBXrOciOACVuGUoNT",
            "zztlCUkCAwEAAaMhMB8wHQYDVR0OBBYEFMm4/1hF4WEPYS5gMXRmmH0gs6XjMA0GCSqGSIb3DQEB",
            "CwUAA4IBAQDVH/Md9lCQWxbSbie5lPdPLB72F4831glHlaqms7kzAM6IhRjXmd0QTYq3Ey1J88KS",
            "Df8A0HUZefhudnFaHmtxFv0SF5VdMUY14bJ9UsxJ5f4oP4CVh57fHK0w+EaKGGIw6TQEkL5L/+5Q",
            "ZZAywKgPz67A3o+uk45aKpF3GaNWjGRWEPqcGkyQ0sIC2o7FUTV+MV1KHDRuBgreRCEpqMoY5XGX",
            "e/IJc1EJLFDnsjIOQU1rrUzfM+WP/DigEQTPpkKWHJpouP+LLrGRj2ziYVbBDveP8KtHvLFsnexA",
            "/TidjOOxChKSLT9LYFyQqsvUyCagBb4aLs009kbW6inN8zA6",
            "                    </ds:X509Certificate>",
            "                </ds:X509Data>",
            "            </ds:KeyInfo>",
            "        </KeyDescriptor>",
            "        <KeyDescriptor use=\"encryption\">",
            "            <ds:KeyInfo>",
            "                <ds:X509Data>",
            "                    <ds:X509Certificate>",
            "MIIDYTCCAkmgAwIBAgIEFt4OQjANBgkqhkiG9w0BAQsFADBhMQswCQYDVQQGEwJVSzEQMA4GA1UE",
            "CBMHQnJpc3RvbDEQMA4GA1UEBxMHQnJpc3RvbDESMBAGA1UEChMJRm9yZ2VSb2NrMQswCQYDVQQL",
            "EwJBTTENMAsGA1UEAxMEdGVzdDAeFw0xODA0MDMxNDIwNThaFw0yODAzMzExNDIwNThaMGExCzAJ",
            "BgNVBAYTAlVLMRAwDgYDVQQIEwdCcmlzdG9sMRAwDgYDVQQHEwdCcmlzdG9sMRIwEAYDVQQKEwlG",
            "b3JnZVJvY2sxCzAJBgNVBAsTAkFNMQ0wCwYDVQQDEwR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOC",
            "AQ8AMIIBCgKCAQEAi7t6m4d/02dZ8dOe+DFcuUYiOWueHlNkFwdUfOs06eUETOV6Y9WCXu3D71db",
            "F0Fhou69ez5c3HAZrSVS2qC1Htw9NkVlLDeED7qwQQMmSr7RFYNQ6BYekAtn/ScFHpq8Tx4BzhcD",
            "b6P0+PHCo+bkQedxwhbMD412KSM2UAVQaZ+TW+ngdaaVEs1Cgl4b8xxZ9ZuApXZfpddNdgvjBeeY",
            "QbZnaqU3b0P5YE0s0YvIQqYmTjxh4RyLfkt6s/BS1obWUOC+0ChRWlpWE7QTEVEWJP5yt8hgZ5Me",
            "cTmBi3yZ/0ts3NsL83413NdbWYh+ChtP696mZbJozflF8jR9pewTbQIDAQABoyEwHzAdBgNVHQ4E",
            "FgQUDAvAglxsoXuEwI2NT1hFtVww2SUwDQYJKoZIhvcNAQELBQADggEBADiHqUwRlq1xdHP7S387",
            "vMLOr+/OUgNvDUogeyrpdj5vFve/CBxSFlcoY215eE0xzj2+bQoe5To3s8CWkP9hqB3EdhaRBfCr",
            "d8Vpvu8xBZcxQzmqwNjmeDrxNpKes717t05fDGgygUM8xIBs29JwRzHzf7e0ByJjn9fvlUjDAGZ7",
            "emCTN382F2iOeLC2ibVl7dpmsWZTINhQRbmq5L4ztOcjITk5WZnBF439oRRn68fWZVkOv2UqaKbk",
            "uMjgotNuot+ebHtOchEiwKz8VAK7O3/IgD6rfNBfz+c/WeoPcrfQBR4zfizw/ioR115RSywifzlw",
            "q5yziqyU04eP4wLr3cM=",
            "                    </ds:X509Certificate>",
            "                </ds:X509Data>",
            "            </ds:KeyInfo>",
            "            <EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\">",
            "                <ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>",
            "            </EncryptionMethod>",
            "            <EncryptionMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#aes128-cbc\">",
            "                <xenc:KeySize>128</xenc:KeySize>",
            "            </EncryptionMethod>",
            "        </KeyDescriptor>",
            "        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost:8080/am/SPSloRedirect/metaAlias/test2\" ResponseLocation=\"http://localhost:8080/am/SPSloRedirect/metaAlias/test2\"/>",
            "        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost:8080/am/SPSloPOST/metaAlias/test2\" ResponseLocation=\"http://localhost:8080/am/SPSloPOST/metaAlias/test2\"/>",
            "        <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/SPSloSoap/metaAlias/test2\"/>",
            "        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost:8080/am/SPMniRedirect/metaAlias/test2\" ResponseLocation=\"http://localhost:8080/am/SPMniRedirect/metaAlias/test2\"/>",
            "        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost:8080/am/SPMniPOST/metaAlias/test2\" ResponseLocation=\"http://localhost:8080/am/SPMniPOST/metaAlias/test2\"/>",
            "        <ManageNameIDService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost:8080/am/SPMniSoap/metaAlias/test2\" ResponseLocation=\"http://localhost:8080/am/SPMniSoap/metaAlias/test2\"/>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos</NameIDFormat>",
            "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</NameIDFormat>",
            "        <AssertionConsumerService index=\"0\" isDefault=\"true\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost:8080/am/Consumer/metaAlias/test2\"/>",
            "        <AssertionConsumerService index=\"1\" isDefault=\"false\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost:8080/am/Consumer/metaAlias/test2\"/>",
            "        <AssertionConsumerService index=\"2\" isDefault=\"false\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\" Location=\"http://localhost:8080/am/Consumer/ECP/metaAlias/test2\"/>",
            "    </SPSSODescriptor>",
            "</EntityDescriptor>",
            "",
            ""
          ]
        },
        "remote": {}
      },
      "script": {
        "01e1a3c0-038b-4c16-956a-6c9d89328cff": {
          "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for a scripted decision node",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Authentication Tree Decision Node Script",
          "script": "/*\n  - Data made available by nodes that have already executed are available in the sharedState variable.\n  - The script should set outcome to either \"true\" or \"false\".\n */\n\noutcome = \"true\";\n"
        },
        "1244e639-4a31-401d-ab61-d75133d8dc9e": {
          "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Instagram",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Instagram Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"username\", rawProfile.username)))\n"
        },
        "13e3f263-9cd3-4844-8d1c-040fd0dd02eb": {
          "_id": "13e3f263-9cd3-4844-8d1c-040fd0dd02eb",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script template for Device Profile Match decision node script for Authentication Tree",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Profile Match Template - Decision Node Script",
          "script": "/*\n * Copyright 2020-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/** ******************************************************************\n *\n * The following script is a simplified template for understanding\n * the basics of device matching. _This is not functionally complete._\n * For a functionally complete script as well as a development toolkit,\n * visit https://github.com/ForgeRock/forgerock-device-match-script.\n *\n * Global node variables accessible within this scope:\n * 1. `sharedState` provides access to incoming request\n * 2. `deviceProfilesDao` provides access to stored profiles\n * 3. `outcome` variable maps to auth tree node outcomes; values are\n *    'true', 'false', or 'unknownDevice' (notice _all_ are strings).\n * ******************************************************************/\n\n/**\n * Get the incoming request's device profile.\n * Returns serialized JSON (type string); parsing this will result a\n * native JS object.\n */\nvar incomingJson = sharedState.get('forgeRock.device.profile').toString();\nvar incoming = JSON.parse(incomingJson);\n\n/**\n * Get the incoming user's username and realm.\n * Notice the use of `.asString()`.\n */\nvar username = sharedState.get(\"username\").asString();\nvar realm = sharedState.get(\"realm\").asString();\n\n/**\n * Get the user's stored profiles for appropriate realm.\n * Returns a _special_ object with methods for profile data\n */\nvar storedProfiles = deviceProfilesDao.getDeviceProfiles(username, realm);\n\n// Default to `outcome` of 'unknownDevice'\noutcome = 'unknownDevice';\n\nif (storedProfiles) {\n    var i = 0;\n    // NOTE: `.size()` method returns the number of stored profiles\n    var len = storedProfiles.size();\n\n    for (i; i < len; i++) {\n        /**\n         * Get the stored profile.\n         * Returns serialized JSON (type string); parsing this will result\n         * a native JS object.\n         */\n        var storedJson = storedProfiles.get(i);\n        var stored = JSON.parse(storedJson);\n\n        /**\n         * Find a stored profile with the same identifier.\n         */\n        if (incoming.identifier === stored.identifier) {\n\n            /**\n             * Now that you've found the appropriate profile, you will perform\n             * the logic here to match the values of the `incoming` profile\n             * with that of the `stored` profile.\n             *\n             * The result of the matching logic is assigned to `outcome`. Since\n             * we have profiles of the same identifier, the value (type string)\n             * should now be either 'true' or 'false' (properties matched or not).\n             *\n             * For more information about this topic, visit this Github repo:\n             * https://github.com/ForgeRock/forgerock-device-match-script\n             */\n            outcome = 'false';\n        }\n    }\n}\n"
        },
        "157298c0-7d31-4059-a95b-eeb08473b7e5": {
          "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
          "context": "AUTHENTICATION_CLIENT_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for client side Device Id (Match) Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Id (Match) - Client Side",
          "script": "var fontDetector = (function () {\n    /**\n     * JavaScript code to detect available availability of a\n     * particular font in a browser using JavaScript and CSS.\n     *\n     * Author : Lalit Patel\n     * Website: http://www.lalit.org/lab/javascript-css-font-detect/\n     * License: Apache Software License 2.0\n     *          http://www.apache.org/licenses/LICENSE-2.0\n     * Version: 0.15 (21 Sep 2009)\n     *          Changed comparision font to default from sans-default-default,\n     *          as in FF3.0 font of child element didn't fallback\n     *          to parent element if the font is missing.\n     * Version: 0.2 (04 Mar 2012)\n     *          Comparing font against all the 3 generic font families ie,\n     *          'monospace', 'sans-serif' and 'sans'. If it doesn't match all 3\n     *          then that font is 100% not available in the system\n     * Version: 0.3 (24 Mar 2012)\n     *          Replaced sans with serif in the list of baseFonts\n     */\n    /*\n     * Portions Copyrighted 2013 ForgeRock AS.\n     */\n    var detector = {}, baseFonts, testString, testSize, h, s, defaultWidth = {}, defaultHeight = {}, index;\n\n    // a font will be compared against all the three default fonts.\n    // and if it doesn't match all 3 then that font is not available.\n    baseFonts = ['monospace', 'sans-serif', 'serif'];\n\n    //we use m or w because these two characters take up the maximum width.\n    // And we use a LLi so that the same matching fonts can get separated\n    testString = \"mmmmmmmmmmlli\";\n\n    //we test using 72px font size, we may use any size. I guess larger the better.\n    testSize = '72px';\n\n    h = document.getElementsByTagName(\"body\")[0];\n\n    // create a SPAN in the document to get the width of the text we use to test\n    s = document.createElement(\"span\");\n    s.style.fontSize = testSize;\n    s.innerHTML = testString;\n    for (index in baseFonts) {\n        //get the default width for the three base fonts\n        s.style.fontFamily = baseFonts[index];\n        h.appendChild(s);\n        defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font\n        defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font\n        h.removeChild(s);\n    }\n\n    detector.detect = function(font) {\n        var detected = false, index, matched;\n        for (index in baseFonts) {\n            s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.\n            h.appendChild(s);\n            matched = (s.offsetWidth !== defaultWidth[baseFonts[index]] || s.offsetHeight !== defaultHeight[baseFonts[index]]);\n            h.removeChild(s);\n            detected = detected || matched;\n        }\n        return detected;\n    };\n\n    return detector;\n}());\n/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved\n *\n * The contents of this file are subject to the terms\n * of the Common Development and Distribution License\n * (the License). You may not use this file except in\n * compliance with the License.\n *\n * You can obtain a copy of the License at\n * https://opensso.dev.java.net/public/CDDLv1.0.html or\n * opensso/legal/CDDLv1.0.txt\n * See the License for the specific language governing\n * permission and limitations under the License.\n *\n * When distributing Covered Code, include this CDDL\n * Header Notice in each file and include the License file\n * at opensso/legal/CDDLv1.0.txt.\n * If applicable, add the following below the CDDL Header,\n * with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n */\n/*\n * Portions Copyrighted 2013 Syntegrity.\n * Portions Copyrighted 2013-2014 ForgeRock AS.\n */\n\nvar collectScreenInfo = function () {\n        var screenInfo = {};\n        if (screen) {\n            if (screen.width) {\n                screenInfo.screenWidth = screen.width;\n            }\n\n            if (screen.height) {\n                screenInfo.screenHeight = screen.height;\n            }\n\n            if (screen.pixelDepth) {\n                screenInfo.screenColourDepth = screen.pixelDepth;\n            }\n        } else {\n            console.warn(\"Cannot collect screen information. screen is not defined.\");\n        }\n        return screenInfo;\n    },\n    collectTimezoneInfo = function () {\n        var timezoneInfo =  {}, offset = new Date().getTimezoneOffset();\n\n        if (offset) {\n            timezoneInfo.timezone = offset;\n        } else {\n            console.warn(\"Cannot collect timezone information. timezone is not defined.\");\n        }\n\n        return timezoneInfo;\n    },\n    collectBrowserPluginsInfo = function () {\n\n        if (navigator && navigator.plugins) {\n            var pluginsInfo = {}, i, plugins = navigator.plugins;\n            pluginsInfo.installedPlugins = \"\";\n\n            for (i = 0; i < plugins.length; i++) {\n                pluginsInfo.installedPlugins = pluginsInfo.installedPlugins + plugins[i].filename + \";\";\n            }\n\n            return pluginsInfo;\n        } else {\n            console.warn(\"Cannot collect browser plugin information. navigator.plugins is not defined.\");\n            return {};\n        }\n\n    },\n// Getting geolocation takes some time and is done asynchronously, hence need a callback which is called once geolocation is retrieved.\n    collectGeolocationInfo = function (callback) {\n        var geolocationInfo = {},\n            successCallback = function(position) {\n                geolocationInfo.longitude = position.coords.longitude;\n                geolocationInfo.latitude = position.coords.latitude;\n                callback(geolocationInfo);\n            }, errorCallback = function(error) {\n                console.warn(\"Cannot collect geolocation information. \" + error.code + \": \" + error.message);\n                callback(geolocationInfo);\n            };\n        if (navigator && navigator.geolocation) {\n            // NB: If user chooses 'Not now' on Firefox neither callback gets called\n            //     https://bugzilla.mozilla.org/show_bug.cgi?id=675533\n            navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n        } else {\n            console.warn(\"Cannot collect geolocation information. navigator.geolocation is not defined.\");\n            callback(geolocationInfo);\n        }\n    },\n    collectBrowserFontsInfo = function () {\n        var fontsInfo = {}, i, fontsList = [\"cursive\",\"monospace\",\"serif\",\"sans-serif\",\"fantasy\",\"default\",\"Arial\",\"Arial Black\",\n            \"Arial Narrow\",\"Arial Rounded MT Bold\",\"Bookman Old Style\",\"Bradley Hand ITC\",\"Century\",\"Century Gothic\",\n            \"Comic Sans MS\",\"Courier\",\"Courier New\",\"Georgia\",\"Gentium\",\"Impact\",\"King\",\"Lucida Console\",\"Lalit\",\n            \"Modena\",\"Monotype Corsiva\",\"Papyrus\",\"Tahoma\",\"TeX\",\"Times\",\"Times New Roman\",\"Trebuchet MS\",\"Verdana\",\n            \"Verona\"];\n        fontsInfo.installedFonts = \"\";\n\n        for (i = 0; i < fontsList.length; i++) {\n            if (fontDetector.detect(fontsList[i])) {\n                fontsInfo.installedFonts = fontsInfo.installedFonts + fontsList[i] + \";\";\n            }\n        }\n        return fontsInfo;\n    },\n    devicePrint = {};\n\ndevicePrint.screen = collectScreenInfo();\ndevicePrint.timezone = collectTimezoneInfo();\ndevicePrint.plugins = collectBrowserPluginsInfo();\ndevicePrint.fonts = collectBrowserFontsInfo();\n\nif (navigator.userAgent) {\n    devicePrint.userAgent = navigator.userAgent;\n}\nif (navigator.appName) {\n    devicePrint.appName = navigator.appName;\n}\nif (navigator.appCodeName) {\n    devicePrint.appCodeName = navigator.appCodeName;\n}\nif (navigator.appVersion) {\n    devicePrint.appVersion = navigator.appVersion;\n}\nif (navigator.appMinorVersion) {\n    devicePrint.appMinorVersion = navigator.appMinorVersion;\n}\nif (navigator.buildID) {\n    devicePrint.buildID = navigator.buildID;\n}\nif (navigator.platform) {\n    devicePrint.platform = navigator.platform;\n}\nif (navigator.cpuClass) {\n    devicePrint.cpuClass = navigator.cpuClass;\n}\nif (navigator.oscpu) {\n    devicePrint.oscpu = navigator.oscpu;\n}\nif (navigator.product) {\n    devicePrint.product = navigator.product;\n}\nif (navigator.productSub) {\n    devicePrint.productSub = navigator.productSub;\n}\nif (navigator.vendor) {\n    devicePrint.vendor = navigator.vendor;\n}\nif (navigator.vendorSub) {\n    devicePrint.vendorSub = navigator.vendorSub;\n}\nif (navigator.language) {\n    devicePrint.language = navigator.language;\n}\nif (navigator.userLanguage) {\n    devicePrint.userLanguage = navigator.userLanguage;\n}\nif (navigator.browserLanguage) {\n    devicePrint.browserLanguage = navigator.browserLanguage;\n}\nif (navigator.systemLanguage) {\n    devicePrint.systemLanguage = navigator.systemLanguage;\n}\n\n// Attempt to collect geo-location information and return this with the data collected so far.\n// Otherwise, if geo-location fails or takes longer than 30 seconds, auto-submit the data collected so far.\nautoSubmitDelay = 30000;\noutput.value = JSON.stringify(devicePrint);\ncollectGeolocationInfo(function(geolocationInfo) {\n    devicePrint.geolocation = geolocationInfo;\n    output.value = JSON.stringify(devicePrint);\n    submit();\n});\n"
        },
        "1817cc25-fc84-4053-8f91-4ef130616e25": {
          "_id": "1817cc25-fc84-4053-8f91-4ef130616e25",
          "context": "OIDC_CLAIMS",
          "createdBy": "null",
          "creationDate": 0,
          "default": false,
          "description": "null",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Legacy",
          "script": "/*\n * Copyright 2014-2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\nimport com.iplanet.sso.SSOException\nimport com.sun.identity.idm.IdRepoException\nimport org.forgerock.oauth2.core.exceptions.InvalidRequestException\nimport org.forgerock.oauth2.core.UserInfoClaims\nimport org.forgerock.openidconnect.Claim\n\n/*\n* Defined variables:\n* logger - always presents, the \"OAuth2Provider\" debug logger instance\n* claims - always present, default server provided claims - Map<String, Object>\n* claimObjects - always present, default server provided claims - List<Claim>\n* session - present if the request contains the session cookie, the user's session object\n* identity - always present, the identity of the resource owner\n* scopes - always present, the requested scopes\n* scriptName - always present, the display name of the script\n* requestProperties - always present, contains a map of request properties:\n*                     requestUri - the request URI\n*                     realm - the realm that the request relates to\n*                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n*                     more properties. Please note that these should be handled in accordance with OWASP best practices.\n* clientProperties - present if the client specified in the request was identified, contains a map of client\n*                    properties:\n*                    clientId - the client's Uri for the request locale\n*                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n*                                        for the client\n*                    allowedResponseTypes - list of the allowed response types for the client\n*                    allowedScopes - list of the allowed scopes for the client\n*                    customProperties - A map of the custom properties of the client.\n*                                       Lists or maps will be included as sub-maps, e.g:\n*                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n* requestedClaims - Map<String, Set<String>>\n*                  always present, not empty if the request contains a claims parameter and server has enabled\n*                  claims_parameter_supported, map of requested claims to possible values, otherwise empty,\n*                  requested claims with no requested values will have a key but no value in the map. A key with\n*                  a single value in its Set indicates this is the only value that should be returned.\n* requestedTypedClaims - List<Claim>\n*                       always present, not empty if the request contains a claims parameter and server has enabled\n*                       claims_parameter_supported, list of requested claims with claim name, requested possible values\n*                       and if claim is essential, otherwise empty,\n*                       requested claims with no requested values will have a claim with no values. A claims with\n*                       a single value indicates this is the only value that should be returned.\n* claimsLocales - the values from the 'claims_locales' parameter - List<String>\n* Required to return a Map of claims to be added to the id_token claims\n*\n* Expected return value structure:\n* UserInfoClaims {\n*    Map<String, Object> values; // The values of the claims for the user information\n*    Map<String, List<String>> compositeScopes; // Mapping of scope name to a list of claim names.\n* }\n*/\n\n// user session not guaranteed to be present\nboolean sessionPresent = session != null\n\n/*\n * Pulls first value from users profile attribute\n *\n * @param claim The claim object.\n * @param attr The profile attribute name.\n */\ndef fromSet = { claim, attr ->\n    if (attr != null && attr.size() == 1){\n        attr.iterator().next()\n    } else if (attr != null && attr.size() > 1){\n        attr\n    } else if (logger.warningEnabled()) {\n        logger.warning(\"OpenAMScopeValidator.getUserInfo(): Got an empty result for claim=$claim\");\n    }\n}\n\n// ---vvvvvvvvvv--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---vvvvvvvvvv---\n/*\n * Claim resolver which resolves the value of the claim from its requested values.\n *\n * This resolver will return a value if the claim has one requested values, otherwise an exception is thrown.\n */\ndefaultClaimResolver = { claim ->\n    if (claim.getValues().size() == 1) {\n        [(claim.getName()): claim.getValues().iterator().next()]\n    } else {\n        [:]\n    }\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If no match is found an exception is thrown.\n */\nuserProfileClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim of the user's address.\n *\n * This resolver will return a value for the claim if:\n * # the value of the address is not null\n *\n */\nuserAddressClaimResolver = { claim, identity ->\n    if (identity != null) {\n        addressFormattedValue = fromSet(claim.getName(), identity.getAttribute(\"postaladdress\"))\n        if (addressFormattedValue != null) {\n            return [\n                    \"formatted\" : addressFormattedValue\n            ]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If the claim is essential and no value is found an InvalidRequestException will be thrown and returned to the user.\n * If no match is found an exception is thrown.\n */\nessentialClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (claim.isEssential() && (userProfileValue == null || userProfileValue.isEmpty())) {\n            throw new InvalidRequestException(\"Could not provide value for essential claim $claim\")\n        }\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the list of requested languages from the 'claims_locales' authorize request\n * parameter and attempt to match it to a value from the users' profile attribute.\n * If no match is found an exception is thrown.\n */\nclaimLocalesClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            locale = claimsLocales.find { locale -> localeValues.containsKey(locale) }\n            if (locale != null) {\n                return [(claim.getName()): localeValues.get(locale)]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the language tag specified in the claim object and attempt to match it to a value\n * from the users' profile attribute. If no match is found an exception is thrown.\n */\nlanguageTagClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            if (claim.getLocale() != null) {\n                if (localeValues.containsKey(claim.getLocale())) {\n                    return [(claim.getName()): localeValues.get(claim.getLocale())]\n                } else {\n                    entry = localeValues.entrySet().iterator().next()\n                    return [(claim.getName() + \"#\" + entry.getKey()): entry.getValue()]\n                }\n            } else {\n                entry = localeValues.entrySet().iterator().next()\n                return [(claim.getName()): entry.getValue()]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Given a string \"en|English,jp|Japenese,fr_CA|French Canadian\" will return map of locale -> value.\n */\nparseLocaleAwareString = { s ->\n    return result = s.split(\",\").collectEntries { entry ->\n        split = entry.split(\"\\\\|\")\n        [(split[0]): value = split[1]]\n    }\n}\n// ---^^^^^^^^^^--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---^^^^^^^^^^---\n\n// -------------- UPDATE THIS TO CHANGE CLAIM TO ATTRIBUTE MAPPING FUNCTIONS ---------------\n/*\n * List of claim resolver mappings.\n */\n// [ {claim}: {attribute retriever}, ... ]\nclaimAttributes = [\n        \"email\": userProfileClaimResolver.curry(\"mail\"),\n        \"address\": { claim, identity -> [ \"address\" : userAddressClaimResolver(claim, identity) ] },\n        \"phone_number\": userProfileClaimResolver.curry(\"telephonenumber\"),\n        \"given_name\": userProfileClaimResolver.curry(\"givenname\"),\n        \"zoneinfo\": userProfileClaimResolver.curry(\"preferredtimezone\"),\n        \"family_name\": userProfileClaimResolver.curry(\"sn\"),\n        \"locale\": userProfileClaimResolver.curry(\"preferredlocale\"),\n        \"name\": userProfileClaimResolver.curry(\"cn\")\n]\n\n\n// -------------- UPDATE THIS TO CHANGE SCOPE TO CLAIM MAPPINGS --------------\n/*\n * Map of scopes to claim objects.\n */\n// {scope}: [ {claim}, ... ]\nscopeClaimsMap = [\n        \"email\": [ \"email\" ],\n        \"address\": [ \"address\" ],\n        \"phone\": [ \"phone_number\" ],\n        \"profile\": [ \"given_name\", \"zoneinfo\", \"family_name\", \"locale\", \"name\" ]\n]\n\n\n// ---------------- UPDATE BELOW FOR ADVANCED USAGES -------------------\nif (logger.messageEnabled()) {\n    scopes.findAll { s -> !(\"openid\".equals(s) || scopeClaimsMap.containsKey(s)) }.each { s ->\n        logger.message(\"OpenAMScopeValidator.getUserInfo()::Message: scope not bound to claims: $s\")\n    }\n}\n\n/*\n * Computes the claims return key and value. The key may be a different value if the claim value is not in\n * the requested language.\n */\ndef computeClaim = { claim ->\n    try {\n        claimResolver = claimAttributes.get(claim.getName(), { claimObj, identity -> defaultClaimResolver(claim)})\n        claimResolver(claim, identity)\n    } catch (IdRepoException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    } catch (SSOException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    }\n}\n\n/*\n * Converts requested scopes into claim objects based on the scope mappings in scopeClaimsMap.\n */\ndef convertScopeToClaims = {\n    scopes.findAll { scope -> \"openid\" != scope && scopeClaimsMap.containsKey(scope) }.collectMany { scope ->\n        scopeClaimsMap.get(scope).collect { claim ->\n            new Claim(claim)\n        }\n    }\n}\n\n// Creates a full list of claims to resolve from requested scopes, claims provided by AS and requested claims\ndef claimsToResolve = convertScopeToClaims() + claimObjects + requestedTypedClaims\n\n// Computes the claim return key and values for all requested claims\ncomputedClaims = claimsToResolve.collectEntries() { claim ->\n    result = computeClaim(claim)\n}\n\n// Computes composite scopes\ndef compositeScopes = scopeClaimsMap.findAll { scope ->\n    scopes.contains(scope.key)\n}\n\nreturn new UserInfoClaims((Map)computedClaims, (Map)compositeScopes)\n"
        },
        "1d475815-72cb-42eb-aafd-4026989d28a7": {
          "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for Social Identity Provider Profile Transformation",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Social Identity Provider Profile Transformation Script",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/* Default Social Identity Provider Profile Transformation script to use as a template for new scripts */\n"
        },
        "248b8a56-df81-4b1b-b4ba-45d994f6504c": {
          "_id": "248b8a56-df81-4b1b-b4ba-45d994f6504c",
          "context": "SAML2_IDP_ADAPTER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 IDP Adapter",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 IDP Adapter Script",
          "script": "/*\n * Copyright 2021-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * The script has these top level functions that could be executed during a SAML2 flow.\n *      - preSingleSignOn\n *      - preAuthentication\n *      - preSendResponse\n *      - preSignResponse\n *      - preSendFailureResponse\n *\n * Please see the javadoc for the interface definition and more information about these methods.\n * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html\n * Note that the initialize method is not supported in the scripts.\n *\n * Defined variables. Check the documentation on the respective functions for the variables available to it.\n *\n * hostedEntityId - String\n *     Entity ID for the hosted IDP\n * realm - String\n *     Realm of the hosted IDP\n * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)\n *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.\n * request - HttpServletRequest (2)\n *     Servlet request object\n * response - HttpServletResponse (3)\n *     Servlet response object\n * authnRequest - AuthnRequest (4)\n *     The original authentication request sent from SP\n * reqId - String\n *     The id to use for continuation of processing if the adapter redirects\n * res - Response (5)\n *     The SAML Response\n * session - SSOToken (6)\n *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.\n * relayState - String\n *     The relayState that will be used in the redirect\n * faultCode - String\n *     the fault code that will be returned in the SAML response\n * faultDetail - String\n *     the fault detail that will be returned in the SAML response\n * logger - Logger instance\n *     https://backstage.forgerock.com/docs/am/7.3/scripting-guide/scripting-api-global-logger.html.\n *     Corresponding log files will be prefixed with: scripts.<script name>\n *\n * Throws SAML2Exception (7):\n *     for any exceptions occurring in the adapter. The federation process will continue\n *\n * Class reference:\n * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.\n * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.\n * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.\n * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.\n * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html.\n * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.\n * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.\n */\n\n/*\n * Template/default script for SAML2 IDP Adapter scripted plugin.\n */\n\n/*\n * Available variables for preSingleSignOn:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     logger\n *\n * Return - true if browser redirection is happening after processing, false otherwise. Default to false.\n */\nfunction preSingleSignOn () {\n    return false;\n}\n\n/*\n * Available variables for preAuthentication:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     session\n *     relayState\n *     logger\n *\n * Return - true if browser redirection is happening after processing, false otherwise. Default to false.\n */\nfunction preAuthentication () {\n    return false;\n}\n\n/*\n * Available variables for preSendResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     session\n *     relayState\n *     logger\n *\n * Return - true if browser redirection happened after processing, false otherwise. Default to false.\n */\nfunction preSendResponse () {\n    return false;\n}\n\n/*\n * Available variables for preSignResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     session\n *     relayState\n *     res\n *     logger\n */\nfunction preSignResponse () {\n}\n\n/*\n * Available variables for preSendFailureResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     response\n *     faultCode\n *     faultDetail\n *     logger\n */\nfunction preSendFailureResponse () {\n}\n"
        },
        "25e6c06d-cf70-473b-bd28-26931edc476b": {
          "_id": "25e6c06d-cf70-473b-bd28-26931edc476b",
          "context": "OAUTH2_VALIDATE_SCOPE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Scope Validation",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Validate Scope Script",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script validates the requested scopes against the allowed scopes.\n * If no scopes are requested, default scopes are assumed.\n * The script has four top level functions that could be executed during the different OAuth2 flows:\n *      - validateAuthorizationScope\n *      - validateAccessTokenScope\n *      - validateRefreshTokenScope\n *      - validateBackChannelAuthorizationScope\n *\n * Defined variables:\n * requestedScopes - Set<String> (1).\n *          The set of requested scopes.\n * defaultScopes - Set<String> (1).\n *                 The set of default scopes.\n * allowedScopes - Set<String> (1).\n *                 The set of allowed scopes.\n * scriptName - String (primitive).\n *              Always present, the display name of the script.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_VALIDATE_SCOPE\n * httpClient - HTTP Client (2).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n *\n * Throws InvalidScopeException:\n *      - if there are no scopes requested and default scopes are empty\n *      - if a requested scope is not allowed\n *\n * Return - a Set<String> of validated scopes (1).\n *\n * Class reference:\n * (1) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.\n * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n */\n\n/**\n * Default validate scope script.\n */\nfunction validateScopes () {\n    var frJava = JavaImporter(\n        org.forgerock.oauth2.core.exceptions.InvalidScopeException\n    );\n\n    var scopes;\n    if (requestedScopes == null || requestedScopes.isEmpty()) {\n        scopes = defaultScopes;\n    } else {\n        scopes = new java.util.HashSet(allowedScopes);\n        scopes.retainAll(requestedScopes);\n        if (requestedScopes.size() > scopes.size()) {\n            var invalidScopes = new java.util.HashSet(requestedScopes);\n            invalidScopes.removeAll(allowedScopes);\n            throw new frJava.InvalidScopeException('Unknown/invalid scope(s)');\n        }\n    }\n\n    if (scopes == null || scopes.isEmpty()) {\n        throw new frJava.InvalidScopeException('No scope requested and no default scope configured');\n    }\n    return scopes;\n}\n\nfunction validateAuthorizationScope () {\n    return validateScopes();\n}\n\nfunction validateAccessTokenScope () {\n    return validateScopes();\n}\n\nfunction validateRefreshTokenScope () {\n    return validateScopes();\n}\n\nfunction validateBackChannelAuthorizationScope () {\n    return validateScopes();\n}\n"
        },
        "312e951f-70c5-49d2-a9ae-93aef909d5df": {
          "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Salesforce",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Salesforce Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.user_id),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.zoneInfo)))\n"
        },
        "31bd2ae6-c929-4547-b636-84b874715d60": {
          "_id": "31bd2ae6-c929-4547-b636-84b874715d60",
          "context": "LIBRARY",
          "createdBy": "null",
          "creationDate": 0,
          "default": false,
          "description": "null",
          "evaluatorVersion": "2.0",
          "exports": [
            {
              "arity": 2,
              "id": "logError",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logWarning",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logInfo",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logDebug",
              "type": "Function"
            }
          ],
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "NextGeneration",
          "script": "/*\n * Copyright 2022-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This is an example library script with methods that can be used in other scripts.\n * To reference it, use the following:\n *\n * var library = require(\"Library Script\");\n *\n * library.logError(logger, \"Error message\");\n * library.logDebug(logger, \"Debug message\");\n */\n\nfunction logError(log, errorMessage) {\n  log.error(errorMessage);\n}\n\nfunction logWarning(log, warningMessage) {\n  log.warn(warningMessage);\n}\n\nexports.logError = logError;\nexports.logWarning = logWarning;\n\n// Alternatively, exports can be declared using an inline arrow function\n\nexports.logInfo = (log, infoMessage) => log.info(infoMessage);\nexports.logDebug = (log, debugMessage) => log.debug(debugMessage);\n"
        },
        "36863ffb-40ec-48b9-94b1-9a99f71cc3b5": {
          "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
          "context": "OIDC_CLAIMS",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OIDC claims",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OIDC Claims Script",
          "script": "/*\n * Copyright 2014-2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\nimport com.iplanet.sso.SSOException\nimport com.sun.identity.idm.IdRepoException\nimport org.forgerock.oauth2.core.exceptions.InvalidRequestException\nimport org.forgerock.oauth2.core.UserInfoClaims\nimport org.forgerock.openidconnect.Claim\n\n/*\n* Defined variables:\n* logger - always presents, the \"OAuth2Provider\" debug logger instance\n* claims - always present, default server provided claims - Map<String, Object>\n* claimObjects - always present, default server provided claims - List<Claim>\n* session - present if the request contains the session cookie, the user's session object\n* identity - always present, the identity of the resource owner\n* scopes - always present, the requested scopes\n* scriptName - always present, the display name of the script\n* requestProperties - always present, contains a map of request properties:\n*                     requestUri - the request URI\n*                     realm - the realm that the request relates to\n*                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n*                     more properties. Please note that these should be handled in accordance with OWASP best practices.\n* clientProperties - present if the client specified in the request was identified, contains a map of client\n*                    properties:\n*                    clientId - the client's Uri for the request locale\n*                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n*                                        for the client\n*                    allowedResponseTypes - list of the allowed response types for the client\n*                    allowedScopes - list of the allowed scopes for the client\n*                    customProperties - A map of the custom properties of the client.\n*                                       Lists or maps will be included as sub-maps, e.g:\n*                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n* requestedClaims - Map<String, Set<String>>\n*                  always present, not empty if the request contains a claims parameter and server has enabled\n*                  claims_parameter_supported, map of requested claims to possible values, otherwise empty,\n*                  requested claims with no requested values will have a key but no value in the map. A key with\n*                  a single value in its Set indicates this is the only value that should be returned.\n* requestedTypedClaims - List<Claim>\n*                       always present, not empty if the request contains a claims parameter and server has enabled\n*                       claims_parameter_supported, list of requested claims with claim name, requested possible values\n*                       and if claim is essential, otherwise empty,\n*                       requested claims with no requested values will have a claim with no values. A claims with\n*                       a single value indicates this is the only value that should be returned.\n* claimsLocales - the values from the 'claims_locales' parameter - List<String>\n* Required to return a Map of claims to be added to the id_token claims\n*\n* Expected return value structure:\n* UserInfoClaims {\n*    Map<String, Object> values; // The values of the claims for the user information\n*    Map<String, List<String>> compositeScopes; // Mapping of scope name to a list of claim names.\n* }\n*/\n\n// user session not guaranteed to be present\nboolean sessionPresent = session != null\n\n/*\n * Pulls first value from users profile attribute\n *\n * @param claim The claim object.\n * @param attr The profile attribute name.\n */\ndef fromSet = { claim, attr ->\n    if (attr != null && attr.size() == 1){\n        attr.iterator().next()\n    } else if (attr != null && attr.size() > 1){\n        attr\n    } else if (logger.warningEnabled()) {\n        logger.warning(\"OpenAMScopeValidator.getUserInfo(): Got an empty result for claim=$claim\");\n    }\n}\n\n// ---vvvvvvvvvv--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---vvvvvvvvvv---\n/*\n * Claim resolver which resolves the value of the claim from its requested values.\n *\n * This resolver will return a value if the claim has one requested values, otherwise an exception is thrown.\n */\ndefaultClaimResolver = { claim ->\n    if (claim.getValues().size() == 1) {\n        [(claim.getName()): claim.getValues().iterator().next()]\n    } else {\n        [:]\n    }\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If no match is found an exception is thrown.\n */\nuserProfileClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim of the user's address.\n *\n * This resolver will return a value for the claim if:\n * # the value of the address is not null\n *\n */\nuserAddressClaimResolver = { claim, identity ->\n    if (identity != null) {\n        addressFormattedValue = fromSet(claim.getName(), identity.getAttribute(\"postaladdress\"))\n        if (addressFormattedValue != null) {\n            return [\n                    \"formatted\" : addressFormattedValue\n            ]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If the claim is essential and no value is found an InvalidRequestException will be thrown and returned to the user.\n * If no match is found an exception is thrown.\n */\nessentialClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (claim.isEssential() && (userProfileValue == null || userProfileValue.isEmpty())) {\n            throw new InvalidRequestException(\"Could not provide value for essential claim $claim\")\n        }\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the list of requested languages from the 'claims_locales' authorize request\n * parameter and attempt to match it to a value from the users' profile attribute.\n * If no match is found an exception is thrown.\n */\nclaimLocalesClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            locale = claimsLocales.find { locale -> localeValues.containsKey(locale) }\n            if (locale != null) {\n                return [(claim.getName()): localeValues.get(locale)]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the language tag specified in the claim object and attempt to match it to a value\n * from the users' profile attribute. If no match is found an exception is thrown.\n */\nlanguageTagClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            if (claim.getLocale() != null) {\n                if (localeValues.containsKey(claim.getLocale())) {\n                    return [(claim.getName()): localeValues.get(claim.getLocale())]\n                } else {\n                    entry = localeValues.entrySet().iterator().next()\n                    return [(claim.getName() + \"#\" + entry.getKey()): entry.getValue()]\n                }\n            } else {\n                entry = localeValues.entrySet().iterator().next()\n                return [(claim.getName()): entry.getValue()]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Given a string \"en|English,jp|Japenese,fr_CA|French Canadian\" will return map of locale -> value.\n */\nparseLocaleAwareString = { s ->\n    return result = s.split(\",\").collectEntries { entry ->\n        split = entry.split(\"\\\\|\")\n        [(split[0]): value = split[1]]\n    }\n}\n// ---^^^^^^^^^^--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---^^^^^^^^^^---\n\n// -------------- UPDATE THIS TO CHANGE CLAIM TO ATTRIBUTE MAPPING FUNCTIONS ---------------\n/*\n * List of claim resolver mappings.\n */\n// [ {claim}: {attribute retriever}, ... ]\nclaimAttributes = [\n        \"email\": userProfileClaimResolver.curry(\"mail\"),\n        \"address\": { claim, identity -> [ \"address\" : userAddressClaimResolver(claim, identity) ] },\n        \"phone_number\": userProfileClaimResolver.curry(\"telephonenumber\"),\n        \"given_name\": userProfileClaimResolver.curry(\"givenname\"),\n        \"zoneinfo\": userProfileClaimResolver.curry(\"preferredtimezone\"),\n        \"family_name\": userProfileClaimResolver.curry(\"sn\"),\n        \"locale\": userProfileClaimResolver.curry(\"preferredlocale\"),\n        \"name\": userProfileClaimResolver.curry(\"cn\")\n]\n\n\n// -------------- UPDATE THIS TO CHANGE SCOPE TO CLAIM MAPPINGS --------------\n/*\n * Map of scopes to claim objects.\n */\n// {scope}: [ {claim}, ... ]\nscopeClaimsMap = [\n        \"email\": [ \"email\" ],\n        \"address\": [ \"address\" ],\n        \"phone\": [ \"phone_number\" ],\n        \"profile\": [ \"given_name\", \"zoneinfo\", \"family_name\", \"locale\", \"name\" ]\n]\n\n\n// ---------------- UPDATE BELOW FOR ADVANCED USAGES -------------------\nif (logger.messageEnabled()) {\n    scopes.findAll { s -> !(\"openid\".equals(s) || scopeClaimsMap.containsKey(s)) }.each { s ->\n        logger.message(\"OpenAMScopeValidator.getUserInfo()::Message: scope not bound to claims: $s\")\n    }\n}\n\n/*\n * Computes the claims return key and value. The key may be a different value if the claim value is not in\n * the requested language.\n */\ndef computeClaim = { claim ->\n    try {\n        claimResolver = claimAttributes.get(claim.getName(), { claimObj, identity -> defaultClaimResolver(claim)})\n        claimResolver(claim, identity)\n    } catch (IdRepoException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    } catch (SSOException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    }\n}\n\n/*\n * Converts requested scopes into claim objects based on the scope mappings in scopeClaimsMap.\n */\ndef convertScopeToClaims = {\n    scopes.findAll { scope -> \"openid\" != scope && scopeClaimsMap.containsKey(scope) }.collectMany { scope ->\n        scopeClaimsMap.get(scope).collect { claim ->\n            new Claim(claim)\n        }\n    }\n}\n\n// Creates a full list of claims to resolve from requested scopes, claims provided by AS and requested claims\ndef claimsToResolve = convertScopeToClaims() + claimObjects + requestedTypedClaims\n\n// Computes the claim return key and values for all requested claims\ncomputedClaims = claimsToResolve.collectEntries() { claim ->\n    result = computeClaim(claim)\n}\n\n// Computes composite scopes\ndef compositeScopes = scopeClaimsMap.findAll { scope ->\n    scopes.contains(scope.key)\n}\n\nreturn new UserInfoClaims((Map)computedClaims, (Map)compositeScopes)\n"
        },
        "3d97c436-42c0-4dd0-a571-ea6f34f752b3": {
          "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Itsme",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Itsme Profile Normalization",
          "script": "/*\n * Copyright 2020-2021 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue managedUser = json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"username\", rawProfile.email),\n        field(\"email\", rawProfile.email)))\nreturn managedUser\n"
        },
        "3f93ef6e-e54a-4393-aba1-f322656db28a": {
          "_id": "3f93ef6e-e54a-4393-aba1-f322656db28a",
          "context": "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Authorize Endpoint Data Provider",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Authorize Endpoint Data Provider Script",
          "script": "/*\n * Copyright 2021-2023 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you return additional data when authorize request is called.\n *\n * Defined variables:\n *\n * session - SSOToken (1)\n *           Present if the request contains the session cookie, the user's session object.\n *\n * httpClient - HTTP Client (2).\n *              Always present, the HTTP client that can be used to make external HTTP requests\n *\n * logger - Debug (3)\n *          Always present, the \"ScriptedAuthorizeEndpointDataProvider\" debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER.\n *\n * scriptName - String (primitive).\n *              Always present, the display name of the script\n *\n * Return - a Map<String, String> of additional data (4).\n *\n * Class reference:\n * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (3) Debug - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.\n */\n\n/**\n * Default authorize endpoint data provider script to use as a template for new scripts.\n */\n\n/* EXAMPLE\nvar map = new java.util.HashMap();\n\nfunction addAdditionalData() {\n\n    //If constant data needs to be returned\n    map.put(\"hello\", \"world\");\n\n    //If some data needs to be returned from third party service\n    addAdditionalDataFromExternalService();\n\n    //If there is a need to return some user session data\n    addAdditionalDataFromSessionProperties()\n\n    return map;\n};\n\nfunction addAdditionalDataFromExternalService() {\n  var frJava = JavaImporter(\n        org.forgerock.oauth2.core.exceptions.ServerException\n    );\n  try {\n        //Obtain additional data by performing a REST call to an external service\n        var request = new org.forgerock.http.protocol.Request();\n        request.setUri(\"https://third.party.app/hello.jsp\");\n        request.setMethod(\"POST\");\n        //request.setEntity(\"foo=bar&hello=world\");\n        request.setEntity(json(object(\n                    field(\"foo\", \"bar\"))));\n        var response = httpClient.send(request).getOrThrow();\n        logResponse(response);\n        var result = JSON.parse(response.getEntity().getString());\n        map.put(\"someKey\",result.get(\"someKey\"));\n  } catch (err) {\n     throw new frJava.ServerException(err);\n  }\n};\n\nfunction addAdditionalDataFromSessionProperties() {\n  //Add additional data from session property values\n   if (session != null) { // session is not available for resource owner password credentials grant\n     map.put(\"ipAddress\", session.getProperty(\"Host\"))\n   }\n};\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n};\n\naddAdditionalData();\n*/\n"
        },
        "400e48ba-3f13-4144-ac7b-f824ea8e98c5": {
          "_id": "400e48ba-3f13-4144-ac7b-f824ea8e98c5",
          "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for scripted JWT Issuers",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 JWT Issuer Script",
          "script": "/*\n * Copyright 2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you to derive the configuration for a dynamic JWT issuer from the issuer string.\n * A JWT issuer is made up of the following:\n *   - issuer - the identifier of the entity that issues JWTs\n *   - resource owner subject claim - the name of the claim in the JWT that identifies the resource owner\n *   - consented scope claim - the name of the claim in the JWT that represents scope that the resource owner\n *                             has already consented to externally\n *   - authorized subjects - the set of principal identifiers that are authorized to be used as resource owners\n *                           by the issuer\n *   - JWKs - either a set of JWKs or connection details for obtaining that set, that are the public keys that\n *            can verify the signature on the issued JWTs.\n *\n * Defined variables:\n * issuer - String\n *          The issuer from the bearer JWT.\n * realm - String\n *         The path of the realm that is handling the request.\n * scriptName - String.\n *              Always present, the display name of the script.\n * logger - Always present, the script debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_SCRIPTED_JWT_ISSUER.\n * httpClient - HTTP Client (1).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n * idRepository - Identity Repository (2). Always present.\n * secrets - Secrets accessor (3). Always present.\n *\n * Return - org.forgerock.oauth2.core.TrustedJwtIssuerConfig (4) - the configuration of the trusted JWT issuer.\n *\n * Class reference:\n * (1) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (2) ScriptedIdentityRepository - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/identity/ScriptedIdentityRepository.html.\n * (3) ScriptedSecrets - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/secrets/ScriptedSecrets.html.\n * (4) TrustedJwtIssuerConfig - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/TrustedJwtIssuerConfig.html.\n */\n\n/* EXAMPLE\n(function () {\n    var frJava = JavaImporter(\n        org.forgerock.oauth2.core.TrustedJwtIssuerConfig,\n        java.util.Collections\n    );\n\n    var iss = idRepository.getIdentity(issuer);\n    if (iss == null) {\n        logger.message('No issuer found for: '+issuer);\n        return null;\n    }\n    logger.message('Found issuer: '+iss);\n    // in this example either a JWK set or a URI to a JWK set are in the postalAddress attribute\n    var jwksAttrs = iss.getAttributeValues('postalAddress');\n    var jwkSet = jwksAttrs.length === 0 ? null : jwksAttrs[0];\n    var config = new frJava.TrustedJwtIssuerConfig(\n        issuer,\n        'sub',\n        'scope',\n        // in this example, valid subjects are stored in the mail attribute\n        iss.getAttributeValues('mail'),\n        jwkSet.startsWith('{') ? jwkSet : null,\n        jwkSet.startsWith('http') ? jwkSet : null,\n        '5 minutes',\n        '1 minute'\n    );\n    return config;\n}());\n*/\n"
        },
        "403cf226-6051-4368-8b72-9ba14f9a5140": {
          "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from VKontakte",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "VKontakte Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.first_name),\n        field(\"givenName\", rawProfile.first_name),\n        field(\"familyName\", rawProfile.last_name),\n        field(\"photoUrl\", rawProfile.photo_50),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "424da748-82cc-4b54-be6f-82bd64d82a74": {
          "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Yahoo",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Yahoo Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.locale)))\n"
        },
        "472534ec-a25f-468d-a606-3fb1935190df": {
          "_id": "472534ec-a25f-468d-a606-3fb1935190df",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from WeChat",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "WeChat Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.openid),\n        field(\"displayName\", rawProfile.nickname),\n        field(\"photoUrl\", rawProfile.headimgurl),\n        field(\"username\", rawProfile.nickname)))\n"
        },
        "484e6246-dbc6-4288-97e6-54e55431402e": {
          "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Apple",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Apple Profile Normalization",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n *\n * In some common default configurations, the following keys are required to be not empty:\n * username, givenName, familyName, email.\n *\n * From RFC4517: A value of the Directory String syntax is a string of one or more\n * arbitrary characters from the Universal Character Set (UCS).\n * A zero-length character string is not permitted.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nString email = \"change@me.com\"\nString subjectId = rawProfile.sub\nString firstName = \" \"\nString lastName = \" \"\nString username = subjectId\nString name\n\nif (rawProfile.isDefined(\"email\") && rawProfile.email.isNotNull()){ // User can elect to not share their email\n    email = rawProfile.email.asString()\n    username = email\n}\nif (rawProfile.isDefined(\"name\") && rawProfile.name.isNotNull()) {\n    if (rawProfile.name.isDefined(\"firstName\") && rawProfile.name.firstName.isNotNull()) {\n        firstName = rawProfile.name.firstName.asString()\n    }\n    if (rawProfile.name.isDefined(\"lastName\") && rawProfile.name.lastName.isNotNull()) {\n        lastName = rawProfile.name.lastName.asString()\n    }\n}\n\nname = (firstName?.trim() ? firstName : \"\") + (lastName?.trim() ? ((firstName?.trim() ? \" \" : \"\") + lastName) : \"\")\nname =  (!name?.trim()) ? \" \" : name\n\nreturn json(object(\n        field(\"id\", subjectId),\n        field(\"displayName\", name),\n        field(\"email\", email),\n        field(\"givenName\", firstName),\n        field(\"familyName\", lastName),\n        field(\"username\", username)))\n"
        },
        "58c824ae-84ed-4724-82cd-db128fc3f6c": {
          "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Converts a normalized social profile into a managed user",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Normalized Profile to Managed User",
          "script": "/*\n * Copyright 2020-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue managedUser = json(object(\n        field(\"givenName\", normalizedProfile.givenName),\n        field(\"sn\", normalizedProfile.familyName),\n        field(\"mail\", normalizedProfile.email),\n        field(\"userName\", normalizedProfile.username)))\n\nif (normalizedProfile.postalAddress.isNotNull()) managedUser.put(\"postalAddress\", normalizedProfile.postalAddress)\nif (normalizedProfile.addressLocality.isNotNull()) managedUser.put(\"city\", normalizedProfile.addressLocality)\nif (normalizedProfile.addressRegion.isNotNull()) managedUser.put(\"stateProvince\", normalizedProfile.addressRegion)\nif (normalizedProfile.postalCode.isNotNull()) managedUser.put(\"postalCode\", normalizedProfile.postalCode)\nif (normalizedProfile.country.isNotNull()) managedUser.put(\"country\", normalizedProfile.country)\nif (normalizedProfile.phone.isNotNull()) managedUser.put(\"telephoneNumber\", normalizedProfile.phone)\n\n// if the givenName and familyName is null or empty\n// then add a boolean flag to the shared state to indicate names are not present\n// this could be used elsewhere\n// for eg. this could be used in a scripted decision node to by-pass patching\n// the user object with blank values when givenName  and familyName is not present\nboolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())\nboolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())\nsharedState.put(\"nameEmptyOrNull\", noGivenName && noFamilyName)\n\n\nreturn managedUser\n"
        },
        "58d29080-4563-480b-89bb-1e7719776a21": {
          "_id": "58d29080-4563-480b-89bb-1e7719776a21",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Google",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Google Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.locale)))\n"
        },
        "59335cbd-de7d-4ebd-99b0-f0fb1fe7fede": {
          "_id": "59335cbd-de7d-4ebd-99b0-f0fb1fe7fede",
          "context": "LIBRARY",
          "createdBy": "null",
          "creationDate": 0,
          "default": false,
          "description": "Test script description",
          "evaluatorVersion": "2.0",
          "exports": [
            {
              "arity": 2,
              "id": "logError",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logWarning",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logInfo",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logDebug",
              "type": "Function"
            }
          ],
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Test Script",
          "script": "/*\n * Copyright 2022-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This is an example library script with methods that can be used in other scripts.\n * To reference it, use the following:\n *\n * var library = require(\"Library Script\");\n *\n * library.logError(logger, \"Error message\");\n * library.logDebug(logger, \"Debug message\");\n */\n\nfunction logError(log, errorMessage) {\n  log.error(errorMessage);\n}\n\nfunction logWarning(log, warningMessage) {\n  log.warn(warningMessage);\n}\n\nexports.logError = logError;\nexports.logWarning = logWarning;\n\n// Alternatively, exports can be declared using an inline arrow function\n\nexports.logInfo = (log, infoMessage) => log.info(infoMessage);\nexports.logDebug = (log, debugMessage) => log.debug(debugMessage);\n"
        },
        "5e854779-6ec1-4c39-aeba-0477e0986646": {
          "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
          "context": "CONFIG_PROVIDER_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Script to provide values for a config provider node",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Config Provider Node Script",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/**\n * The following script is a simplified template for understanding how to build\n * up a config Map object with custom values. The Config Provider Node will then\n * provide this config Map to the desired node type. It is important that the Map\n * you build here is named 'config'.\n *\n * Defined variables:\n *\n * nodeState - Node State (1)\n *           Always present, this represents the current values stored in the node state.\n *\n * idRepository - Profile Data (2)\n *           Always present, a repository to retrieve user information.\n *\n * secrets - Credentials and Secrets (3)\n *           Always present, an interface to access the Secrets API from a scripting context.\n *\n * requestHeaders (4) - Map (5)\n *           Always present, an object that provides methods for accessing headers in the login request.\n *\n * logger - Debug Logging (6)\n *          Always present, the debug logger instance.\n *\n * httpClient - HTTP Client (7)\n *          Always present, the HTTP client that can be used to make external HTTP requests.\n *\n * realm - String (primitive).\n *          Always present, the name of the realm the user is authenticating to.\n *\n * existingSession - Map<String, String> (5)\n *          Present if the request contains the session cookie, the user's session object. The returned map from\n *          SSOToken.getProperties() (8)\n *\n * requestParameters - Map (5)\n *          Always present, the object that contains the authentication request parameters.\n *\n *\n * Outputs:\n *\n * config - Map (5)\n *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the\n *           associated node selected in the ConfigProviderNode.\n *\n * Reference:\n * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState\n * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo\n * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets\n * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.\n * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html\n * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n */\n\nconfig = {\n    \"key0\": {\"subKey\": \"value0\"},\n    \"key1\": \"value1\"\n};\n"
        },
        "69f06e63-128c-4e2f-af52-079a8a6f448b": {
          "_id": "69f06e63-128c-4e2f-af52-079a8a6f448b",
          "context": "SAML2_SP_ADAPTER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 SP Adapter",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 SP Adapter Script",
          "script": "/*\n * Copyright 2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * The script has these top level functions that could be executed during a SAML2 flow.\n *      - preSingleSignOnRequest\n *      - preSingleSignOnProcess\n *      - postSingleSignOnSuccess\n *      - postSingleSignOnFailure\n *      - postNewNameIDSuccess\n *      - postTerminateNameIDSuccess\n *      - preSingleLogoutProcess\n *      - postSingleLogoutSuccess\n *\n * Please see the JavaDoc for the interface for more information about these methods.\n * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html\n * Note that the initialize method is not supported in the scripts.\n *\n * Defined variables. Check the documentation on the respective functions for the variables available to it.\n *\n * hostedEntityId - String\n *     Entity ID for the hosted IDP\n * realm - String\n *     Realm of the hosted IDP\n * idpEntityId - String\n *     The entity ID for the Identity Provider for which the sign-on request will be sent.\n * request - HttpServletRequest (1)\n *     Servlet request object\n * response - HttpServletResponse (2)\n *     Servlet response object\n * authnRequest - AuthnRequest (3)\n *     The authentication request sent that is sent from the Service Provider.\n * session - SSOToken (4)\n *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.\n * res - Response (5)\n *     The SSO Response received from the Identity Provider.\n * profile - String\n *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):\n *          - SAML2Constants.HTTP_POST\n *          - SAML2Constants.HTTP_ARTIFACT\n *          - SAML2Constants.PAOS\n * out - PrintWriter (7)\n *     The PrintWriter that can be used to write to.\n * isFederation - boolean\n *     Set to true if using federation, otherwise false.\n * failureCode - int\n *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.\n * userId - String\n *     The unique universal ID of the user with whom the new name identifier request was performed.\n * idRequest - ManageNameIDRequest (8)\n *     The new name identifier request, this will be null if the request object is not available\n * idResponse - ManageNameIDResponse (9)\n *     The new name identifier response, this will be null if the response object is not available\n * binding - String\n *     The binding used for the new name identifier request. This will be one of the following values:\n *          - SAML2Constants.SOAP\n *          - SAML2Constants.HTTP_REDIRECT\n * logoutRequest - LogoutRequest (10)\n *     The single logout request.\n * logoutResponse - LogoutResponse (11)\n *     The single logout response.\n * spAdapterScriptHelper - SpAdapterScriptHelper (12)\n *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.\n * logger - Logger instance\n *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *     Corresponding log files will be prefixed with: scripts.<script name>\n *\n * Throws SAML2Exception (13):\n *     for any exceptions occurring in the adapter. The federation process will continue\n *\n * Class reference:\n * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.\n * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.\n * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.\n * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.\n * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html\n * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html\n * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html\n * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html\n * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html\n * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html\n * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html\n * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.\n * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.\n */\n\n/*\n * Template/default script for SAML2 SP Adapter scripted plugin.\n */\n\n/*\n * Available variables for preSingleSignOnRequest:\n *     hostedEntityId\n *     idpEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleSignOnRequest() {\n}\n\n/*\n * Available variables for preSingleSignOnProcess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     res\n *     profile\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleSignOnProcess() {\n}\n\n/*\n * Available variables for postSingleSignOnSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     out\n *     session\n *     authnRequest\n *     res\n *     profile\n *     isFederation\n *     spAdapterScriptHelper\n *     logger\n *\n * Return - true if response is being redirected, false if not. Default to false.\n */\nfunction postSingleSignOnSuccess() {\n    return false;\n}\n\n/*\n * Available variables for postSingleSignOnFailure:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     res\n *     profile\n *     failureCode\n *     spAdapterScriptHelper\n *     logger\n *\n * Return - true if response is being redirected, false if not. Default to false.\n */\nfunction postSingleSignOnFailure() {\n    return false;\n}\n\n/*\n * Available variables for postNewNameIDSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     idRequest\n *     idResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postNewNameIDSuccess() {\n}\n\n/*\n * Available variables for postTerminateNameIDSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     idRequest\n *     idResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postTerminateNameIDSuccess() {\n}\n\n/*\n * Available variables for preSingleLogoutProcess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     logoutRequest\n *     logoutResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleLogoutProcess() {\n}\n\n/*\n * Available variables for postSingleLogoutSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     logoutRequest\n *     logoutResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postSingleLogoutSuccess() {\n}\n"
        },
        "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30": {
          "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Amazon",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Amazon Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.user_id),\n        field(\"displayName\", rawProfile.name),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "6c49bebe-3a62-11ed-a261-0242ac120002": {
          "_id": "6c49bebe-3a62-11ed-a261-0242ac120002",
          "context": "LIBRARY",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global library script to be referenced from other scripts",
          "evaluatorVersion": "2.0",
          "exports": [
            {
              "arity": 2,
              "id": "logError",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logWarning",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logInfo",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logDebug",
              "type": "Function"
            }
          ],
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Library Script",
          "script": "/*\n * Copyright 2022-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This is an example library script with methods that can be used in other scripts.\n * To reference it, use the following:\n *\n * var library = require(\"Library Script\");\n *\n * library.logError(logger, \"Error message\");\n * library.logDebug(logger, \"Debug message\");\n */\n\nfunction logError(log, errorMessage) {\n  log.error(errorMessage);\n}\n\nfunction logWarning(log, warningMessage) {\n  log.warn(warningMessage);\n}\n\nexports.logError = logError;\nexports.logWarning = logWarning;\n\n// Alternatively, exports can be declared using an inline arrow function\n\nexports.logInfo = (log, infoMessage) => log.info(infoMessage);\nexports.logDebug = (log, debugMessage) => log.debug(debugMessage);\n"
        },
        "703dab1a-1921-4981-98dd-b8e5349d8548": {
          "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
          "context": "AUTHENTICATION_SERVER_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for server side Device Id (Match) Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Id (Match) - Server Side",
          "script": "/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved\n *\n * The contents of this file are subject to the terms\n * of the Common Development and Distribution License\n * (the License). You may not use this file except in\n * compliance with the License.\n *\n * You can obtain a copy of the License at\n * https://opensso.dev.java.net/public/CDDLv1.0.html or\n * opensso/legal/CDDLv1.0.txt\n * See the License for the specific language governing\n * permission and limitations under the License.\n *\n * When distributing Covered Code, include this CDDL\n * Header Notice in each file and include the License file\n * at opensso/legal/CDDLv1.0.txt.\n * If applicable, add the following below the CDDL Header,\n * with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n */\n/*\n * Portions Copyrighted 2013 Syntegrity.\n * Portions Copyrighted 2013-2018 ForgeRock AS.\n */\n\nvar ScalarComparator = {}, ScreenComparator = {}, MultiValueComparator = {}, UserAgentComparator = {}, GeolocationComparator = {};\n\nvar config = {\n    profileExpiration: 30,              //in days\n    maxProfilesAllowed: 5,\n    maxPenaltyPoints: 0,\n    attributes: {\n        screen: {\n            required: true,\n            comparator: ScreenComparator,\n            args: {\n                penaltyPoints: 50\n            }\n        },\n        plugins: {\n            installedPlugins: {\n                required: false,\n                comparator: MultiValueComparator,\n                args: {\n                    maxPercentageDifference: 10,\n                    maxDifferences: 5,\n                    penaltyPoints: 100\n                }\n            }\n        },\n        fonts: {\n            installedFonts: {\n                required: false,\n                comparator: MultiValueComparator,\n                args: {\n                    maxPercentageDifference: 10,\n                    maxDifferences: 5,\n                    penaltyPoints: 100\n                }\n            }\n        },\n        timezone: {\n            timezone: {\n                required: false,\n                comparator: ScalarComparator,\n                args: {\n                    penaltyPoints: 100\n                }\n            }\n        },\n        userAgent: {\n            required: true,\n            comparator: UserAgentComparator,\n            args: {\n                ignoreVersion: true,\n                penaltyPoints: 100\n            }\n        },\n        geolocation: {\n            required: false,\n            comparator: GeolocationComparator,\n            args: {\n                allowedRange: 100,            //in miles\n                penaltyPoints: 100\n            }\n        }\n    }\n};\n\n//---------------------------------------------------------------------------//\n//                           Comparator functions                            //\n//---------------------------------------------------------------------------//\n\nvar all, any, calculateDistance, calculateIntersection, calculatePercentage, nullOrUndefined, splitAndTrim,\n    undefinedLocation;\n\n// ComparisonResult\n\n/**\n * Constructs an instance of a ComparisonResult with the given penalty points.\n *\n * @param penaltyPoints (Number) The penalty points for the comparison (defaults to 0).\n * @param additionalInfoInCurrentValue (boolean) Whether the current value contains more information\n *                                               than the stored value (defaults to false).\n */\nfunction ComparisonResult() {\n\n    var penaltyPoints = 0,\n        additionalInfoInCurrentValue = false;\n\n    if (arguments[0] !== undefined && arguments[1] !== undefined) {\n        penaltyPoints = arguments[0];\n        additionalInfoInCurrentValue = arguments[1];\n    }\n\n    if (arguments[0] !== undefined && arguments[1] === undefined) {\n        if (typeof(arguments[0]) === \"boolean\") {\n            additionalInfoInCurrentValue = arguments[0];\n        } else {\n            penaltyPoints = arguments[0];\n        }\n    }\n\n    this.penaltyPoints = penaltyPoints;\n    this.additionalInfoInCurrentValue = additionalInfoInCurrentValue;\n\n}\n\nComparisonResult.ZERO_PENALTY_POINTS = new ComparisonResult(0);\n\n/**\n * Static method for functional programming.\n *\n * @return boolean true if comparisonResult.isSuccessful().\n */\nComparisonResult.isSuccessful =  function(comparisonResult) {\n    return comparisonResult.isSuccessful();\n};\n\n\n/**\n * Static method for functional programming.\n *\n * @return boolean true if comparisonResult.additionalInfoInCurrentValue.\n */\nComparisonResult.additionalInfoInCurrentValue =  function(comparisonResult) {\n    return comparisonResult.additionalInfoInCurrentValue;\n};\n\n/**\n * Comparison function that can be provided as an argument to array.sort\n */\nComparisonResult.compare = function(first, second) {\n    if (nullOrUndefined(first) && nullOrUndefined(second)) {\n        return 0;\n    } else if (nullOrUndefined(first)) {\n        return -1;\n    } else if (nullOrUndefined(second)) {\n        return 1;\n    } else {\n        if (first.penaltyPoints !== second.penaltyPoints) {\n            return first.penaltyPoints - second.penaltyPoints;\n        } else {\n            return (first.additionalInfoInCurrentValue ? 1 : 0) - (second.additionalInfoInCurrentValue ? 1 : 0);\n        }\n    }\n};\n\n/**\n * Amalgamates the given ComparisonResult into this ComparisonResult.\n *\n * @param comparisonResult The ComparisonResult to include.\n */\nComparisonResult.prototype.addComparisonResult = function(comparisonResult) {\n    this.penaltyPoints += comparisonResult.penaltyPoints;\n    if (comparisonResult.additionalInfoInCurrentValue) {\n        this.additionalInfoInCurrentValue = comparisonResult.additionalInfoInCurrentValue;\n    }\n};\n\n/**\n * Returns true if no penalty points have been assigned for the comparison.\n *\n * @return boolean true if the comparison was successful.\n */\nComparisonResult.prototype.isSuccessful = function() {\n    return nullOrUndefined(this.penaltyPoints) || this.penaltyPoints === 0;\n};\n\n/**\n * Compares two simple objects (String|Number) and if they are equal then returns a ComparisonResult with zero\n * penalty points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue (String|Number) The current value.\n * @param storedValue (String|Number) The stored value.\n * @param config: {\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return ComparisonResult.\n */\nScalarComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"StringComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"StringComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"StringComparator.compare:config: \" + JSON.stringify(config));\n    }\n    if (config.penaltyPoints === 0) {\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (!nullOrUndefined(storedValue)) {\n        if (nullOrUndefined(currentValue) || currentValue !== storedValue) {\n            return new ComparisonResult(config.penaltyPoints);\n        }\n    } else if (!nullOrUndefined(currentValue)) {\n        return new ComparisonResult(true);\n    }\n\n    return ComparisonResult.ZERO_PENALTY_POINTS;\n};\n\n/**\n * Compares two screens and if they are equal then returns a ComparisonResult with zero penalty points assigned,\n * otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue: {\n *            \"screenWidth\": (Number) The current client screen width.\n *            \"screenHeight\": (Number) The current client screen height.\n *            \"screenColourDepth\": (Number) The current client screen colour depth.\n *        }\n * @param storedValue: {\n *            \"screenWidth\": (Number) The stored client screen width.\n *            \"screenHeight\": (Number) The stored client screen height.\n *            \"screenColourDepth\": (Number) The stored client screen colour depth.\n *        }\n * @param config: {\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return ComparisonResult\n */\nScreenComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"ScreenComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"ScreenComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"ScreenComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    if (nullOrUndefined(currentValue)) {\n        currentValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};\n    }\n    if (nullOrUndefined(storedValue)) {\n        storedValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};\n    }\n\n    var comparisonResults = [\n        ScalarComparator.compare(currentValue.screenWidth, storedValue.screenWidth, config),\n        ScalarComparator.compare(currentValue.screenHeight, storedValue.screenHeight, config),\n        ScalarComparator.compare(currentValue.screenColourDepth, storedValue.screenColourDepth, config)];\n\n    if (all(comparisonResults, ComparisonResult.isSuccessful)) {\n        return new ComparisonResult(any(comparisonResults, ComparisonResult.additionalInfoInCurrentValue));\n    } else {\n        return new ComparisonResult(config.penaltyPoints);\n    }\n};\n\n/**\n * Splits both values using delimiter, trims every value and compares collections of values.\n * Returns zero-result for same multi-value attributes.\n *\n * If collections are not same checks if number of differences is less or equal maxDifferences or\n * percentage of difference is less or equal maxPercentageDifference.\n *\n * If yes then returns zero-result with additional info, else returns penaltyPoints-result.\n *\n * @param currentValue: (String) The current value.\n * @param storedValue: (String) The stored value.\n * @param config: {\n *            \"maxPercentageDifference\": (Number) The max difference percentage in the values,\n *                                                before the penalty is assigned.\n *            \"maxDifferences\": (Number) The max number of differences in the values,\n *                                       before the penalty points are assigned.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n  *        }\n * @return ComparisonResult\n */\nMultiValueComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"MultiValueComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"MultiValueComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"MultiValueComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    var delimiter = \";\",\n        currentValues = splitAndTrim(currentValue, delimiter),\n        storedValues = splitAndTrim(storedValue, delimiter),\n        maxNumberOfElements = Math.max(currentValues.length, storedValues.length),\n        numberOfTheSameElements = calculateIntersection(currentValues, storedValues).length,\n        numberOfDifferences = maxNumberOfElements - numberOfTheSameElements,\n        percentageOfDifferences = calculatePercentage(numberOfDifferences, maxNumberOfElements);\n\n    if (nullOrUndefined(storedValue) && !nullOrUndefined(currentValue)) {\n        return new ComparisonResult(true);\n    }\n\n    if (logger.messageEnabled()) {\n        logger.message(numberOfTheSameElements + \" of \" + maxNumberOfElements + \" are same\");\n    }\n\n    if (maxNumberOfElements === 0) {\n        logger.message(\"Ignored because no attributes found in both profiles\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (numberOfTheSameElements === maxNumberOfElements) {\n        logger.message(\"Ignored because all attributes are same\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (numberOfDifferences > config.maxDifferences) {\n        if (logger.messageEnabled()) {\n            logger.message(\"Would be ignored if not more than \" + config.maxDifferences + \" differences\");\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n\n    if (percentageOfDifferences > config.maxPercentageDifference) {\n        if (logger.messageEnabled()) {\n            logger.message(percentageOfDifferences + \" percents are different\");\n            logger.message(\"Would be ignored if not more than \" + config.maxPercentageDifference + \" percent\");\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n\n    if (logger.messageEnabled()) {\n        logger.message(\"Ignored because number of differences(\" + numberOfDifferences + \") not more than \"\n            + config.maxDifferences);\n        logger.message(percentageOfDifferences + \" percents are different\");\n        logger.message(\"Ignored because not more than \" + config.maxPercentageDifference + \" percent\");\n    }\n    return new ComparisonResult(true);\n};\n\n/**\n * Compares two User Agent Strings and if they are equal then returns a ComparisonResult with zero penalty\n * points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue (String) The current value.\n * @param storedValue (String) The stored value.\n * @param config: {\n *            \"ignoreVersion\": (boolean) If the version numbers in the User Agent Strings should be ignore\n *                                       in the comparison.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return A ComparisonResult.\n */\nUserAgentComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"UserAgentComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"UserAgentComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"UserAgentComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    if (config.ignoreVersion) {\n        // remove version number\n        currentValue = nullOrUndefined(currentValue) ? null : currentValue.replace(/[\\d\\.]+/g, \"\").trim();\n        storedValue = nullOrUndefined(storedValue) ? null : storedValue.replace(/[\\d\\.]+/g, \"\").trim();\n    }\n\n    return ScalarComparator.compare(currentValue, storedValue, config);\n};\n\n/**\n * Compares two locations, taking into account a degree of difference.\n *\n * @param currentValue: {\n *            \"latitude\": (Number) The current latitude.\n *            \"longitude\": (Number) The current longitude.\n *        }\n * @param storedValue: {\n *            \"latitude\": (Number) The stored latitude.\n *            \"longitude\": (Number) The stored longitude.\n *        }\n * @param config: {\n *            \"allowedRange\": (Number) The max difference allowed in the two locations, before the penalty is assigned.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n*         }\n * @return ComparisonResult\n */\nGeolocationComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"GeolocationComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"GeolocationComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"GeolocationComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    // Check for undefined stored or current locations\n\n    if (undefinedLocation(currentValue) && undefinedLocation(storedValue)) {\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n    if (undefinedLocation(currentValue) && !undefinedLocation(storedValue)) {\n        return new ComparisonResult(config.penaltyPoints);\n    }\n    if (!undefinedLocation(currentValue) && undefinedLocation(storedValue)) {\n        return new ComparisonResult(true);\n    }\n\n    // Both locations defined, therefore perform comparison\n\n    var distance = calculateDistance(currentValue, storedValue);\n\n    if (logger.messageEnabled()) {\n        logger.message(\"Distance between (\" + currentValue.latitude + \",\" + currentValue.longitude + \") and (\" +\n            storedValue.latitude + \",\" + storedValue.longitude + \") is \" + distance + \" miles\");\n    }\n\n    if (parseFloat(distance.toPrecision(5)) === 0) {\n        logger.message(\"Location is the same\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (distance <= config.allowedRange) {\n        if (logger.messageEnabled()) {\n            logger.message(\"Tolerated because distance not more then \" + config.allowedRange);\n        }\n        return new ComparisonResult(true);\n    } else {\n        if (logger.messageEnabled()) {\n            logger.message(\"Would be ignored if distance not more then \" + config.allowedRange);\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n};\n\n\n//---------------------------------------------------------------------------//\n//                    Device Print Logic - DO NOT MODIFY                     //\n//---------------------------------------------------------------------------//\n\n// Utility functions\n\n/**\n * Returns true if evaluating function f on each element of the Array a returns true.\n *\n * @param a: (Array) The array of elements to evaluate\n * @param f: (Function) A single argument function for mapping elements of the array to boolean.\n * @return boolean.\n */\nall = function(a, f) {\n    var i;\n    for (i = 0; i < a.length; i++) {\n        if (f(a[i]) === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Returns true if evaluating function f on any element of the Array a returns true.\n *\n * @param a: (Array) The array of elements to evaluate\n * @param f: (Function) A single argument function for mapping elements of the array to boolean.\n * @return boolean.\n */\nany = function(a, f) {\n    var i;\n    for (i = 0; i < a.length; i++) {\n        if (f(a[i]) === true) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Returns true if the provided location is null or has undefined longitude or latitude values.\n *\n * @param location: {\n *            \"latitude\": (Number) The latitude.\n *            \"longitude\": (Number) The longitude.\n *        }\n * @return boolean\n */\nundefinedLocation = function(location) {\n    return nullOrUndefined(location) || nullOrUndefined(location.latitude) || nullOrUndefined(location.longitude);\n};\n\n/**\n * Returns true if the provided value is null or undefined.\n *\n * @param value: a value of any type\n * @return boolean\n */\nnullOrUndefined = function(value) {\n    return value === null || value === undefined;\n};\n\n/**\n * Calculates the distances between the two locations.\n *\n * @param first: {\n *            \"latitude\": (Number) The first latitude.\n *            \"longitude\": (Number) The first longitude.\n *        }\n * @param second: {\n *            \"latitude\": (Number) The second latitude.\n *            \"longitude\": (Number) The second longitude.\n *        }\n * @return Number The distance between the two locations.\n */\ncalculateDistance = function(first, second) {\n    var factor = (Math.PI / 180),\n        theta,\n        dist;\n    function degreesToRadians(degrees) {\n        return degrees * factor;\n    }\n    function radiansToDegrees(radians) {\n        return radians / factor;\n    }\n    theta = first.longitude - second.longitude;\n    dist = Math.sin(degreesToRadians(first.latitude)) * Math.sin(degreesToRadians(second.latitude))\n        + Math.cos(degreesToRadians(first.latitude)) * Math.cos(degreesToRadians(second.latitude))\n        * Math.cos(degreesToRadians(theta));\n    dist = Math.acos(dist);\n    dist = radiansToDegrees(dist);\n    dist = dist * 60 * 1.1515;\n    return dist;\n};\n\n/**\n * Converts a String holding a delimited sequence of values into an array.\n *\n * @param text (String) The String representation of a delimited sequence of values.\n * @param delimiter (String) The character delimiting values within the text String.\n * @return (Array) The comma separated values.\n */\nsplitAndTrim = function(text, delimiter) {\n\n    var results = [],\n        i,\n        values,\n        value;\n    if (text === null) {\n        return results;\n    }\n\n    values = text.split(delimiter);\n    for (i = 0; i < values.length; i++) {\n        value = values[i].trim();\n        if (value !== \"\") {\n            results.push(value);\n        }\n    }\n\n    return results;\n};\n\n/**\n * Converts value to a percentage of range.\n *\n * @param value (Number) The actual number to be converted to a percentage.\n * @param range (Number) The total number of values (i.e. represents 100%).\n * @return (Number) The percentage.\n */\ncalculatePercentage = function(value, range) {\n    if (range === 0) {\n        return 0;\n    }\n    return parseFloat((value / range).toPrecision(2)) * 100;\n};\n\n/**\n * Creates a new array containing only those elements found in both arrays received as arguments.\n *\n * @param first (Array) The first array.\n * @param second (Array) The second array.\n * @return (Array) The elements that found in first and second.\n */\ncalculateIntersection = function(first, second) {\n    return first.filter(function(element) {\n        return second.indexOf(element) !== -1;\n    });\n};\n\nfunction getValue(obj, attributePath) {\n    var value = obj,\n        i;\n    for (i = 0; i < attributePath.length; i++) {\n        if (value === undefined) {\n            return null;\n        }\n        value = value[attributePath[i]];\n    }\n    return value;\n}\n\n\nfunction isLeafNode(attributeConfig) {\n    return attributeConfig.comparator !== undefined;\n}\n\nfunction getAttributePaths(attributeConfig, attributePath) {\n\n    var attributePaths = [],\n        attributeName,\n        attrPaths,\n        attrPath,\n        i;\n\n    for (attributeName in attributeConfig) {\n        if (attributeConfig.hasOwnProperty(attributeName)) {\n\n            if (isLeafNode(attributeConfig[attributeName])) {\n                attrPath = attributePath.slice();\n                attrPath.push(attributeName);\n                attributePaths.push(attrPath);\n            } else {\n                attrPath = attributePath.slice();\n                attrPath.push(attributeName);\n                attrPaths = getAttributePaths(attributeConfig[attributeName], attrPath);\n                for (i = 0; i < attrPaths.length; i++) {\n                    attributePaths.push(attrPaths[i]);\n                }\n            }\n        }\n    }\n\n    return attributePaths;\n}\n\nfunction getDevicePrintAttributePaths(attributeConfig) {\n    return getAttributePaths(attributeConfig, []);\n}\n\nfunction hasRequiredAttributes(devicePrint, attributeConfig) {\n\n    var attributePaths = getDevicePrintAttributePaths(attributeConfig),\n        i,\n        attrValue,\n        attrConfig;\n\n    for (i = 0; i < attributePaths.length; i++) {\n\n        attrValue = getValue(devicePrint, attributePaths[i]);\n        attrConfig = getValue(attributeConfig, attributePaths[i]);\n\n        if (attrConfig.required && attrValue === undefined) {\n            logger.warning(\"Device Print profile missing required attribute, \" + attributePaths[i]);\n            return false;\n        }\n    }\n\n    logger.message(\"device print has required attributes\");\n    return true;\n}\n\nfunction compareDevicePrintProfiles(attributeConfig, devicePrint, devicePrintProfiles, maxPenaltyPoints) {\n\n    var attributePaths = getDevicePrintAttributePaths(attributeConfig),\n        dao = sharedState.get('_DeviceIdDao'),\n        results,\n        j,\n        aggregatedComparisonResult,\n        i,\n        currentValue,\n        storedValue,\n        attrConfig,\n        comparisonResult,\n        selectedComparisonResult,\n        selectedProfile,\n        curDevicePrintProfile,\n        vals;\n\n    results = [];\n    for (j = 0; j < devicePrintProfiles.length; j++) {\n        curDevicePrintProfile = JSON.parse(org.forgerock.json.JsonValue.json(devicePrintProfiles[j]));\n        aggregatedComparisonResult = new ComparisonResult();\n        for (i = 0; i < attributePaths.length; i++) {\n\n            currentValue = getValue(devicePrint, attributePaths[i]);\n            storedValue = getValue(curDevicePrintProfile.devicePrint, attributePaths[i]);\n            attrConfig = getValue(attributeConfig, attributePaths[i]);\n\n            if (storedValue === null) {\n                comparisonResult = new ComparisonResult(attrConfig.penaltyPoints);\n            } else {\n                comparisonResult = attrConfig.comparator.compare(currentValue, storedValue, attrConfig.args);\n            }\n\n            if (logger.messageEnabled()) {\n                logger.message(\"Comparing attribute path: \" + attributePaths[i]\n                    + \", Comparison result: successful=\" + comparisonResult.isSuccessful() + \", penaltyPoints=\"\n                    + comparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n                    + comparisonResult.additionalInfoInCurrentValue);\n            }\n            aggregatedComparisonResult.addComparisonResult(comparisonResult);\n        }\n        if (logger.messageEnabled()) {\n            logger.message(\"Aggregated comparison result: successful=\"\n                + aggregatedComparisonResult.isSuccessful() + \", penaltyPoints=\"\n                + aggregatedComparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n                + aggregatedComparisonResult.additionalInfoInCurrentValue);\n        }\n\n        results.push({\n            key: aggregatedComparisonResult,\n            value: devicePrintProfiles[j]\n        });\n    }\n\n    if (results.length === 0) {\n        return null;\n    }\n\n    results.sort(function(a, b) {\n        return ComparisonResult.compare(a.key, b.key);\n    });\n    selectedComparisonResult = results[0].key;\n    if (logger.messageEnabled()) {\n        logger.message(\"Selected comparison result: successful=\" + selectedComparisonResult.isSuccessful()\n            + \", penaltyPoints=\" + selectedComparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n            + selectedComparisonResult.additionalInfoInCurrentValue);\n    }\n\n    selectedProfile = null;\n    if (selectedComparisonResult.penaltyPoints <= maxPenaltyPoints) {\n        selectedProfile = results[0].value;\n        if (logger.messageEnabled()) {\n            logger.message(\"Selected profile: \" + selectedProfile +\n                \" with \" + selectedComparisonResult.penaltyPoints + \" penalty points\");\n        }\n    }\n\n    if (selectedProfile === null) {\n        return false;\n    }\n\n    /* update profile */\n    selectedProfile.put(\"selectionCounter\",\n        java.lang.Integer.valueOf(parseInt(selectedProfile.get(\"selectionCounter\"), 10) + 1));\n    selectedProfile.put(\"lastSelectedDate\", java.lang.Long.valueOf(new Date().getTime()));\n    selectedProfile.put(\"devicePrint\", devicePrint);\n\n    vals = [];\n    for (i = 0; i < devicePrintProfiles.length; i++) {\n        vals.push(org.forgerock.json.JsonValue.json(devicePrintProfiles[i]));\n    }\n\n    dao.saveDeviceProfiles(username, realm, vals);\n\n    return true;\n}\n\nfunction matchDevicePrint() {\n\n    if (!username) {\n        logger.error(\"Username not set. Cannot compare user's device print profiles.\");\n        authState = FAILED;\n    } else {\n\n        if (logger.messageEnabled()) {\n            logger.message(\"client devicePrint: \" + clientScriptOutputData);\n        }\n\n        var getProfiles = function () {\n\n                function isExpiredProfile(devicePrintProfile) {\n                    var expirationDate = new Date(),\n                        lastSelectedDate;\n                    expirationDate.setDate(expirationDate.getDate() - config.profileExpiration);\n\n                    lastSelectedDate = new Date(devicePrintProfile.lastSelectedDate);\n\n                    return lastSelectedDate < expirationDate;\n                }\n\n                function getNotExpiredProfiles() {\n                    var profile,\n                        dao = sharedState.get('_DeviceIdDao'),\n                        results = [],\n                        profiles,\n                        iter;\n\n                    profiles = dao.getDeviceProfiles(username, realm);\n\n                    if (profiles) {\n                        iter = profiles.iterator();\n\n                        while (iter.hasNext()) {\n                            profile = iter.next().getObject();\n                            if (!isExpiredProfile(profile)) {\n                                results.push(profile);\n                            }\n                        }\n                    }\n                    if (logger.messageEnabled()) {\n                        logger.message(\"stored non-expired profiles: \" + results);\n                    }\n                    return results;\n                }\n\n                return getNotExpiredProfiles();\n            },\n            devicePrint = JSON.parse(clientScriptOutputData),\n            devicePrintProfiles = getProfiles();\n\n        if (!hasRequiredAttributes(devicePrint, config.attributes)) {\n            logger.message(\"devicePrint.hasRequiredAttributes: false\");\n            // Will fail this module but fall-through to next module. Which should be OTP.\n            authState = FAILED;\n        } else if (compareDevicePrintProfiles(config.attributes, devicePrint, devicePrintProfiles, config.maxPenaltyPoints)) {\n            logger.message(\"devicePrint.hasValidProfile: true\");\n            authState = SUCCESS;\n        } else {\n            logger.message(\"devicePrint.hasValidProfile: false\");\n            sharedState.put('devicePrintProfile', JSON.stringify(devicePrint));\n            // Will fail this module but fall-through to next module. Which should be OTP.\n            authState = FAILED;\n        }\n    }\n}\n\nmatchDevicePrint();\n"
        },
        "73cecbfc-dad0-4395-be6a-6858ee3a80e5": {
          "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Microsoft",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Microsoft Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.displayName),\n        field(\"givenName\", rawProfile.givenName),\n        field(\"familyName\", rawProfile.surname),\n        field(\"email\", rawProfile.userPrincipalName),\n        field(\"username\", rawProfile.userPrincipalName)))\n"
        },
        "7e3d7067-d50f-4674-8c76-a3e13a810c33": {
          "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
          "context": "AUTHENTICATION_SERVER_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for server side Scripted Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Module - Server Side",
          "script": "/*\n * Copyright 2015-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nvar START_TIME = 9;  // 9am\nvar END_TIME   = 17; // 5pm\nvar longitude, latitude;\nvar localTime;\n\nlogger.message(\"Starting scripted authentication\");\nlogger.message(\"User: \" + username);\n\nvar userPostalAddress = getUserPostalAddress();\nlogger.message(\"User address: \" + userPostalAddress);\n\ngetLongitudeLatitudeFromUserPostalAddress();\ngetLocalTime();\n\nlogger.message(\"Current time at the users location: \" + localTime.getHours());\nif (localTime.getHours() < START_TIME || localTime.getHours() > END_TIME) {\n    logger.error(\"Login forbidden outside work hours!\");\n    authState = FAILED;\n} else {\n    logger.message(\"Authentication allowed!\");\n    authState = SUCCESS;\n}\n\nfunction getLongitudeLatitudeFromUserPostalAddress() {\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(userPostalAddress));\n      request.setMethod(\"GET\");\n      //the above URI has to be extended with an API_KEY if used in a frequent manner\n      //see documentation: https://developers.google.com/maps/documentation/geocoding/intro\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var geocode = JSON.parse(response.getEntity().getString());\n    var i;\n    for (i = 0; i < geocode.results.length; i++) {\n        var result = geocode.results[i];\n        latitude = result.geometry.location.lat;\n        longitude = result.geometry.location.lng;\n\n           logger.message(\"latitude:\" + latitude + \" longitude:\" + longitude);\n    }\n}\n\nfunction getLocalTime() {\n\n    var now = new Date().getTime() / 1000;\n    var location = \"location=\" + latitude + \",\" + longitude;\n    var timestamp = \"timestamp=\" + now;\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"https://maps.googleapis.com/maps/api/timezone/json?\" + location + \"&\" + timestamp);\n      request.setMethod(\"GET\");\n      //the above URI has to be extended with an API_KEY if used in a frequent manner\n      //see documentation: https://developers.google.com/maps/documentation/timezone/intro\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var timezone = JSON.parse(response.getEntity().getString());\n    var localTimestamp = parseInt(now) + parseInt(timezone.dstOffset) + parseInt(timezone.rawOffset);\n    localTime = new Date(localTimestamp*1000);\n}\n\nfunction getUserPostalAddress() {\n    var userAddressSet = idRepository.getAttribute(username, \"postalAddress\");\n    if (userAddressSet == null || userAddressSet.isEmpty()) {\n        logger.warning(\"No address specified for user: \" + username);\n        return false;\n    }\n    return userAddressSet.iterator().next()\n}\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n}\n"
        },
        "8862ca8f-7770-4af5-a888-ac0df0947f36": {
          "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from LinkedIn",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "LinkedIn Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"givenName\", rawProfile.firstName.localized.get(0)),\n        field(\"familyName\", rawProfile.lastName.localized.get(0)),\n        field(\"photoUrl\", rawProfile.profilePicture.displayImage),\n        field(\"email\", rawProfile.elements.get(0).get(\"handle~\").emailAddress),\n        field(\"username\", rawProfile.elements.get(0).get(\"handle~\").emailAddress)))\n"
        },
        "8e298710-b55e-4085-a464-88a375a4004b": {
          "_id": "8e298710-b55e-4085-a464-88a375a4004b",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Twitter",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Twitter Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id_str),\n        field(\"displayName\", rawProfile.name),\n        field(\"photoUrl\", rawProfile.profile_image_url),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.screen_name)))\n"
        },
        "91d197de-5916-4dca-83b5-9a4df26e7159": {
          "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from WordPress",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "WordPress Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.username),\n        field(\"displayName\", rawProfile.display_name),\n        field(\"photoUrl\", rawProfile.avatar_URL),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.username)))\n"
        },
        "9a7836ff-b597-4799-8a6f-306fdf40f238": {
          "_id": "9a7836ff-b597-4799-8a6f-306fdf40f238",
          "context": "LIBRARY",
          "createdBy": "null",
          "creationDate": 0,
          "default": false,
          "description": "This is a test script",
          "evaluatorVersion": "2.0",
          "exports": [
            {
              "arity": 2,
              "id": "logError",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logWarning",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logInfo",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logDebug",
              "type": "Function"
            }
          ],
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "test script 2",
          "script": "/*\n * Copyright 2022-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This is an example library script with methods that can be used in other scripts.\n * To reference it, use the following:\n *\n * var library = require(\"Library Script\");\n *\n * library.logError(logger, \"Error message\");\n * library.logDebug(logger, \"Debug message\");\n */\n\nfunction logError(log, errorMessage) {\n  log.error(errorMessage);\n}\n\nfunction logWarning(log, warningMessage) {\n  log.warn(warningMessage);\n}\n\nexports.logError = logError;\nexports.logWarning = logWarning;\n\n// Alternatively, exports can be declared using an inline arrow function\n\nexports.logInfo = (log, infoMessage) => log.info(infoMessage);\nexports.logDebug = (log, debugMessage) => log.debug(debugMessage);\n"
        },
        "9de3eb62-f131-4fac-a294-7bd170fd4acb": {
          "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
          "context": "POLICY_CONDITION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for Scripted Policy Conditions",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Policy Condition",
          "script": "/*\n * Copyright 2015-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n/**\n * This is a Policy Condition example script. It demonstrates how to access a user's information,\n * use that information in external HTTP calls and make a policy decision based on the outcome.\n */\n\nvar userAddress, userIP, resourceHost;\n\nif (validateAndInitializeParameters()) {\n\n    var countryFromUserAddress = getCountryFromUserAddress();\n    logger.message(\"Country retrieved from user's address: \" + countryFromUserAddress);\n    var countryFromUserIP = getCountryFromUserIP();\n    logger.message(\"Country retrieved from user's IP: \" + countryFromUserIP);\n    var countryFromResourceURI = getCountryFromResourceURI();\n    logger.message(\"Country retrieved from resource URI: \" + countryFromResourceURI);\n\n    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {\n        logger.message(\"Authorization Succeeded\");\n        responseAttributes.put(\"countryOfOrigin\", [countryFromUserAddress]);\n        authorized = true;\n    } else {\n        logger.message(\"Authorization Failed\");\n        authorized = false;\n    }\n\n} else {\n    logger.message(\"Required parameters not found. Authorization Failed.\");\n    authorized = false;\n}\n\n/**\n * Use the user's address to lookup their country of residence.\n *\n * @returns {*} The user's country of residence.\n */\nfunction getCountryFromUserAddress() {\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(userAddress));\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var geocode = JSON.parse(response.getEntity().getString());\n    var i;\n    for (i = 0; i < geocode.results.length; i++) {\n        var result = geocode.results[i];\n        var j;\n        for (j = 0; j < result.address_components.length; i++) {\n            if (result.address_components[i].types[0] == \"country\") {\n                return result.address_components[i].long_name;\n            }\n        }\n    }\n}\n\n/**\n * Use the user's IP to lookup the country from which the request originated.\n *\n * @returns {*} The country from which the request originated.\n */\nfunction getCountryFromUserIP() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + userIP);\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity().getString());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Use the requested resource's host name to lookup the country where the resource is hosted.\n *\n * @returns {*} The country in which the resource is hosted.\n */\nfunction getCountryFromResourceURI() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + encodeURIComponent(resourceHost));\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity().getString());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Retrieve and validate the variables required to make the external HTTP calls.\n *\n * @returns {boolean} Will be true if validation was successful.\n */\nfunction validateAndInitializeParameters() {\n    var userAddressSet = identity.getAttribute(\"postalAddress\");\n    if (userAddressSet == null || userAddressSet.isEmpty()) {\n        logger.warning(\"No address specified for user: \" + username);\n        return false;\n    }\n    userAddress = userAddressSet.iterator().next();\n    logger.message(\"User address: \" + userAddress);\n\n    if (!environment) {\n        logger.warning(\"No environment parameters specified in the evaluation request.\");\n        return false;\n    }\n\n    var ipSet = environment.get(\"IP\");\n    if (ipSet == null || ipSet.isEmpty()) {\n        logger.warning(\"No IP specified in the evaluation request environment parameters.\");\n        return false;\n    }\n    userIP = ipSet.iterator().next();\n    logger.message(\"User IP: \" + userIP);\n\n    if (!resourceURI) {\n        logger.warning(\"No resource URI specified.\");\n        return false;\n    }\n    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];\n    logger.message(\"Resource host: \" + resourceHost);\n\n    return true;\n}\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n}\n"
        },
        "a7a78773-445b-4eca-bb93-409e86bced81": {
          "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from GitHub",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "GitHub Profile Normalization",
          "script": "/*\n * Copyright 2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.name),\n        field(\"username\", rawProfile.login)))\n"
        },
        "bae1d54a-e97d-4997-aa5d-c027f21af82c": {
          "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Facebook",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Facebook Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.first_name),\n        field(\"familyName\", rawProfile.last_name),\n        field(\"photoUrl\", rawProfile.picture.data.url),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "c4f22465-2368-4e27-8013-e6399974fd48": {
          "_id": "c4f22465-2368-4e27-8013-e6399974fd48",
          "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 IDP Attribute Mapper",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 IDP Attribute Mapper Script",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.\n *\n * Defined variables:\n * session - SSOToken (1)\n *           The single sign-on session.\n * hostedEntityId - String (primitive).\n *                  The hosted entity ID.\n * remoteEntityId - String (primitive).\n *                  The remote entity ID.\n * realm - String (primitive).\n *         The name of the realm the user is authenticating to.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER\n * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)\n *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.\n *\n * Throws SAML2Exception:\n *      - on failing to map the IDP attributes.\n *\n * Return - a list of SAML Attribute (3) objects.\n *\n * Class reference:\n * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.\n * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.\n */\n\n/**\n * Default SAML2 IDP Attribute Mapper.\n */\nfunction getAttributes() {\n    var frJava = JavaImporter(\n        com.sun.identity.saml2.common.SAML2Exception\n    );\n\n    const debugMethod = \"ScriptedIDPAttributeMapper.getAttributes:: \";\n\n    try {\n\n        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {\n            logger.error(debugMethod + \"Invalid session.\");\n            return null;\n        }\n\n        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);\n        logger.message(debugMethod + \"Remote SP attribute map = {}\", configMap);\n        if (configMap == null || configMap.isEmpty()) {\n            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);\n            if (configMap == null || configMap.isEmpty()) {\n                logger.message(debugMethod + \"Configuration map is not defined.\");\n                return null;\n            }\n            logger.message(debugMethod + \"Hosted IDP attribute map = {}\", configMap);\n        }\n\n        var attributes = new java.util.ArrayList();\n        var stringValueMap = new java.util.HashSet();\n        var binaryValueMap;\n        var localAttribute;\n\n        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.\n        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {\n            try {\n                // Resolve attributes to be read from the datastore.\n                var stringAttributes = new java.util.HashSet();\n                var binaryAttributes = new java.util.HashSet();\n                var keyIter = configMap.keySet().iterator();\n                while (keyIter.hasNext()) {\n                    var key = keyIter.next();\n                    localAttribute = configMap.get(key);\n                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                            // add it to the list of attributes to treat as being binary\n                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));\n                        } else {\n                            stringAttributes.add(localAttribute);\n                        }\n                    }\n                }\n\n                if (!stringAttributes.isEmpty()) {\n                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);\n                }\n                if (!binaryAttributes.isEmpty()) {\n                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);\n                }\n            } catch (error) {\n                logger.error(debugMethod + \"Error accessing the datastore. \" + error);\n                //continue to check in ssotoken.\n            }\n        }\n\n        var keyIter = configMap.keySet().iterator();\n        while (keyIter.hasNext()) {\n            var key = keyIter.next()\n            var nameFormat = null;\n            var samlAttribute = key;\n            localAttribute = configMap.get(key);\n            // check if samlAttribute has format nameFormat|samlAttribute\n            var samlAttributes = String(new java.lang.String(samlAttribute));\n            var tokens = samlAttributes.split('|');\n\n            if (tokens.length > 1) {\n                nameFormat = tokens[0];\n                samlAttribute = tokens[1];\n            }\n\n            var attributeValues = new java.util.HashSet();\n            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                // Remove the static flag before using it as the static value\n                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);\n                attributeValues = new java.util.HashSet([localAttribute]);\n                logger.message(debugMethod + \"Adding static value {} for attribute named {}\", localAttribute, samlAttribute);\n            } else {\n                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                    // Remove the flag as not used for lookup\n                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);\n                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,\n                        binaryValueMap);\n                } else {\n                    if (stringValueMap != null && !stringValueMap.isEmpty()) {\n                        attributeValues = stringValueMap.get(localAttribute);\n                    } else {\n                        logger.message(debugMethod + \"{} string value map was empty or null.\", localAttribute);\n                    }\n                }\n\n                // If all else fails, try to get the value from the users ssoToken\n                if (attributeValues == null || attributeValues.isEmpty()) {\n                    logger.message(debugMethod + \"User profile does not have value for {}, checking SSOToken.\", localAttribute);\n                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));\n                }\n            }\n\n            if (attributeValues == null || attributeValues.isEmpty()) {\n                logger.message(debugMethod + \"{} not found in user profile or SSOToken.\", localAttribute);\n            } else {\n                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));\n            }\n        }\n\n        return attributes;\n\n    } catch (error) {\n        logger.error(debugMethod + \"Error mapping IDP attributes. \" + error);\n        throw new frJava.SAML2Exception(error);\n    }\n}\n\ngetAttributes();\n"
        },
        "c735de08-f8f2-4e69-aa4a-2d8d3d438323": {
          "_id": "c735de08-f8f2-4e69-aa4a-2d8d3d438323",
          "context": "OAUTH2_MAY_ACT",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 May Act",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 May Act Script",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/**\n * Defined variables:\n * token - The access token to be updated. Mutable object, all changes to the access token will be reflected.\n * logger - always present, corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.\n * scriptName - always present, the display name of the script\n * session - present if the request contains the session cookie, the user's session object\n * requestProperties - always present, contains a map of request properties:\n *                     requestUri - the request URI\n *                     realm - the realm that the request relates to\n *                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n *                     more properties. Please note that these should be handled in accordance with OWASP best\n *                     practices.\n * clientProperties - present if the client specified in the request was identified, contains a map of client\n *                    properties:\n *                    clientId - the client's Uri for the request locale\n *                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n *                                        for the client\n *                    allowedResponseTypes - list of the allowed response types for the client\n *                    allowedScopes - list of the allowed scopes for the client\n *                    customProperties - A map of the custom properties of the client.\n *                                       Lists or maps will be included as sub-maps, e.g:\n *                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n *\n * identity - always present, the identity of the resource owner\n * scopes - always present, the requested scopes\n */\n/*\nimport org.forgerock.json.JsonValue\n\ntoken.setMayAct(\n    JsonValue.json(JsonValue.object(\n        JsonValue.field(\"client_id\", \"myClient\"), \n        JsonValue.field(\"sub\", \"(usr!myActor)\"))))\n*/\n"
        },
        "c827d2b4-3608-4693-868e-bbcf86bd87c7": {
          "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
          "context": "AUTHENTICATION_CLIENT_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for client side Scripted Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Module - Client Side",
          "script": "/*\n * Copyright 2016-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n/* Default Authentication client side script to use as a template for new scripts */\n"
        },
        "d22f9a0c-426a-4466-b95e-d0f125b0d5fa": {
          "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
          "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Access Token Modification",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Access Token Modification Script",
          "script": "/*\n * Copyright 2019-2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport org.forgerock.http.protocol.Request\nimport org.forgerock.http.protocol.Response\n\nimport com.iplanet.sso.SSOException\n\nimport groovy.json.JsonSlurper\n\n/**\n * Defined variables:\n * accessToken - The access token to be updated. Mutable object, all changes to the access token will be reflected.\n * httpClient - always present, the HTTP client that can be used to make external HTTP requests\n * identity - always present, the identity of the resource owner\n * logger - always present, corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.\n * scopes - always present, the requested scopes\n * session - present if the request contains the session cookie, the user's session object\n * scriptName - always present, the display name of the script\n * requestProperties - always present, contains a map of request properties:\n *                     requestUri - the request URI\n *                     realm - the realm that the request relates to\n *                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n *                     more properties. Please note that these should be handled in accordance with OWASP best\n *                     practices.\n * clientProperties - present if the client specified in the request was identified, contains a map of client\n *                    properties:\n *                    clientId - the client's Uri for the request locale\n *                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n *                                        for the client\n *                    allowedResponseTypes - list of the allowed response types for the client\n *                    allowedScopes - list of the allowed scopes for the client\n *                    customProperties - A map of the custom properties of the client.\n *                                       Lists or maps will be included as sub-maps, e.g:\n *                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n *\n * No return value - changes shall be made to the accessToken parameter directly.\n *\n * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens, and similarly the size of\n * the JWTs if client based OAuth2 tokens are utilised.\n * When adding/updating fields make sure that the token size remains within client/user-agent limits.\n */\n\n/*\n//Field to always include in token\naccessToken.setField(\"hello\", \"world\")\n\n//Obtain additional values by performing a REST call to an external service\ntry {\n    Response response = httpClient.send(new Request()\n            .setUri(\"https://third.party.app/hello.jsp\")\n            .setMethod(\"POST\")\n            .modifyHeaders({ headers -> headers.put(\"Content-Type\", \"application/json;charset=UTF-8\") })\n//          .setEntity('foo=bar&hello=world'))\n            .setEntity([foo: 'bar']))\n            .getOrThrow()\n    if (response.status.successful) {\n        def result = new JsonSlurper().parseText(response.entity.string)\n        accessToken.setFields(result.get(\"updatedFields\"))\n    } else {\n        logger.error(\"Unable to obtain access token modifications: {}, {}\", response.status, response.entity.toString())\n    }\n} catch (InterruptedException ex) {\n    logger.error(\"The request processing was interrupted\", ex)\n    Thread.currentThread().interrupt()\n    //The access token request will fail with HTTP 500 error in this case.\n    throw new RuntimeException(\"Unable to obtain response from \")\n}\n\n//Add new fields containing identity attribute values\ndef attributes = identity.getAttributes([\"mail\", \"telephoneNumber\"].toSet())\naccessToken.setField(\"mail\", attributes[\"mail\"])\naccessToken.setField(\"phone\", attributes[\"telephoneNumber\"])\n\n//Add new fields containing session property values\nif (session != null) { // session is not available for resource owner password credentials grant\n    try {\n        accessToken.setField(\"ipAddress\", session.getProperty(\"Host\"))\n    } catch (SSOException ex) {\n        logger.error(\"Unable to retrieve session property value\", ex)\n    }\n}\n\n// Remove a native field from the token entry, that was set by AM. For complete list of remove* methods see the JavaDoc\n// for org.forgerock.oauth2.core.AccessToken class.\naccessToken.removeTokenName()\n*/\n"
        },
        "da56fe60-8b38-4c46-a405-d6b306d4b336": {
          "_id": "da56fe60-8b38-4c46-a405-d6b306d4b336",
          "context": "OAUTH2_EVALUATE_SCOPE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Scope Evaluation",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Evaluate Scope Script",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you populate the scopes with profile attribute values when the tokeninfo endpoint is called.\n * For example, if one of the scopes is mail, AM sets mail to the resource owner's email address in the token information returned.\n *\n * Defined variables:\n * accessToken - AccessToken (1).\n *               The access token to be updated.\n *               Mutable object, all changes to the access token will be reflected.\n * identity - AMIdentity (2).\n *            The client's identity if present or the resource owner's identity. Can be null.\n * scriptName - String (primitive).\n *              Always present, the display name of the script.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_EVALUATE_SCOPE\n * httpClient - HTTP Client (3).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n *\n * Return - a Map<String, Object> of the access token's information (4).\n *\n * Class reference:\n * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.\n * (2) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.\n * (3) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.\n */\n\n/**\n * Default evaluate scope script to use as a template for new scripts.\n */\n\n(function () {\n    var map = new java.util.HashMap();\n    if (identity !== null) {\n        var scopes = accessToken.getScope().toArray();\n        scopes.forEach(function (scope) {\n            var attributes = identity.getAttribute(scope).toArray();\n            map.put(scope, attributes.join(\",\"));\n        });\n    } else {\n        logger.error('identity is null');\n    }\n    return map;\n}());\n"
        },
        "ed685f9f-5909-4726-86e8-22bd38b47663": {
          "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Converts a normalized social profile into an Identity",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Normalized Profile to Identity",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue identity = json(object(\n        field(\"givenName\", normalizedProfile.givenName),\n        field(\"sn\", normalizedProfile.familyName),\n        field(\"mail\", normalizedProfile.email),\n        field(\"cn\", normalizedProfile.displayName),\n        field(\"userName\", normalizedProfile.username),\n        field(\"iplanet-am-user-alias-list\", selectedIdp + '-' + normalizedProfile.id.asString())))\n\nreturn identity\n"
        }
      },
      "secrets": {},
      "secretstore": {
        "default-keystore": {
          "_id": "default-keystore",
          "_type": {
            "_id": "KeyStoreSecretStore",
            "collection": true,
            "name": "Keystore"
          },
          "file": "/home/prestonhales/am/security/keystores/keystore.jceks",
          "keyEntryPassword": "entrypass",
          "leaseExpiryDuration": 5,
          "mappings": [],
          "providerName": "SunJCE",
          "storePassword": "storepass",
          "storetype": "JCEKS"
        },
        "default-passwords-store": {
          "_id": "default-passwords-store",
          "_type": {
            "_id": "FileSystemSecretStore",
            "collection": true,
            "name": "File System Secret Volumes"
          },
          "directory": "/home/prestonhales/am/security/secrets/encrypted",
          "format": "ENCRYPTED_PLAIN"
        }
      },
      "service": {
        "IdentityAssertionService": {
          "_id": "",
          "_type": {
            "_id": "IdentityAssertionService",
            "collection": false,
            "name": "Identity Assertion Service"
          },
          "cacheDuration": 120,
          "enable": true,
          "location": "/",
          "nextDescendents": []
        },
        "RemoteConsentService": {
          "_id": "",
          "_type": {
            "_id": "RemoteConsentService",
            "collection": false,
            "name": "Remote Consent Service"
          },
          "consentResponseTimeLimit": 2,
          "jwkStoreCacheMissCacheTime": 1,
          "jwkStoreCacheTimeout": 5,
          "location": "/",
          "nextDescendents": []
        },
        "SocialIdentityProviders": {
          "_id": "",
          "_type": {
            "_id": "SocialIdentityProviders",
            "collection": false,
            "name": "Social Identity Provider Service"
          },
          "enabled": true,
          "location": "/",
          "nextDescendents": [
            {
              "_id": "Google Test",
              "_type": {
                "_id": "googleConfig",
                "collection": true,
                "name": "Client configuration for Google."
              },
              "acrValues": [],
              "authenticationIdKey": "sub",
              "authorizationEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
              "clientAuthenticationMethod": "CLIENT_SECRET_POST",
              "clientId": "test",
              "enableNativeNonce": true,
              "enabled": true,
              "encryptJwtRequestParameter": false,
              "encryptedIdTokens": false,
              "issuer": "https://accounts.google.com",
              "issuerComparisonCheckType": "EXACT",
              "jwtEncryptionAlgorithm": "NONE",
              "jwtEncryptionMethod": "NONE",
              "jwtRequestParameterOption": "NONE",
              "jwtSigningAlgorithm": "NONE",
              "pkceMethod": "S256",
              "privateKeyJwtExpTime": 600,
              "redirectURI": "https://testurl.com",
              "responseMode": "DEFAULT",
              "revocationCheckOptions": [],
              "scopeDelimiter": " ",
              "scopes": [
                "openid",
                "profile",
                "email"
              ],
              "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
              "transform": "58d29080-4563-480b-89bb-1e7719776a21",
              "uiConfig": {
                "buttonClass": "",
                "buttonCustomStyle": "background-color: #fff; color: #757575; border-color: #ddd;",
                "buttonCustomStyleHover": "color: #6d6d6d; background-color: #eee; border-color: #ccc;",
                "buttonDisplayName": "Google",
                "buttonImage": "images/g-logo.png",
                "iconBackground": "#4184f3",
                "iconClass": "fa-google",
                "iconFontColor": "white"
              },
              "useCustomTrustStore": false,
              "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo",
              "userInfoResponseType": "JSON",
              "wellKnownEndpoint": "https://accounts.google.com/.well-known/openid-configuration"
            }
          ]
        },
        "amSessionPropertyWhitelist": {
          "_id": "",
          "_type": {
            "_id": "amSessionPropertyWhitelist",
            "collection": false,
            "name": "Session Property Whitelist Service"
          },
          "location": "/",
          "nextDescendents": [],
          "sessionPropertyWhitelist": [
            "AMCtxId"
          ],
          "whitelistedQueryProperties": []
        },
        "audit": {
          "_id": "",
          "_type": {
            "_id": "audit",
            "collection": false,
            "name": "Audit Logging"
          },
          "auditEnabled": true,
          "blacklistFieldFilters": [],
          "location": "/",
          "nextDescendents": [],
          "whitelistFieldFilters": []
        },
        "authenticatorOathService": {
          "_id": "",
          "_type": {
            "_id": "authenticatorOathService",
            "collection": false,
            "name": "ForgeRock Authenticator (OATH) Service"
          },
          "authenticatorOATHDeviceSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "authenticatorOATHDeviceSettingsEncryptionKeystoreKeyPairAlias": "pushDeviceProfiles",
          "authenticatorOATHDeviceSettingsEncryptionKeystorePassword": null,
          "authenticatorOATHDeviceSettingsEncryptionKeystoreType": "JKS",
          "authenticatorOATHDeviceSettingsEncryptionScheme": "NONE",
          "authenticatorOATHSkippableName": "oath2faEnabled",
          "location": "/",
          "nextDescendents": [],
          "oathAttrName": "oathDeviceProfiles"
        },
        "authenticatorPushService": {
          "_id": "",
          "_type": {
            "_id": "authenticatorPushService",
            "collection": false,
            "name": "ForgeRock Authenticator (Push) Service"
          },
          "authenticatorPushDeviceSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "authenticatorPushDeviceSettingsEncryptionKeystorePassword": null,
          "authenticatorPushDeviceSettingsEncryptionKeystoreType": "JKS",
          "authenticatorPushDeviceSettingsEncryptionScheme": "NONE",
          "authenticatorPushSkippableName": "push2faEnabled",
          "location": "/",
          "nextDescendents": [],
          "pushAttrName": "pushDeviceProfiles"
        },
        "authenticatorWebAuthnService": {
          "_id": "",
          "_type": {
            "_id": "authenticatorWebAuthnService",
            "collection": false,
            "name": "WebAuthn Profile Encryption Service"
          },
          "authenticatorWebAuthnDeviceSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jceks",
          "authenticatorWebAuthnDeviceSettingsEncryptionKeystorePassword": null,
          "authenticatorWebAuthnDeviceSettingsEncryptionKeystoreType": "JCEKS",
          "authenticatorWebAuthnDeviceSettingsEncryptionScheme": "NONE",
          "location": "/",
          "nextDescendents": [],
          "webauthnAttrName": "webauthnDeviceProfiles"
        },
        "baseurl": {
          "_id": "",
          "_type": {
            "_id": "baseurl",
            "collection": false,
            "name": "Base URL Source"
          },
          "contextPath": "/am",
          "location": "/",
          "nextDescendents": [],
          "source": "REQUEST_VALUES"
        },
        "dashboard": {
          "_id": "",
          "_type": {
            "_id": "dashboard",
            "collection": false,
            "name": "Dashboard"
          },
          "assignedDashboard": [],
          "location": "/",
          "nextDescendents": []
        },
        "deviceBindingService": {
          "_id": "",
          "_type": {
            "_id": "deviceBindingService",
            "collection": false,
            "name": "Device Binding Service"
          },
          "deviceBindingAttrName": "boundDevices",
          "deviceBindingSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "deviceBindingSettingsEncryptionKeystorePassword": null,
          "deviceBindingSettingsEncryptionKeystoreType": "JKS",
          "deviceBindingSettingsEncryptionScheme": "NONE",
          "location": "/",
          "nextDescendents": []
        },
        "deviceIdService": {
          "_id": "",
          "_type": {
            "_id": "deviceIdService",
            "collection": false,
            "name": "Device ID Service"
          },
          "deviceIdAttrName": "devicePrintProfiles",
          "deviceIdSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "deviceIdSettingsEncryptionKeystorePassword": null,
          "deviceIdSettingsEncryptionKeystoreType": "JKS",
          "deviceIdSettingsEncryptionScheme": "NONE",
          "location": "/",
          "nextDescendents": []
        },
        "deviceProfilesService": {
          "_id": "",
          "_type": {
            "_id": "deviceProfilesService",
            "collection": false,
            "name": "Device Profiles Service"
          },
          "deviceProfilesAttrName": "deviceProfiles",
          "deviceProfilesSettingsEncryptionKeystore": "/home/prestonhales/am/security/keystores/keystore.jks",
          "deviceProfilesSettingsEncryptionKeystorePassword": null,
          "deviceProfilesSettingsEncryptionKeystoreType": "JKS",
          "deviceProfilesSettingsEncryptionScheme": "NONE",
          "location": "/",
          "nextDescendents": []
        },
        "email": {
          "_id": "",
          "_type": {
            "_id": "email",
            "collection": false,
            "name": "Email Service"
          },
          "emailAddressAttribute": "mail",
          "emailImplClassName": "org.forgerock.openam.services.email.MailServerImpl",
          "emailRateLimitSeconds": 1,
          "location": "/",
          "nextDescendents": [],
          "port": 465,
          "sslState": "SSL"
        },
        "id-repositories": {
          "_id": "",
          "_type": {
            "_id": "id-repositories",
            "collection": false,
            "name": "sunIdentityRepositoryService"
          },
          "location": "/",
          "nextDescendents": [
            {
              "_id": "embedded",
              "_type": {
                "_id": "LDAPv3ForOpenDS",
                "collection": true,
                "name": "OpenDJ"
              },
              "authentication": {
                "sun-idrepo-ldapv3-config-auth-naming-attr": "uid"
              },
              "cachecontrol": {
                "sun-idrepo-ldapv3-dncache-enabled": true,
                "sun-idrepo-ldapv3-dncache-size": 1500
              },
              "errorhandling": {
                "com.iplanet.am.ldap.connection.delay.between.retries": 1000
              },
              "groupconfig": {
                "sun-idrepo-ldapv3-config-group-attributes": [
                  "dn",
                  "cn",
                  "uniqueMember",
                  "objectclass"
                ],
                "sun-idrepo-ldapv3-config-group-container-name": "ou",
                "sun-idrepo-ldapv3-config-group-container-value": "groups",
                "sun-idrepo-ldapv3-config-group-objectclass": [
                  "top",
                  "groupofuniquenames"
                ],
                "sun-idrepo-ldapv3-config-groups-search-attribute": "cn",
                "sun-idrepo-ldapv3-config-groups-search-filter": "(objectclass=groupOfUniqueNames)",
                "sun-idrepo-ldapv3-config-memberurl": "memberUrl",
                "sun-idrepo-ldapv3-config-uniquemember": "uniqueMember"
              },
              "ldapsettings": {
                "openam-idrepo-ldapv3-affinity-level": "all",
                "openam-idrepo-ldapv3-behera-support-enabled": true,
                "openam-idrepo-ldapv3-contains-iot-identities-enriched-as-oauth2client": false,
                "openam-idrepo-ldapv3-heartbeat-interval": 10,
                "openam-idrepo-ldapv3-heartbeat-timeunit": "SECONDS",
                "openam-idrepo-ldapv3-keepalive-searchfilter": "(objectclass=*)",
                "openam-idrepo-ldapv3-mtls-enabled": false,
                "openam-idrepo-ldapv3-proxied-auth-denied-fallback": false,
                "openam-idrepo-ldapv3-proxied-auth-enabled": false,
                "sun-idrepo-ldapv3-config-authid": "cn=Directory Manager",
                "sun-idrepo-ldapv3-config-authpw": null,
                "sun-idrepo-ldapv3-config-connection-mode": "LDAPS",
                "sun-idrepo-ldapv3-config-connection_pool_max_size": 10,
                "sun-idrepo-ldapv3-config-connection_pool_min_size": 1,
                "sun-idrepo-ldapv3-config-ldap-server": [
                  "localhost:50636",
                  "localhost:50636|01"
                ],
                "sun-idrepo-ldapv3-config-max-result": 1000,
                "sun-idrepo-ldapv3-config-organization_name": "dc=openam,dc=forgerock,dc=org",
                "sun-idrepo-ldapv3-config-search-scope": "SCOPE_SUB",
                "sun-idrepo-ldapv3-config-time-limit": 10,
                "sun-idrepo-ldapv3-config-trust-all-server-certificates": false
              },
              "persistentsearch": {
                "sun-idrepo-ldapv3-config-psearch-filter": "(&(!(objectclass=frCoreToken))(!(ou:dn:=services))(!(ou:dn:=tokens)))",
                "sun-idrepo-ldapv3-config-psearch-scope": "SCOPE_SUB",
                "sun-idrepo-ldapv3-config-psearchbase": "dc=openam,dc=forgerock,dc=org"
              },
              "pluginconfig": {
                "sunIdRepoAttributeMapping": [],
                "sunIdRepoClass": "org.forgerock.openam.idrepo.ldap.DJLDAPv3Repo",
                "sunIdRepoSupportedOperations": [
                  "realm=read,create,edit,delete,service",
                  "user=read,create,edit,delete,service",
                  "group=read,create,edit,delete"
                ]
              },
              "userconfig": {
                "sun-idrepo-ldapv3-config-active": "Active",
                "sun-idrepo-ldapv3-config-auth-kba-attempts-attr": [
                  "kbaInfoAttempts"
                ],
                "sun-idrepo-ldapv3-config-auth-kba-attr": [
                  "kbaInfo"
                ],
                "sun-idrepo-ldapv3-config-auth-kba-index-attr": "kbaActiveIndex",
                "sun-idrepo-ldapv3-config-createuser-attr-mapping": [
                  "cn",
                  "sn"
                ],
                "sun-idrepo-ldapv3-config-inactive": "Inactive",
                "sun-idrepo-ldapv3-config-isactive": "inetuserstatus",
                "sun-idrepo-ldapv3-config-people-container-name": "ou",
                "sun-idrepo-ldapv3-config-people-container-value": "people",
                "sun-idrepo-ldapv3-config-user-attributes": [
                  "iplanet-am-auth-configuration",
                  "iplanet-am-user-alias-list",
                  "iplanet-am-user-password-reset-question-answer",
                  "mail",
                  "assignedDashboard",
                  "authorityRevocationList",
                  "dn",
                  "iplanet-am-user-password-reset-options",
                  "employeeNumber",
                  "createTimestamp",
                  "kbaActiveIndex",
                  "caCertificate",
                  "iplanet-am-session-quota-limit",
                  "iplanet-am-user-auth-config",
                  "sun-fm-saml2-nameid-infokey",
                  "sunIdentityMSISDNNumber",
                  "iplanet-am-user-password-reset-force-reset",
                  "sunAMAuthInvalidAttemptsData",
                  "devicePrintProfiles",
                  "givenName",
                  "iplanet-am-session-get-valid-sessions",
                  "objectClass",
                  "adminRole",
                  "inetUserHttpURL",
                  "lastEmailSent",
                  "iplanet-am-user-account-life",
                  "postalAddress",
                  "userCertificate",
                  "preferredtimezone",
                  "iplanet-am-user-admin-start-dn",
                  "boundDevices",
                  "oath2faEnabled",
                  "preferredlanguage",
                  "sun-fm-saml2-nameid-info",
                  "userPassword",
                  "iplanet-am-session-service-status",
                  "telephoneNumber",
                  "iplanet-am-session-max-idle-time",
                  "distinguishedName",
                  "iplanet-am-session-destroy-sessions",
                  "kbaInfoAttempts",
                  "modifyTimestamp",
                  "uid",
                  "iplanet-am-user-success-url",
                  "iplanet-am-user-auth-modules",
                  "kbaInfo",
                  "memberOf",
                  "sn",
                  "preferredLocale",
                  "manager",
                  "iplanet-am-session-max-session-time",
                  "deviceProfiles",
                  "cn",
                  "oathDeviceProfiles",
                  "webauthnDeviceProfiles",
                  "iplanet-am-user-login-status",
                  "pushDeviceProfiles",
                  "push2faEnabled",
                  "inetUserStatus",
                  "retryLimitNodeCount",
                  "iplanet-am-user-failure-url",
                  "iplanet-am-session-max-caching-time",
                  "thingType",
                  "thingKeys",
                  "thingOAuth2ClientName",
                  "thingConfig",
                  "thingProperties"
                ],
                "sun-idrepo-ldapv3-config-user-objectclass": [
                  "iplanet-am-managed-person",
                  "inetuser",
                  "sunFMSAML2NameIdentifier",
                  "inetorgperson",
                  "devicePrintProfilesContainer",
                  "boundDevicesContainer",
                  "iplanet-am-user-service",
                  "iPlanetPreferences",
                  "pushDeviceProfilesContainer",
                  "forgerock-am-dashboard-service",
                  "organizationalperson",
                  "top",
                  "kbaInfoContainer",
                  "person",
                  "sunAMAuthAccountLockout",
                  "oathDeviceProfilesContainer",
                  "webauthnDeviceProfilesContainer",
                  "iplanet-am-auth-configuration-service",
                  "deviceProfilesContainer",
                  "fr-iot"
                ],
                "sun-idrepo-ldapv3-config-users-search-attribute": "uid",
                "sun-idrepo-ldapv3-config-users-search-filter": "(objectclass=inetorgperson)"
              }
            }
          ],
          "sunIdRepoAttributeCombiner": "com.iplanet.am.sdk.AttributeCombiner",
          "sunIdRepoAttributeValidator": [
            "class=com.sun.identity.idm.server.IdRepoAttributeValidatorImpl",
            "minimumPasswordLength=8",
            "usernameInvalidChars=*|(|)|&|!"
          ]
        },
        "iot": {
          "_id": "",
          "_type": {
            "_id": "iot",
            "collection": false,
            "name": "IoT Service"
          },
          "attributeAllowlist": [
            "thingConfig"
          ],
          "createOAuthClient": false,
          "createOAuthJwtIssuer": false,
          "location": "/",
          "nextDescendents": [],
          "oauthClientName": "forgerock-iot-oauth2-client",
          "oauthJwtIssuerName": "forgerock-iot-jwt-issuer"
        },
        "oauth-oidc": {
          "_id": "",
          "_type": {
            "_id": "oauth-oidc",
            "collection": false,
            "name": "OAuth2 Provider"
          },
          "advancedOAuth2Config": {
            "allowClientCredentialsInTokenRequestQueryParameters": false,
            "allowedAudienceValues": [],
            "authenticationAttributes": [
              "uid"
            ],
            "codeVerifierEnforced": "false",
            "defaultScopes": [],
            "displayNameAttribute": "cn",
            "expClaimRequiredInRequestObject": false,
            "grantTypes": [
              "implicit",
              "urn:ietf:params:oauth:grant-type:saml2-bearer",
              "refresh_token",
              "password",
              "client_credentials",
              "urn:ietf:params:oauth:grant-type:device_code",
              "authorization_code",
              "urn:openid:params:grant-type:ciba",
              "urn:ietf:params:oauth:grant-type:uma-ticket",
              "urn:ietf:params:oauth:grant-type:token-exchange",
              "urn:ietf:params:oauth:grant-type:jwt-bearer"
            ],
            "hashSalt": "changeme",
            "includeSubnameInTokenClaims": true,
            "macaroonTokenFormat": "V2",
            "maxAgeOfRequestObjectNbfClaim": 0,
            "maxDifferenceBetweenRequestObjectNbfAndExp": 0,
            "moduleMessageEnabledInPasswordGrant": false,
            "nbfClaimRequiredInRequestObject": false,
            "parRequestUriLifetime": 90,
            "passwordGrantAuthService": "[Empty]",
            "persistentClaims": [],
            "refreshTokenGracePeriod": 0,
            "requestObjectProcessing": "OIDC",
            "requirePushedAuthorizationRequests": false,
            "responseTypeClasses": [
              "code|org.forgerock.oauth2.core.AuthorizationCodeResponseTypeHandler",
              "id_token|org.forgerock.openidconnect.IdTokenResponseTypeHandler",
              "token|org.forgerock.oauth2.core.TokenResponseTypeHandler"
            ],
            "supportedScopes": [],
            "supportedSubjectTypes": [
              "public",
              "pairwise"
            ],
            "tlsCertificateBoundAccessTokensEnabled": true,
            "tlsCertificateRevocationCheckingEnabled": false,
            "tlsClientCertificateHeaderFormat": "URLENCODED_PEM",
            "tokenCompressionEnabled": false,
            "tokenEncryptionEnabled": false,
            "tokenExchangeClasses": [
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToAccessTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToAccessTokenExchanger"
            ],
            "tokenSigningAlgorithm": "HS256",
            "tokenValidatorClasses": [
              "urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.OidcIdTokenValidator",
              "urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.OAuth2AccessTokenValidator"
            ]
          },
          "advancedOIDCConfig": {
            "alwaysAddClaimsToToken": false,
            "amrMappings": {},
            "authorisedIdmDelegationClients": [],
            "authorisedOpenIdConnectSSOClients": [],
            "claimsParameterSupported": false,
            "defaultACR": [],
            "idTokenInfoClientAuthenticationEnabled": true,
            "includeAllKtyAlgCombinationsInJwksUri": false,
            "loaMapping": {},
            "storeOpsTokens": true,
            "supportedAuthorizationResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedAuthorizationResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedAuthorizationResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRequestParameterEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRequestParameterEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRequestParameterSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenEndpointAuthenticationSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenIntrospectionResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedTokenIntrospectionResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedTokenIntrospectionResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedUserInfoEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedUserInfoEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedUserInfoSigningAlgorithms": [
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512"
            ],
            "useForceAuthnForMaxAge": false,
            "useForceAuthnForPromptLogin": false
          },
          "cibaConfig": {
            "cibaAuthReqIdLifetime": 600,
            "cibaMinimumPollingInterval": 2,
            "supportedCibaSigningAlgorithms": [
              "ES256",
              "PS256"
            ]
          },
          "clientDynamicRegistrationConfig": {
            "allowDynamicRegistration": false,
            "dynamicClientRegistrationScope": "dynamic_client_registration",
            "dynamicClientRegistrationSoftwareStatementRequired": false,
            "generateRegistrationAccessTokens": true,
            "requiredSoftwareStatementAttestedAttributes": [
              "redirect_uris"
            ]
          },
          "consent": {
            "clientsCanSkipConsent": false,
            "enableRemoteConsent": false,
            "supportedRcsRequestEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsRequestEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsRequestSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRcsResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsResponseEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsResponseSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "coreOAuth2Config": {
            "accessTokenLifetime": 3600,
            "accessTokenMayActScript": "[Empty]",
            "codeLifetime": 120,
            "issueRefreshToken": true,
            "issueRefreshTokenOnRefreshedToken": true,
            "macaroonTokensEnabled": false,
            "oidcMayActScript": "[Empty]",
            "refreshTokenLifetime": 604800,
            "scopesPolicySet": "oauth2Scopes",
            "statelessTokensEnabled": false,
            "usePolicyEngineForScope": false
          },
          "coreOIDCConfig": {
            "jwtTokenLifetime": 3600,
            "oidcDiscoveryEndpointEnabled": false,
            "overrideableOIDCClaims": [],
            "supportedClaims": [],
            "supportedIDTokenEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedIDTokenEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedIDTokenSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "deviceCodeConfig": {
            "deviceCodeLifetime": 300,
            "devicePollInterval": 5,
            "deviceUserCodeCharacterSet": "234567ACDEFGHJKLMNPQRSTWXYZabcdefhijkmnopqrstwxyz",
            "deviceUserCodeLength": 8
          },
          "location": "/",
          "nextDescendents": [],
          "pluginsConfig": {
            "accessTokenEnricherClass": "org.forgerock.oauth2.core.plugins.registry.DefaultAccessTokenEnricher",
            "accessTokenModificationPluginType": "SCRIPTED",
            "accessTokenModificationScript": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
            "authorizeEndpointDataProviderClass": "org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider",
            "authorizeEndpointDataProviderPluginType": "JAVA",
            "authorizeEndpointDataProviderScript": "3f93ef6e-e54a-4393-aba1-f322656db28a",
            "evaluateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator",
            "evaluateScopePluginType": "JAVA",
            "evaluateScopeScript": "da56fe60-8b38-4c46-a405-d6b306d4b336",
            "oidcClaimsPluginType": "SCRIPTED",
            "oidcClaimsScript": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
            "userCodeGeneratorClass": "org.forgerock.oauth2.core.plugins.registry.DefaultUserCodeGenerator",
            "validateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator",
            "validateScopePluginType": "JAVA",
            "validateScopeScript": "25e6c06d-cf70-473b-bd28-26931edc476b"
          }
        },
        "pingOneWorkerService": {
          "_id": "",
          "_type": {
            "_id": "pingOneWorkerService",
            "collection": false,
            "name": "PingOne Worker Service"
          },
          "enabled": true,
          "location": "/",
          "nextDescendents": []
        },
        "policyconfiguration": {
          "_id": "",
          "_type": {
            "_id": "policyconfiguration",
            "collection": false,
            "name": "Policy Configuration"
          },
          "bindDn": "cn=Directory Manager",
          "bindPassword": null,
          "checkIfResourceTypeExists": true,
          "connectionPoolMaximumSize": 10,
          "connectionPoolMinimumSize": 1,
          "ldapServer": [
            "localhost:50636"
          ],
          "location": "/",
          "maximumSearchResults": 100,
          "mtlsEnabled": false,
          "nextDescendents": [],
          "policyHeartbeatInterval": 10,
          "policyHeartbeatTimeUnit": "SECONDS",
          "realmSearchFilter": "(objectclass=sunismanagedorganization)",
          "searchTimeout": 5,
          "sslEnabled": true,
          "subjectsResultTTL": 10,
          "userAliasEnabled": false,
          "usersBaseDn": "dc=openam,dc=forgerock,dc=org",
          "usersSearchAttribute": "uid",
          "usersSearchFilter": "(objectclass=inetorgperson)",
          "usersSearchScope": "SCOPE_SUB"
        },
        "pushNotification": {
          "_id": "",
          "_type": {
            "_id": "pushNotification",
            "collection": false,
            "name": "Push Notification Service"
          },
          "delegateFactory": "org.forgerock.openam.services.push.sns.SnsHttpDelegateFactory",
          "location": "/",
          "mdCacheSize": 10000,
          "mdConcurrency": 16,
          "mdDuration": 120,
          "nextDescendents": [],
          "region": "us-east-1"
        },
        "security": {
          "_id": "",
          "_type": {
            "_id": "security",
            "collection": false,
            "name": "Legacy User Self Service"
          },
          "confirmationIdHmacKey": "YcGfeuzSM14OG5djEcxEnvPydX28nsuxAZyDX1VA8iY=",
          "forgotPasswordConfirmationUrl": "http://localhost:8080/am/XUI/confirm.html",
          "forgotPasswordEnabled": false,
          "forgotPasswordTokenLifetime": 900,
          "location": "/",
          "nextDescendents": [],
          "protectedUserAttributes": [],
          "selfRegistrationConfirmationUrl": "http://localhost:8080/am/XUI/confirm.html",
          "selfRegistrationEnabled": false,
          "selfRegistrationTokenLifetime": 900,
          "selfServiceEnabled": false,
          "userRegisteredDestination": "default"
        },
        "selfService": {
          "_id": "",
          "_type": {
            "_id": "selfService",
            "collection": false,
            "name": "User Self-Service"
          },
          "advancedConfig": {
            "forgottenPasswordConfirmationUrl": "http://localhost:8080/am/XUI/?realm=${realm}#passwordReset/",
            "forgottenPasswordServiceConfigClass": "org.forgerock.openam.selfservice.config.flows.ForgottenPasswordConfigProvider",
            "forgottenUsernameServiceConfigClass": "org.forgerock.openam.selfservice.config.flows.ForgottenUsernameConfigProvider",
            "userRegistrationConfirmationUrl": "http://localhost:8080/am/XUI/?realm=${realm}#register/",
            "userRegistrationServiceConfigClass": "org.forgerock.openam.selfservice.config.flows.UserRegistrationConfigProvider"
          },
          "forgottenPassword": {
            "forgottenPasswordCaptchaEnabled": false,
            "forgottenPasswordEmailBody": [
              "en|<h2>Click on this <a href=\"%link%\">link</a> to reset your password.</h2>"
            ],
            "forgottenPasswordEmailSubject": [
              "en|Forgotten password email"
            ],
            "forgottenPasswordEmailVerificationEnabled": true,
            "forgottenPasswordEnabled": false,
            "forgottenPasswordKbaEnabled": false,
            "forgottenPasswordTokenPaddingLength": 450,
            "forgottenPasswordTokenTTL": 300,
            "numberOfAllowedAttempts": 1,
            "numberOfAttemptsEnforced": false
          },
          "forgottenUsername": {
            "forgottenUsernameCaptchaEnabled": false,
            "forgottenUsernameEmailBody": [
              "en|<h2>Your username is <span style=\"color:blue\">%username%</span>.</h2>"
            ],
            "forgottenUsernameEmailSubject": [
              "en|Forgotten username email"
            ],
            "forgottenUsernameEmailUsernameEnabled": true,
            "forgottenUsernameEnabled": false,
            "forgottenUsernameKbaEnabled": false,
            "forgottenUsernameShowUsernameEnabled": false,
            "forgottenUsernameTokenTTL": 300
          },
          "generalConfig": {
            "captchaVerificationUrl": "https://www.google.com/recaptcha/api/siteverify",
            "kbaQuestions": [
              "4|en|What is your mother's maiden name?",
              "3|en|What was the name of your childhood pet?",
              "2|en|What was the model of your first car?",
              "1|en|What is the name of your favourite restaurant?"
            ],
            "minimumAnswersToDefine": 1,
            "minimumAnswersToVerify": 1,
            "validQueryAttributes": [
              "uid",
              "mail",
              "givenName",
              "sn"
            ]
          },
          "location": "/",
          "nextDescendents": [],
          "profileManagement": {
            "profileAttributeWhitelist": [
              "uid",
              "telephoneNumber",
              "mail",
              "kbaInfo",
              "givenName",
              "sn",
              "cn"
            ],
            "profileProtectedUserAttributes": [
              "telephoneNumber",
              "mail"
            ]
          },
          "userRegistration": {
            "userRegisteredDestination": "default",
            "userRegistrationCaptchaEnabled": false,
            "userRegistrationEmailBody": [
              "en|<h2>Click on this <a href=\"%link%\">link</a> to register.</h2>"
            ],
            "userRegistrationEmailSubject": [
              "en|Registration email"
            ],
            "userRegistrationEmailVerificationEnabled": true,
            "userRegistrationEmailVerificationFirstEnabled": false,
            "userRegistrationEnabled": false,
            "userRegistrationKbaEnabled": false,
            "userRegistrationTokenTTL": 300,
            "userRegistrationValidUserAttributes": [
              "userPassword",
              "mail",
              "givenName",
              "kbaInfo",
              "inetUserStatus",
              "sn",
              "username"
            ]
          }
        },
        "selfServiceTrees": {
          "_id": "",
          "_type": {
            "_id": "selfServiceTrees",
            "collection": false,
            "name": "Self Service Trees"
          },
          "enabled": true,
          "location": "/",
          "nextDescendents": [],
          "treeMapping": {
            "forgottenUsername": "PlatformForgottenUsername",
            "registration": "PlatformRegistration",
            "resetPassword": "PlatformResetPassword",
            "updatePassword": "PlatformUpdatePassword"
          }
        },
        "socialauthentication": {
          "_id": "",
          "_type": {
            "_id": "socialauthentication",
            "collection": false,
            "name": "Social Authentication Implementations"
          },
          "authenticationChains": {},
          "displayNames": {},
          "enabledKeys": [],
          "icons": {},
          "location": "/",
          "nextDescendents": []
        },
        "transaction": {
          "_id": "",
          "_type": {
            "_id": "transaction",
            "collection": false,
            "name": "Transaction Authentication Service"
          },
          "location": "/",
          "nextDescendents": [],
          "timeToLive": "180"
        },
        "user": {
          "_id": "",
          "_type": {
            "_id": "user",
            "collection": false,
            "name": "User"
          },
          "dynamic": {
            "defaultUserStatus": "Active"
          },
          "location": "/",
          "nextDescendents": []
        },
        "validation": {
          "_id": "",
          "_type": {
            "_id": "validation",
            "collection": false,
            "name": "Validation Service"
          },
          "location": "/",
          "nextDescendents": [],
          "validGotoDestinations": []
        }
      },
      "subjectAttributes": {
        "undefined": "iplanet-am-user-login-status"
      },
      "subjectTypes": {
        "AND": {
          "_id": "AND",
          "config": {
            "properties": {
              "subjects": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "AND"
        },
        "AuthenticatedUsers": {
          "_id": "AuthenticatedUsers",
          "config": {
            "properties": {},
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticatedUsers"
        },
        "Identity": {
          "_id": "Identity",
          "config": {
            "properties": {
              "subjectValues": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Identity"
        },
        "JwtClaim": {
          "_id": "JwtClaim",
          "config": {
            "properties": {
              "claimName": {
                "type": "string"
              },
              "claimValue": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "JwtClaim"
        },
        "NONE": {
          "_id": "NONE",
          "config": {
            "properties": {},
            "type": "object"
          },
          "logical": false,
          "title": "NONE"
        },
        "NOT": {
          "_id": "NOT",
          "config": {
            "properties": {
              "subject": {
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "NOT"
        },
        "OR": {
          "_id": "OR",
          "config": {
            "properties": {
              "subjects": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "OR"
        },
        "Policy": {
          "_id": "Policy",
          "config": {
            "properties": {
              "className": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Policy"
        }
      },
      "trees": {
        "Agent": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "a87ff679-a2f3-371d-9181-a67b7542122c": {
              "_id": "a87ff679-a2f3-371d-9181-a67b7542122c",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "AgentDataStoreDecisionNode",
                "collection": true,
                "name": "Agent Data Store Decision"
              }
            },
            "e4da3b7f-bbce-3345-9777-2b0674a318d5": {
              "_id": "e4da3b7f-bbce-3345-9777-2b0674a318d5",
              "_outcomes": [
                {
                  "displayName": "Has Credentials",
                  "id": "true"
                },
                {
                  "displayName": "No Credentials",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "ZeroPageLoginNode",
                "collection": true,
                "name": "Zero Page Login Collector"
              },
              "allowWithoutReferer": true,
              "passwordHeader": "X-OpenAM-Password",
              "referrerWhiteList": [],
              "usernameHeader": "X-OpenAM-Username"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Agent",
            "description": "null",
            "enabled": true,
            "entryNodeId": "e4da3b7f-bbce-3345-9777-2b0674a318d5",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "a87ff679-a2f3-371d-9181-a67b7542122c": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Agent Data Store Decision",
                "nodeType": "AgentDataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "e4da3b7f-bbce-3345-9777-2b0674a318d5": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "a87ff679-a2f3-371d-9181-a67b7542122c"
                },
                "displayName": "Zero Page Login Collector",
                "nodeType": "ZeroPageLoginNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Example": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "c4ca4238-a0b9-3382-8dcc-509a6f75849b": {
              "_id": "c4ca4238-a0b9-3382-8dcc-509a6f75849b",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c81e728d-9d4c-3f63-af06-7f89cc14862c": {
              "_id": "c81e728d-9d4c-3f63-af06-7f89cc14862c",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "cfcd2084-95d5-35ef-a6e7-dff9f98764da": {
              "_id": "cfcd2084-95d5-35ef-a6e7-dff9f98764da",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3": {
              "_id": "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3",
              "_outcomes": [
                {
                  "displayName": "Has Credentials",
                  "id": "true"
                },
                {
                  "displayName": "No Credentials",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "ZeroPageLoginNode",
                "collection": true,
                "name": "Zero Page Login Collector"
              },
              "allowWithoutReferer": true,
              "passwordHeader": "X-OpenAM-Password",
              "referrerWhiteList": [],
              "usernameHeader": "X-OpenAM-Username"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Example",
            "description": "null",
            "enabled": true,
            "entryNodeId": "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "c4ca4238-a0b9-3382-8dcc-509a6f75849b": {
                "connections": {
                  "outcome": "c81e728d-9d4c-3f63-af06-7f89cc14862c"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c81e728d-9d4c-3f63-af06-7f89cc14862c": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "cfcd2084-95d5-35ef-a6e7-dff9f98764da": {
                "connections": {
                  "outcome": "c4ca4238-a0b9-3382-8dcc-509a6f75849b"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3": {
                "connections": {
                  "false": "cfcd2084-95d5-35ef-a6e7-dff9f98764da",
                  "true": "c81e728d-9d4c-3f63-af06-7f89cc14862c"
                },
                "displayName": "Zero Page Login Collector",
                "nodeType": "ZeroPageLoginNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Facebook-ProvisionIDMAccount": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "37693cfc-7480-39e4-9d87-b8c7d8b9aacd": {
              "_id": "37693cfc-7480-39e4-9d87-b8c7d8b9aacd",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialFacebookNode",
                "collection": true,
                "name": "Social Facebook"
              },
              "authenticationIdKey": "id",
              "authorizeEndpoint": "https://www.facebook.com/dialog/oauth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|facebook-",
              "cfgAccountMapperConfiguration": {
                "id": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|facebook-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "first_name": "givenName",
                "id": "iplanet-am-user-alias-list",
                "last_name": "sn",
                "name": "cn"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "facebook",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "public_profile,email",
              "tokenEndpoint": "https://graph.facebook.com/v2.12/oauth/access_token",
              "userInfoEndpoint": "https://graph.facebook.com/v2.6/me?fields=name%2Cemail%2Cfirst_name%2Clast_name"
            },
            "b6d767d2-f8ed-3d21-a44b-0e5886680cb9": {
              "_id": "b6d767d2-f8ed-3d21-a44b-0e5886680cb9",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ProvisionIdmAccountNode",
                "collection": true,
                "name": "Provision IDM Account"
              },
              "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Facebook-ProvisionIDMAccount",
            "description": "null",
            "enabled": true,
            "entryNodeId": "37693cfc-7480-39e4-9d87-b8c7d8b9aacd",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "37693cfc-7480-39e4-9d87-b8c7d8b9aacd": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "b6d767d2-f8ed-3d21-a44b-0e5886680cb9"
                },
                "displayName": "Facebook Social Authentication",
                "nodeType": "SocialFacebookNode",
                "x": 0,
                "y": 0
              },
              "b6d767d2-f8ed-3d21-a44b-0e5886680cb9": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Provision IDM Account",
                "nodeType": "ProvisionIdmAccountNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Google-AnonymousUser": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1ff1de77-4005-38da-93f4-2943881c655f": {
              "_id": "1ff1de77-4005-38da-93f4-2943881c655f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SetSuccessUrlNode",
                "collection": true,
                "name": "Success URL"
              },
              "successUrl": "https://www.forgerock.com/"
            },
            "4e732ced-3463-306d-a0ca-9a15b6153677": {
              "_id": "4e732ced-3463-306d-a0ca-9a15b6153677",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialGoogleNode",
                "collection": true,
                "name": "Social Google"
              },
              "authenticationIdKey": "sub",
              "authorizeEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|google-",
              "cfgAccountMapperConfiguration": {
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|google-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "family_name": "sn",
                "given_name": "givenName",
                "name": "cn",
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "google",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "profile email",
              "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
              "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo"
            },
            "8e296a06-7a37-3633-b0de-d05f5a3bf3ec": {
              "_id": "8e296a06-7a37-3633-b0de-d05f5a3bf3ec",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AnonymousUserNode",
                "collection": true,
                "name": "Anonymous User Mapping"
              },
              "anonymousUserName": "anonymous"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Google-AnonymousUser",
            "description": "null",
            "enabled": true,
            "entryNodeId": "4e732ced-3463-306d-a0ca-9a15b6153677",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1ff1de77-4005-38da-93f4-2943881c655f": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Set Success URL",
                "nodeType": "SetSuccessUrlNode",
                "x": 0,
                "y": 0
              },
              "4e732ced-3463-306d-a0ca-9a15b6153677": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "8e296a06-7a37-3633-b0de-d05f5a3bf3ec"
                },
                "displayName": "Google Social Authentication",
                "nodeType": "SocialGoogleNode",
                "x": 0,
                "y": 0
              },
              "8e296a06-7a37-3633-b0de-d05f5a3bf3ec": {
                "connections": {
                  "outcome": "1ff1de77-4005-38da-93f4-2943881c655f"
                },
                "displayName": "Map to Anonymous User",
                "nodeType": "AnonymousUserNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Google-DynamicAccountCreation": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0": {
              "_id": "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ProvisionDynamicAccountNode",
                "collection": true,
                "name": "Provision Dynamic Account"
              },
              "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider"
            },
            "182be0c5-cdcd-3072-bb18-64cdee4d3d6e": {
              "_id": "182be0c5-cdcd-3072-bb18-64cdee4d3d6e",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "CreatePasswordNode",
                "collection": true,
                "name": "Create Password"
              },
              "minPasswordLength": 0
            },
            "33e75ff0-9dd6-31bb-a69f-351039152189": {
              "_id": "33e75ff0-9dd6-31bb-a69f-351039152189",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialGoogleNode",
                "collection": true,
                "name": "Social Google"
              },
              "authenticationIdKey": "sub",
              "authorizeEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|google-",
              "cfgAccountMapperConfiguration": {
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|google-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "family_name": "sn",
                "given_name": "givenName",
                "name": "cn",
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "google",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "profile email",
              "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
              "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo"
            },
            "34173cb3-8f07-389d-9beb-c2ac9128303f": {
              "_id": "34173cb3-8f07-389d-9beb-c2ac9128303f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordSmtpSenderNode",
                "collection": true,
                "name": "OTP Email Sender"
              },
              "emailAttribute": "mail",
              "emailContent": {
                "en": "Here is your One Time Password: '{{OTP}}'.</p><p>If you did not request this, please contact support."
              },
              "emailSubject": {
                "en": "Your One Time Password"
              },
              "fromEmailAddress": "admin@example.com",
              "hostName": "mail.example.com",
              "hostPort": 25,
              "password": null,
              "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
              "sslOption": "SSL",
              "username": "admin@example.com"
            },
            "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01": {
              "_id": "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01",
              "_outcomes": [
                {
                  "displayName": "Retry",
                  "id": "Retry"
                },
                {
                  "displayName": "Reject",
                  "id": "Reject"
                }
              ],
              "_type": {
                "_id": "RetryLimitDecisionNode",
                "collection": true,
                "name": "Retry Limit Decision"
              },
              "incrementUserAttributeOnFailure": true,
              "retryLimit": 3
            },
            "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b": {
              "_id": "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordGeneratorNode",
                "collection": true,
                "name": "HOTP Generator"
              },
              "length": 8
            },
            "c16a5320-fa47-3530-9958-3c34fd356ef5": {
              "_id": "c16a5320-fa47-3530-9958-3c34fd356ef5",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordCollectorDecisionNode",
                "collection": true,
                "name": "OTP Collector Decision"
              },
              "passwordExpiryTime": 5
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Google-DynamicAccountCreation",
            "description": "null",
            "enabled": true,
            "entryNodeId": "33e75ff0-9dd6-31bb-a69f-351039152189",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Provision Dynamic Account",
                "nodeType": "ProvisionDynamicAccountNode",
                "x": 0,
                "y": 0
              },
              "182be0c5-cdcd-3072-bb18-64cdee4d3d6e": {
                "connections": {
                  "outcome": "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0"
                },
                "displayName": "Create Password",
                "nodeType": "CreatePasswordNode",
                "x": 0,
                "y": 0
              },
              "33e75ff0-9dd6-31bb-a69f-351039152189": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b"
                },
                "displayName": "Google Social Authentication",
                "nodeType": "SocialGoogleNode",
                "x": 0,
                "y": 0
              },
              "34173cb3-8f07-389d-9beb-c2ac9128303f": {
                "connections": {
                  "outcome": "c16a5320-fa47-3530-9958-3c34fd356ef5"
                },
                "displayName": "OTP Email Sender",
                "nodeType": "OneTimePasswordSmtpSenderNode",
                "x": 0,
                "y": 0
              },
              "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01": {
                "connections": {
                  "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "Retry": "c16a5320-fa47-3530-9958-3c34fd356ef5"
                },
                "displayName": "Retry Limit Decision",
                "nodeType": "RetryLimitDecisionNode",
                "x": 0,
                "y": 0
              },
              "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b": {
                "connections": {
                  "outcome": "34173cb3-8f07-389d-9beb-c2ac9128303f"
                },
                "displayName": "HOTP Generator",
                "nodeType": "OneTimePasswordGeneratorNode",
                "x": 0,
                "y": 0
              },
              "c16a5320-fa47-3530-9958-3c34fd356ef5": {
                "connections": {
                  "false": "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01",
                  "true": "182be0c5-cdcd-3072-bb18-64cdee4d3d6e"
                },
                "displayName": "OTP Collector Decision",
                "nodeType": "OneTimePasswordCollectorDecisionNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "HmacOneTimePassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1f0e3dad-9990-3345-b743-9f8ffabdffc4": {
              "_id": "1f0e3dad-9990-3345-b743-9f8ffabdffc4",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordGeneratorNode",
                "collection": true,
                "name": "HOTP Generator"
              },
              "length": 8
            },
            "3c59dc04-8e88-3024-bbe8-079a5c74d079": {
              "_id": "3c59dc04-8e88-3024-bbe8-079a5c74d079",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordCollectorDecisionNode",
                "collection": true,
                "name": "OTP Collector Decision"
              },
              "passwordExpiryTime": 5
            },
            "6f4922f4-5568-361a-8cdf-4ad2299f6d23": {
              "_id": "6f4922f4-5568-361a-8cdf-4ad2299f6d23",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "70efdf2e-c9b0-3607-9795-c442636b55fb": {
              "_id": "70efdf2e-c9b0-3607-9795-c442636b55fb",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "98f13708-2101-34c4-b568-7be6106a3b84": {
              "_id": "98f13708-2101-34c4-b568-7be6106a3b84",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordSmtpSenderNode",
                "collection": true,
                "name": "OTP Email Sender"
              },
              "emailAttribute": "mail",
              "emailContent": {
                "en": "Here is your One Time Password: '{{OTP}}'.</p><p>If you did not request this, please contact support."
              },
              "emailSubject": {
                "en": "Your One Time Password"
              },
              "fromEmailAddress": "admin@example.com",
              "hostName": "mail.example.com",
              "hostPort": 25,
              "password": null,
              "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
              "sslOption": "SSL",
              "username": "admin@example.com"
            },
            "c74d97b0-1eae-357e-84aa-9d5bade97baf": {
              "_id": "c74d97b0-1eae-357e-84aa-9d5bade97baf",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "HmacOneTimePassword",
            "description": "null",
            "enabled": true,
            "entryNodeId": "c74d97b0-1eae-357e-84aa-9d5bade97baf",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1f0e3dad-9990-3345-b743-9f8ffabdffc4": {
                "connections": {
                  "outcome": "98f13708-2101-34c4-b568-7be6106a3b84"
                },
                "displayName": "HOTP Generator",
                "nodeType": "OneTimePasswordGeneratorNode",
                "x": 743.0625,
                "y": 58.5
              },
              "3c59dc04-8e88-3024-bbe8-079a5c74d079": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "OTP Collector Decision",
                "nodeType": "OneTimePasswordCollectorDecisionNode",
                "x": 1109.09375,
                "y": 35.859375
              },
              "6f4922f4-5568-361a-8cdf-4ad2299f6d23": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "1f0e3dad-9990-3345-b743-9f8ffabdffc4"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 546.546875,
                "y": 35.859375
              },
              "70efdf2e-c9b0-3607-9795-c442636b55fb": {
                "connections": {
                  "outcome": "6f4922f4-5568-361a-8cdf-4ad2299f6d23"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 353.9375,
                "y": 58.5
              },
              "98f13708-2101-34c4-b568-7be6106a3b84": {
                "connections": {
                  "outcome": "3c59dc04-8e88-3024-bbe8-079a5c74d079"
                },
                "displayName": "OTP Email Sender",
                "nodeType": "OneTimePasswordSmtpSenderNode",
                "x": 920.625,
                "y": 58.5
              },
              "c74d97b0-1eae-357e-84aa-9d5bade97baf": {
                "connections": {
                  "outcome": "70efdf2e-c9b0-3607-9795-c442636b55fb"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 152,
                "y": 58.5
              }
            },
            "staticNodes": {
              "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
                "x": 1326.34375,
                "y": 92
              },
              "e301438c-0bd0-429c-ab0c-66126501069a": {
                "x": 1326.34375,
                "y": 25
              },
              "startNode": {
                "x": 50,
                "y": 58.5
              }
            },
            "uiConfig": {}
          }
        },
        "PersistentCookie": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "6512bd43-d9ca-36e0-ac99-0b0a82652dca": {
              "_id": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3": {
              "_id": "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SetPersistentCookieNode",
                "collection": true,
                "name": "Set Persistent Cookie"
              },
              "hmacSigningKey": null,
              "idleTimeout": 5,
              "maxLife": 5,
              "persistentCookieName": "session-jwt",
              "useHttpOnlyCookie": true,
              "useSecureCookie": false
            },
            "aab32389-22bc-325a-af60-6eb525ffdc56": {
              "_id": "aab32389-22bc-325a-af60-6eb525ffdc56",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "PersistentCookieDecisionNode",
                "collection": true,
                "name": "Persistent Cookie Decision"
              },
              "enforceClientIp": false,
              "hmacSigningKey": null,
              "idleTimeout": 5,
              "persistentCookieName": "session-jwt",
              "useHttpOnlyCookie": true,
              "useSecureCookie": false
            },
            "c20ad4d7-6fe9-3759-aa27-a0c99bff6710": {
              "_id": "c20ad4d7-6fe9-3759-aa27-a0c99bff6710",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c51ce410-c124-310e-8db5-e4b97fc2af39": {
              "_id": "c51ce410-c124-310e-8db5-e4b97fc2af39",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PersistentCookie",
            "description": "null",
            "enabled": true,
            "entryNodeId": "aab32389-22bc-325a-af60-6eb525ffdc56",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "6512bd43-d9ca-36e0-ac99-0b0a82652dca": {
                "connections": {
                  "outcome": "c20ad4d7-6fe9-3759-aa27-a0c99bff6710"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Set Persistent Cookie",
                "nodeType": "SetPersistentCookieNode",
                "x": 0,
                "y": 0
              },
              "aab32389-22bc-325a-af60-6eb525ffdc56": {
                "connections": {
                  "false": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Persistent Cookie Decision",
                "nodeType": "PersistentCookieDecisionNode",
                "x": 0,
                "y": 0
              },
              "c20ad4d7-6fe9-3759-aa27-a0c99bff6710": {
                "connections": {
                  "outcome": "c51ce410-c124-310e-8db5-e4b97fc2af39"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c51ce410-c124-310e-8db5-e4b97fc2af39": {
                "connections": {
                  "false": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
                  "true": "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformForgottenUsername": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "d82c8d16-19ad-3176-9665-453cfb2e55f0": {
              "_id": "d82c8d16-19ad-3176-9665-453cfb2e55f0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "mail"
              ],
              "identityAttribute": "mail",
              "required": true,
              "validateInputs": false
            }
          },
          "nodes": {
            "72b32a1f-754b-31c0-9b36-95e0cb6cde7f": {
              "_id": "72b32a1f-754b-31c0-9b36-95e0cb6cde7f",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "InnerTreeEvaluatorNode",
                "collection": true,
                "name": "Inner Tree Evaluator"
              },
              "tree": "PlatformLogin"
            },
            "9f61408e-3afb-333e-90cd-f1b20de6f466": {
              "_id": "9f61408e-3afb-333e-90cd-f1b20de6f466",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
              },
              "emailTemplateName": "forgottenUsername",
              "identityAttribute": "mail",
              "objectLookup": true
            },
            "a684ecee-e76f-3522-b732-86a895bc8436": {
              "_id": "a684ecee-e76f-3522-b732-86a895bc8436",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "d82c8d16-19ad-3176-9665-453cfb2e55f0",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {
                "en": "Enter your email address or <a href=\"#/service/PlatformLogin\">Sign in</a>"
              },
              "pageHeader": {
                "en": "Forgotten Username"
              },
              "stage": "null"
            },
            "b53b3a3d-6ab9-3ce0-a682-29151c9bde11": {
              "_id": "b53b3a3d-6ab9-3ce0-a682-29151c9bde11",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "IdentifyExistingUserNode",
                "collection": true,
                "name": "Identify Existing User"
              },
              "identityAttribute": "mail"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformForgottenUsername",
            "description": "Forgotten Username Tree",
            "enabled": true,
            "entryNodeId": "a684ecee-e76f-3522-b732-86a895bc8436",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "72b32a1f-754b-31c0-9b36-95e0cb6cde7f": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Inner Tree Evaluator",
                "nodeType": "InnerTreeEvaluatorNode",
                "x": 0,
                "y": 0
              },
              "9f61408e-3afb-333e-90cd-f1b20de6f466": {
                "connections": {
                  "outcome": "72b32a1f-754b-31c0-9b36-95e0cb6cde7f"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "a684ecee-e76f-3522-b732-86a895bc8436": {
                "connections": {
                  "outcome": "b53b3a3d-6ab9-3ce0-a682-29151c9bde11"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "b53b3a3d-6ab9-3ce0-a682-29151c9bde11": {
                "connections": {
                  "false": "9f61408e-3afb-333e-90cd-f1b20de6f466",
                  "true": "9f61408e-3afb-333e-90cd-f1b20de6f466"
                },
                "displayName": "Identify Existing User",
                "nodeType": "IdentifyExistingUserNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformLogin": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "642e92ef-b794-3173-8881-b53e1e1b18b6": {
              "_id": "642e92ef-b794-3173-8881-b53e1e1b18b6",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            },
            "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7": {
              "_id": "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            }
          },
          "nodes": {
            "2838023a-778d-3aec-9c21-2708f721b788": {
              "_id": "2838023a-778d-3aec-9c21-2708f721b788",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "IncrementLoginCountNode",
                "collection": true,
                "name": "Increment Login Count"
              },
              "identityAttribute": "userName"
            },
            "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8": {
              "_id": "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "InnerTreeEvaluatorNode",
                "collection": true,
                "name": "Inner Tree Evaluator"
              },
              "tree": "PlatformProgressiveProfile"
            },
            "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a": {
              "_id": "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "f457c545-a9de-388f-98ec-ee47145a72c0": {
              "_id": "f457c545-a9de-388f-98ec-ee47145a72c0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "642e92ef-b794-3173-8881-b53e1e1b18b6",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "New here? <a href=\"#/service/PlatformRegistration\">Create an account</a><br><a href=\"#/service/PlatformForgottenUsername\">Forgot username?</a><a href=\"#/service/PlatformResetPassword\"> Forgot password?</a>"
              },
              "pageHeader": {
                "en": "Sign In"
              },
              "stage": "null"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformLogin",
            "description": "Platform Login Tree",
            "enabled": true,
            "entryNodeId": "f457c545-a9de-388f-98ec-ee47145a72c0",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "2838023a-778d-3aec-9c21-2708f721b788": {
                "connections": {
                  "outcome": "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8"
                },
                "displayName": "Increment Login Count",
                "nodeType": "IncrementLoginCountNode",
                "x": 0,
                "y": 0
              },
              "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Inner Tree Evaluator",
                "nodeType": "InnerTreeEvaluatorNode",
                "x": 0,
                "y": 0
              },
              "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "2838023a-778d-3aec-9c21-2708f721b788"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "f457c545-a9de-388f-98ec-ee47145a72c0": {
                "connections": {
                  "outcome": "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformProgressiveProfile": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "f7177163-c833-3ff4-b38f-c8d2872f1ec6": {
              "_id": "f7177163-c833-3ff4-b38f-c8d2872f1ec6",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "preferences/updates",
                "preferences/marketing"
              ],
              "identityAttribute": "userName",
              "required": false,
              "validateInputs": false
            }
          },
          "nodes": {
            "17e62166-fc85-36df-a4d1-bc0e1742c08b": {
              "_id": "17e62166-fc85-36df-a4d1-bc0e1742c08b",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "QueryFilterDecisionNode",
                "collection": true,
                "name": "Query Filter Decision"
              },
              "identityAttribute": "userName",
              "queryFilter": "!(/preferences pr) or /preferences/marketing eq false or /preferences/updates eq false"
            },
            "6c8349cc-7260-3e62-a3b1-396831a8398f": {
              "_id": "6c8349cc-7260-3e62-a3b1-396831a8398f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "f7177163-c833-3ff4-b38f-c8d2872f1ec6",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {},
              "pageHeader": {
                "en": "Please select your preferences"
              },
              "stage": "null"
            },
            "a1d0c6e8-3f02-3327-9846-1063f4ac58a6": {
              "_id": "a1d0c6e8-3f02-3327-9846-1063f4ac58a6",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "LoginCountDecisionNode",
                "collection": true,
                "name": "Login Count Decision"
              },
              "amount": 3,
              "identityAttribute": "userName",
              "interval": "AT"
            },
            "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f": {
              "_id": "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "userName",
              "identityResource": "managed/user",
              "ignoredFields": [],
              "patchAsObject": false
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformProgressiveProfile",
            "description": "Prompt for missing preferences on 3rd login",
            "enabled": true,
            "entryNodeId": "a1d0c6e8-3f02-3327-9846-1063f4ac58a6",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "17e62166-fc85-36df-a4d1-bc0e1742c08b": {
                "connections": {
                  "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "true": "6c8349cc-7260-3e62-a3b1-396831a8398f"
                },
                "displayName": "Query Filter Decision",
                "nodeType": "QueryFilterDecisionNode",
                "x": 0,
                "y": 0
              },
              "6c8349cc-7260-3e62-a3b1-396831a8398f": {
                "connections": {
                  "outcome": "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "a1d0c6e8-3f02-3327-9846-1063f4ac58a6": {
                "connections": {
                  "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "true": "17e62166-fc85-36df-a4d1-bc0e1742c08b"
                },
                "displayName": "Login Count Decision",
                "nodeType": "LoginCountDecisionNode",
                "x": 0,
                "y": 0
              },
              "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformRegistration": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "19ca14e7-ea63-38a4-ae0e-b13d585e4c22": {
              "_id": "19ca14e7-ea63-38a4-ae0e-b13d585e4c22",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "givenName",
                "sn",
                "mail",
                "preferences/marketing",
                "preferences/updates"
              ],
              "identityAttribute": "userName",
              "required": true,
              "validateInputs": true
            },
            "1c383cd3-0b7c-398a-b502-93adfecb7b18": {
              "_id": "1c383cd3-0b7c-398a-b502-93adfecb7b18",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            },
            "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa": {
              "_id": "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AcceptTermsAndConditionsNode",
                "collection": true,
                "name": "Accept Terms and Conditions"
              }
            },
            "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d": {
              "_id": "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "KbaCreateNode",
                "collection": true,
                "name": "KBA Definition"
              },
              "allowUserDefinedQuestions": true,
              "message": {
                "en": "Select a security question"
              }
            },
            "e369853d-f766-3a44-a1ed-0ff613f563bd": {
              "_id": "e369853d-f766-3a44-a1ed-0ff613f563bd",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": true
            }
          },
          "nodes": {
            "3416a75f-4cea-3109-907c-acd8e2f2aefc": {
              "_id": "3416a75f-4cea-3109-907c-acd8e2f2aefc",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "IncrementLoginCountNode",
                "collection": true,
                "name": "Increment Login Count"
              },
              "identityAttribute": "userName"
            },
            "d645920e-395f-3dad-bbbb-ed0eca3fe2e0": {
              "_id": "d645920e-395f-3dad-bbbb-ed0eca3fe2e0",
              "_outcomes": [
                {
                  "displayName": "Created",
                  "id": "CREATED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "CreateObjectNode",
                "collection": true,
                "name": "Create Object"
              },
              "identityResource": "managed/user"
            },
            "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c": {
              "_id": "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "e369853d-f766-3a44-a1ed-0ff613f563bd",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "19ca14e7-ea63-38a4-ae0e-b13d585e4c22",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                },
                {
                  "_id": "1c383cd3-0b7c-398a-b502-93adfecb7b18",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                },
                {
                  "_id": "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d",
                  "displayName": "KBA Definition",
                  "nodeType": "KbaCreateNode"
                },
                {
                  "_id": "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa",
                  "displayName": "Accept Terms and Conditions",
                  "nodeType": "AcceptTermsAndConditionsNode"
                }
              ],
              "pageDescription": {
                "en": "Signing up is fast and easy.<br>Already have an account?<a href='#/service/PlatformLogin'>Sign In</a>"
              },
              "pageHeader": {
                "en": "Sign Up"
              },
              "stage": "null"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformRegistration",
            "description": "Platform Registration Tree",
            "enabled": true,
            "entryNodeId": "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "3416a75f-4cea-3109-907c-acd8e2f2aefc": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Increment Login Count",
                "nodeType": "IncrementLoginCountNode",
                "x": 0,
                "y": 0
              },
              "d645920e-395f-3dad-bbbb-ed0eca3fe2e0": {
                "connections": {
                  "CREATED": "3416a75f-4cea-3109-907c-acd8e2f2aefc",
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "Create Object",
                "nodeType": "CreateObjectNode",
                "x": 0,
                "y": 0
              },
              "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c": {
                "connections": {
                  "outcome": "d645920e-395f-3dad-bbbb-ed0eca3fe2e0"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformResetPassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "44f683a8-4163-3352-bafe-57c2e008bc8c": {
              "_id": "44f683a8-4163-3352-bafe-57c2e008bc8c",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            },
            "66f041e1-6a60-328b-85a7-e228a89c3799": {
              "_id": "66f041e1-6a60-328b-85a7-e228a89c3799",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "mail"
              ],
              "identityAttribute": "mail",
              "required": true,
              "validateInputs": false
            }
          },
          "nodes": {
            "03afdbd6-6e79-39b1-a5f8-597834fa83a4": {
              "_id": "03afdbd6-6e79-39b1-a5f8-597834fa83a4",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "44f683a8-4163-3352-bafe-57c2e008bc8c",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Change password"
              },
              "pageHeader": {
                "en": "Reset Password"
              },
              "stage": "null"
            },
            "072b030b-a126-32f4-b237-4f342be9ed44": {
              "_id": "072b030b-a126-32f4-b237-4f342be9ed44",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "IdentifyExistingUserNode",
                "collection": true,
                "name": "Identify Existing User"
              },
              "identifier": "userName",
              "identityAttribute": "mail"
            },
            "093f65e0-80a2-35f8-876b-1c5722a46aa2": {
              "_id": "093f65e0-80a2-35f8-876b-1c5722a46aa2",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "66f041e1-6a60-328b-85a7-e228a89c3799",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {
                "en": "Enter your email address or <a href=\"#/service/PlatformLogin\">Sign in</a>"
              },
              "pageHeader": {
                "en": "Reset Password"
              },
              "stage": "null"
            },
            "7f39f831-7fbd-3198-8ef4-c628eba02591": {
              "_id": "7f39f831-7fbd-3198-8ef4-c628eba02591",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
              },
              "emailTemplateName": "resetPassword",
              "identityAttribute": "mail",
              "objectLookup": true
            },
            "ea5d2f1c-4608-332e-87d3-aa3d998e5135": {
              "_id": "ea5d2f1c-4608-332e-87d3-aa3d998e5135",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "mail",
              "identityResource": "managed/user",
              "ignoredFields": [],
              "patchAsObject": false
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformResetPassword",
            "description": "Reset Password Tree",
            "enabled": true,
            "entryNodeId": "093f65e0-80a2-35f8-876b-1c5722a46aa2",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "03afdbd6-6e79-39b1-a5f8-597834fa83a4": {
                "connections": {
                  "outcome": "ea5d2f1c-4608-332e-87d3-aa3d998e5135"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "072b030b-a126-32f4-b237-4f342be9ed44": {
                "connections": {
                  "false": "7f39f831-7fbd-3198-8ef4-c628eba02591",
                  "true": "7f39f831-7fbd-3198-8ef4-c628eba02591"
                },
                "displayName": "Identify Existing User",
                "nodeType": "IdentifyExistingUserNode",
                "x": 0,
                "y": 0
              },
              "093f65e0-80a2-35f8-876b-1c5722a46aa2": {
                "connections": {
                  "outcome": "072b030b-a126-32f4-b237-4f342be9ed44"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "7f39f831-7fbd-3198-8ef4-c628eba02591": {
                "connections": {
                  "outcome": "03afdbd6-6e79-39b1-a5f8-597834fa83a4"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "ea5d2f1c-4608-332e-87d3-aa3d998e5135": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformUpdatePassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "735b90b4-5681-35ed-ac3f-678819b6e058": {
              "_id": "735b90b4-5681-35ed-ac3f-678819b6e058",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            },
            "7cbbc409-ec99-3f19-878c-75bd1e06f215": {
              "_id": "7cbbc409-ec99-3f19-878c-75bd1e06f215",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            }
          },
          "nodes": {
            "14bfa6bb-1487-3e45-bba0-28a21ed38046": {
              "_id": "14bfa6bb-1487-3e45-bba0-28a21ed38046",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1": {
              "_id": "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "AttributePresentDecisionNode",
                "collection": true,
                "name": "Attribute Present Decision"
              },
              "identityAttribute": "userName",
              "presentAttribute": "password"
            },
            "32bb90e8-976a-3b52-98d5-da10fe66f21d": {
              "_id": "32bb90e8-976a-3b52-98d5-da10fe66f21d",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to your address, please verify  your email address to update your password. Click the link in that email to proceed."
              },
              "emailTemplateName": "updatePassword",
              "identityAttribute": "userName",
              "objectLookup": true
            },
            "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db": {
              "_id": "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "735b90b4-5681-35ed-ac3f-678819b6e058",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Enter current password"
              },
              "pageHeader": {
                "en": "Verify Existing Password"
              },
              "stage": "null"
            },
            "d2ddea18-f006-35ce-8623-e36bd4e3c7c5": {
              "_id": "d2ddea18-f006-35ce-8623-e36bd4e3c7c5",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "userName",
              "identityResource": "managed/user",
              "ignoredFields": [
                "userName"
              ],
              "patchAsObject": true
            },
            "e2c420d9-28d4-3f8c-a0ff-2ec19b371514": {
              "_id": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "7cbbc409-ec99-3f19-878c-75bd1e06f215",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Enter new password"
              },
              "pageHeader": {
                "en": "Update Password"
              },
              "stage": "null"
            },
            "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb": {
              "_id": "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SessionDataNode",
                "collection": true,
                "name": "Get Session Data"
              },
              "sessionDataKey": "UserToken",
              "sharedStateKey": "userName"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformUpdatePassword",
            "description": "Update password using active session",
            "enabled": true,
            "entryNodeId": "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "14bfa6bb-1487-3e45-bba0-28a21ed38046": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1": {
                "connections": {
                  "false": "32bb90e8-976a-3b52-98d5-da10fe66f21d",
                  "true": "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db"
                },
                "displayName": "Attribute Present Decision",
                "nodeType": "AttributePresentDecisionNode",
                "x": 0,
                "y": 0
              },
              "32bb90e8-976a-3b52-98d5-da10fe66f21d": {
                "connections": {
                  "outcome": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db": {
                "connections": {
                  "outcome": "14bfa6bb-1487-3e45-bba0-28a21ed38046"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "d2ddea18-f006-35ce-8623-e36bd4e3c7c5": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              },
              "e2c420d9-28d4-3f8c-a0ff-2ec19b371514": {
                "connections": {
                  "outcome": "d2ddea18-f006-35ce-8623-e36bd4e3c7c5"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb": {
                "connections": {
                  "outcome": "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1"
                },
                "displayName": "Get Session Data",
                "nodeType": "SessionDataNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "RetryLimit": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1679091c-5a88-3faf-afb5-e6087eb1b2dc": {
              "_id": "1679091c-5a88-3faf-afb5-e6087eb1b2dc",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26": {
              "_id": "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26",
              "_outcomes": [
                {
                  "displayName": "Retry",
                  "id": "Retry"
                },
                {
                  "displayName": "Reject",
                  "id": "Reject"
                }
              ],
              "_type": {
                "_id": "RetryLimitDecisionNode",
                "collection": true,
                "name": "Retry Limit Decision"
              },
              "incrementUserAttributeOnFailure": true,
              "retryLimit": 3
            },
            "8f14e45f-ceea-367a-9a36-dedd4bea2543": {
              "_id": "8f14e45f-ceea-367a-9a36-dedd4bea2543",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c9f0f895-fb98-3b91-99f5-1fd0297e236d": {
              "_id": "c9f0f895-fb98-3b91-99f5-1fd0297e236d",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "d3d94468-02a4-3259-b55d-38e6d163e820": {
              "_id": "d3d94468-02a4-3259-b55d-38e6d163e820",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AccountLockoutNode",
                "collection": true,
                "name": "Account Lockout"
              },
              "lockAction": "LOCK"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "RetryLimit",
            "description": "null",
            "enabled": true,
            "entryNodeId": "1679091c-5a88-3faf-afb5-e6087eb1b2dc",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1679091c-5a88-3faf-afb5-e6087eb1b2dc": {
                "connections": {
                  "outcome": "8f14e45f-ceea-367a-9a36-dedd4bea2543"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26": {
                "connections": {
                  "Reject": "d3d94468-02a4-3259-b55d-38e6d163e820",
                  "Retry": "1679091c-5a88-3faf-afb5-e6087eb1b2dc"
                },
                "displayName": "Retry Limit Decision",
                "nodeType": "RetryLimitDecisionNode",
                "x": 0,
                "y": 0
              },
              "8f14e45f-ceea-367a-9a36-dedd4bea2543": {
                "connections": {
                  "outcome": "c9f0f895-fb98-3b91-99f5-1fd0297e236d"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c9f0f895-fb98-3b91-99f5-1fd0297e236d": {
                "connections": {
                  "false": "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "d3d94468-02a4-3259-b55d-38e6d163e820": {
                "connections": {
                  "outcome": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "Account Lockout",
                "nodeType": "AccountLockoutNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "oath_registration": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "7d7c8acb-e39b-466c-bbaf-cc70a3bf247c": {
              "_id": "7d7c8acb-e39b-466c-bbaf-cc70a3bf247c",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "a2f9aa81-fdea-403d-bcc8-a5342cc5d34f": {
              "_id": "a2f9aa81-fdea-403d-bcc8-a5342cc5d34f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            }
          },
          "nodes": {
            "35ca2418-908d-4b92-9320-ef8576851abb": {
              "_id": "35ca2418-908d-4b92-9320-ef8576851abb",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "9bfb80e1-e05a-4b3c-90bd-7091c2839e28": {
              "_id": "9bfb80e1-e05a-4b3c-90bd-7091c2839e28",
              "_outcomes": [
                {
                  "displayName": "Success",
                  "id": "successOutcome"
                },
                {
                  "displayName": "Failure",
                  "id": "failureOutcome"
                }
              ],
              "_type": {
                "_id": "OathRegistrationNode",
                "collection": true,
                "name": "OATH Registration"
              },
              "accountName": "USERNAME",
              "addChecksum": false,
              "algorithm": "TOTP",
              "bgColor": "032b75",
              "generateRecoveryCodes": true,
              "issuer": "ForgeRock",
              "minSharedSecretLength": 32,
              "passwordLength": "SIX_DIGITS",
              "postponeDeviceProfileStorage": false,
              "scanQRCodeMessage": {},
              "totpHashAlgorithm": "HMAC_SHA1",
              "totpTimeInterval": 30,
              "truncationOffset": -1
            },
            "ab49ab43-4d09-46f2-a9ba-7330a6a7dce6": {
              "_id": "ab49ab43-4d09-46f2-a9ba-7330a6a7dce6",
              "_outcomes": [
                {
                  "displayName": "Success",
                  "id": "successOutcome"
                },
                {
                  "displayName": "Failure",
                  "id": "failureOutcome"
                },
                {
                  "displayName": "Not registered",
                  "id": "notRegisteredOutcome"
                }
              ],
              "_type": {
                "_id": "OathTokenVerifierNode",
                "collection": true,
                "name": "OATH Token Verifier"
              },
              "algorithm": "TOTP",
              "hotpWindowSize": 100,
              "isRecoveryCodeAllowed": false,
              "maximumAllowedClockDrift": 5,
              "totpHashAlgorithm": "HMAC_SHA1",
              "totpTimeInterval": 30,
              "totpTimeSteps": 2
            },
            "fc5481db-cbee-479f-915a-2b40c54ce04e": {
              "_id": "fc5481db-cbee-479f-915a-2b40c54ce04e",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "7d7c8acb-e39b-466c-bbaf-cc70a3bf247c",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "a2f9aa81-fdea-403d-bcc8-a5342cc5d34f",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {},
              "pageHeader": {}
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "oath_registration",
            "enabled": true,
            "entryNodeId": "fc5481db-cbee-479f-915a-2b40c54ce04e",
            "innerTreeOnly": false,
            "nodes": {
              "35ca2418-908d-4b92-9320-ef8576851abb": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "ab49ab43-4d09-46f2-a9ba-7330a6a7dce6"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 416,
                "y": 161
              },
              "9bfb80e1-e05a-4b3c-90bd-7091c2839e28": {
                "connections": {
                  "failureOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "successOutcome": "ab49ab43-4d09-46f2-a9ba-7330a6a7dce6"
                },
                "displayName": "OATH Registration",
                "nodeType": "OathRegistrationNode",
                "x": 717,
                "y": 290
              },
              "ab49ab43-4d09-46f2-a9ba-7330a6a7dce6": {
                "connections": {
                  "failureOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "notRegisteredOutcome": "9bfb80e1-e05a-4b3c-90bd-7091c2839e28",
                  "successOutcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "OATH Token Verifier",
                "nodeType": "OathTokenVerifierNode",
                "x": 689,
                "y": 102
              },
              "fc5481db-cbee-479f-915a-2b40c54ce04e": {
                "connections": {
                  "outcome": "35ca2418-908d-4b92-9320-ef8576851abb"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 202,
                "y": 139
              }
            },
            "staticNodes": {
              "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
                "x": 1103,
                "y": 47
              },
              "e301438c-0bd0-429c-ab0c-66126501069a": {
                "x": 1100,
                "y": 240
              },
              "startNode": {
                "x": 50,
                "y": 25
              }
            },
            "uiConfig": {}
          }
        },
        "push_registration": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "1eb148f2-82e0-49c6-a330-e6a6d1a9eea9": {
              "_id": "1eb148f2-82e0-49c6-a330-e6a6d1a9eea9",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "7ab18633-6eb0-455d-97ff-40ff7db4862a": {
              "_id": "7ab18633-6eb0-455d-97ff-40ff7db4862a",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            }
          },
          "nodes": {
            "07bc635b-5a3f-461b-87ee-e76c9fa22738": {
              "_id": "07bc635b-5a3f-461b-87ee-e76c9fa22738",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "1eb148f2-82e0-49c6-a330-e6a6d1a9eea9",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "7ab18633-6eb0-455d-97ff-40ff7db4862a",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {},
              "pageHeader": {}
            },
            "0e161d10-c2d1-4196-8b41-59f80be4a587": {
              "_id": "0e161d10-c2d1-4196-8b41-59f80be4a587",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "1323d24e-b9f8-4396-a9ce-4550fe3ac84f": {
              "_id": "1323d24e-b9f8-4396-a9ce-4550fe3ac84f",
              "_outcomes": [
                {
                  "displayName": "Sent",
                  "id": "SENT"
                },
                {
                  "displayName": "Not Registered",
                  "id": "NOT_REGISTERED"
                },
                {
                  "displayName": "Skipped",
                  "id": "SKIPPED"
                }
              ],
              "_type": {
                "_id": "PushAuthenticationSenderNode",
                "collection": true,
                "name": "Push Sender"
              },
              "captureFailure": false,
              "contextInfo": false,
              "customPayload": [],
              "mandatory": false,
              "messageTimeout": 120000,
              "pushType": "DEFAULT",
              "userMessage": {}
            },
            "527e6b31-01db-409c-8f52-01a5b7f48737": {
              "_id": "527e6b31-01db-409c-8f52-01a5b7f48737",
              "_outcomes": [
                {
                  "displayName": "Success",
                  "id": "TRUE"
                },
                {
                  "displayName": "Failure",
                  "id": "FALSE"
                },
                {
                  "displayName": "Expired",
                  "id": "EXPIRED"
                },
                {
                  "displayName": "Waiting",
                  "id": "WAITING"
                }
              ],
              "_type": {
                "_id": "PushResultVerifierNode",
                "collection": true,
                "name": "Push Result Verifier Node"
              }
            },
            "c03b9d7b-3c91-4de4-9f6b-b9f7f7ce999c": {
              "_id": "c03b9d7b-3c91-4de4-9f6b-b9f7f7ce999c",
              "_outcomes": [
                {
                  "displayName": "Success",
                  "id": "successOutcome"
                },
                {
                  "displayName": "Failure",
                  "id": "failureOutcome"
                },
                {
                  "displayName": "Time Out",
                  "id": "timeoutOutcome"
                }
              ],
              "_type": {
                "_id": "PushRegistrationNode",
                "collection": true,
                "name": "Push Registration"
              },
              "accountName": "USERNAME",
              "bgColor": "032b75",
              "generateRecoveryCodes": true,
              "issuer": "ForgeRock",
              "scanQRCodeMessage": {},
              "timeout": 60
            },
            "ccb48486-0d8e-475d-a002-29d0bfa1177a": {
              "_id": "ccb48486-0d8e-475d-a002-29d0bfa1177a",
              "_outcomes": [
                {
                  "displayName": "Done",
                  "id": "DONE"
                },
                {
                  "displayName": "Exit",
                  "id": "EXITED"
                }
              ],
              "_type": {
                "_id": "PushWaitNode",
                "collection": true,
                "name": "Push Wait Node"
              },
              "challengeMessage": {},
              "exitMessage": {},
              "secondsToWait": 5,
              "waitingMessage": {}
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "push_registration",
            "enabled": true,
            "entryNodeId": "07bc635b-5a3f-461b-87ee-e76c9fa22738",
            "innerTreeOnly": false,
            "nodes": {
              "07bc635b-5a3f-461b-87ee-e76c9fa22738": {
                "connections": {},
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 180,
                "y": 133
              },
              "0e161d10-c2d1-4196-8b41-59f80be4a587": {
                "connections": {
                  "true": "1323d24e-b9f8-4396-a9ce-4550fe3ac84f"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 406,
                "y": 126
              },
              "1323d24e-b9f8-4396-a9ce-4550fe3ac84f": {
                "connections": {
                  "NOT_REGISTERED": "c03b9d7b-3c91-4de4-9f6b-b9f7f7ce999c",
                  "SENT": "ccb48486-0d8e-475d-a002-29d0bfa1177a",
                  "SKIPPED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Push Sender",
                "nodeType": "PushAuthenticationSenderNode",
                "x": 647,
                "y": 79
              },
              "527e6b31-01db-409c-8f52-01a5b7f48737": {
                "connections": {
                  "EXPIRED": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "FALSE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "TRUE": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "WAITING": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "Push Result Verifier Node",
                "nodeType": "PushResultVerifierNode",
                "x": 1016,
                "y": 122
              },
              "c03b9d7b-3c91-4de4-9f6b-b9f7f7ce999c": {
                "connections": {
                  "failureOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "successOutcome": "1323d24e-b9f8-4396-a9ce-4550fe3ac84f",
                  "timeoutOutcome": "07bc635b-5a3f-461b-87ee-e76c9fa22738"
                },
                "displayName": "Push Registration",
                "nodeType": "PushRegistrationNode",
                "x": 639,
                "y": 299
              },
              "ccb48486-0d8e-475d-a002-29d0bfa1177a": {
                "connections": {
                  "DONE": "527e6b31-01db-409c-8f52-01a5b7f48737",
                  "EXITED": "07bc635b-5a3f-461b-87ee-e76c9fa22738"
                },
                "displayName": "Push Wait Node",
                "nodeType": "PushWaitNode",
                "x": 823,
                "y": 126
              }
            },
            "staticNodes": {
              "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
                "x": 1245,
                "y": 35
              },
              "e301438c-0bd0-429c-ab0c-66126501069a": {
                "x": 1292,
                "y": 172
              },
              "startNode": {
                "x": 57,
                "y": 22
              }
            },
            "uiConfig": {}
          }
        },
        "six": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "295a70ba-2b67-4a48-bf13-237ce0a55450": {
              "_id": "295a70ba-2b67-4a48-bf13-237ce0a55450",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "4a77788d-d443-4646-ac52-5cb9f2207a8a": {
              "_id": "4a77788d-d443-4646-ac52-5cb9f2207a8a",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "5883ff1e-80dd-49f5-a609-120303e1b0cd": {
              "_id": "5883ff1e-80dd-49f5-a609-120303e1b0cd",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "59129227-f192-4ff4-a7b4-bc7690b82d4f": {
              "_id": "59129227-f192-4ff4-a7b4-bc7690b82d4f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "6a1aa88f-25f8-4d40-8008-bfc6684b2a58": {
              "_id": "6a1aa88f-25f8-4d40-8008-bfc6684b2a58",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "8b1a8dc8-338f-46af-a4c5-6fe7cf6a2cf5": {
              "_id": "8b1a8dc8-338f-46af-a4c5-6fe7cf6a2cf5",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "six",
            "enabled": true,
            "entryNodeId": "e301438c-0bd0-429c-ab0c-66126501069a",
            "innerTreeOnly": false,
            "nodes": {
              "295a70ba-2b67-4a48-bf13-237ce0a55450": {
                "connections": {},
                "displayName": "Platform Username",
                "nodeType": "ValidatedUsernameNode",
                "x": 488,
                "y": 57.890625
              },
              "4a77788d-d443-4646-ac52-5cb9f2207a8a": {
                "connections": {},
                "displayName": "Platform Username",
                "nodeType": "ValidatedUsernameNode",
                "x": 494,
                "y": 458.890625
              },
              "5883ff1e-80dd-49f5-a609-120303e1b0cd": {
                "connections": {},
                "displayName": "Platform Username",
                "nodeType": "ValidatedUsernameNode",
                "x": 446,
                "y": 298.890625
              },
              "59129227-f192-4ff4-a7b4-bc7690b82d4f": {
                "connections": {},
                "displayName": "Platform Username",
                "nodeType": "ValidatedUsernameNode",
                "x": 482,
                "y": 220.890625
              },
              "6a1aa88f-25f8-4d40-8008-bfc6684b2a58": {
                "connections": {},
                "displayName": "Platform Username",
                "nodeType": "ValidatedUsernameNode",
                "x": 461,
                "y": 369.890625
              },
              "8b1a8dc8-338f-46af-a4c5-6fe7cf6a2cf5": {
                "connections": {},
                "displayName": "Platform Username",
                "nodeType": "ValidatedUsernameNode",
                "x": 499,
                "y": 139.890625
              }
            },
            "staticNodes": {
              "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
                "x": 50,
                "y": 117
              },
              "e301438c-0bd0-429c-ab0c-66126501069a": {
                "x": 152,
                "y": 25
              },
              "startNode": {
                "x": 50,
                "y": 25
              }
            },
            "uiConfig": {}
          }
        },
        "test": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {},
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "test",
            "enabled": true,
            "entryNodeId": "d26176be-ea6f-4f2a-81cd-3d41dd6cee4d",
            "innerTreeOnly": false,
            "nodes": {},
            "staticNodes": {
              "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
                "x": 50,
                "y": 117
              },
              "e301438c-0bd0-429c-ab0c-66126501069a": {
                "x": 152,
                "y": 25
              },
              "startNode": {
                "x": 50,
                "y": 25
              }
            },
            "uiConfig": {}
          }
        },
        "webauthn_registration": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "08faa9c0-7c19-454a-a4e1-0692d94615f6": {
              "_id": "08faa9c0-7c19-454a-a4e1-0692d94615f6",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            },
            "3334a349-b2ea-42e0-86b8-9f6c39d43dad": {
              "_id": "3334a349-b2ea-42e0-86b8-9f6c39d43dad",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            }
          },
          "nodes": {
            "72ef6e1d-930c-4bed-922a-850815d98ea1": {
              "_id": "72ef6e1d-930c-4bed-922a-850815d98ea1",
              "_outcomes": [
                {
                  "displayName": "Unsupported",
                  "id": "unsupported"
                },
                {
                  "displayName": "Success",
                  "id": "success"
                },
                {
                  "displayName": "Failure",
                  "id": "failure"
                },
                {
                  "displayName": "Client Error",
                  "id": "error"
                }
              ],
              "_type": {
                "_id": "WebAuthnRegistrationNode",
                "collection": true,
                "name": "WebAuthn Registration Node"
              },
              "acceptedSigningAlgorithms": [
                "ES256",
                "RS256"
              ],
              "asScript": true,
              "attestationPreference": "NONE",
              "authenticatorAttachment": "UNSPECIFIED",
              "enforceRevocationCheck": false,
              "excludeCredentials": false,
              "generateRecoveryCodes": true,
              "maxSavedDevices": 0,
              "origins": [],
              "postponeDeviceProfileStorage": false,
              "relyingPartyName": "ForgeRock",
              "requiresResidentKey": false,
              "storeAttestationDataInTransientState": false,
              "timeout": 60,
              "trustStoreAlias": "trustalias",
              "userVerificationRequirement": "PREFERRED"
            },
            "807106ff-fb66-469e-93bb-4e0834f6c875": {
              "_id": "807106ff-fb66-469e-93bb-4e0834f6c875",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "08faa9c0-7c19-454a-a4e1-0692d94615f6",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "3334a349-b2ea-42e0-86b8-9f6c39d43dad",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {},
              "pageHeader": {}
            },
            "878eb28e-41b2-4bd7-9256-80ed427bd168": {
              "_id": "878eb28e-41b2-4bd7-9256-80ed427bd168",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "9fce34fc-03f1-4fb1-8ce5-1feff34a403c": {
              "_id": "9fce34fc-03f1-4fb1-8ce5-1feff34a403c",
              "_outcomes": [
                {
                  "displayName": "Unsupported",
                  "id": "unsupported"
                },
                {
                  "displayName": "No Device Registered",
                  "id": "noDevice"
                },
                {
                  "displayName": "Success",
                  "id": "success"
                },
                {
                  "displayName": "Failure",
                  "id": "failure"
                },
                {
                  "displayName": "Client Error",
                  "id": "error"
                }
              ],
              "_type": {
                "_id": "WebAuthnAuthenticationNode",
                "collection": true,
                "name": "WebAuthn Authentication Node"
              },
              "asScript": true,
              "isRecoveryCodeAllowed": false,
              "origins": [],
              "requiresResidentKey": false,
              "timeout": 60,
              "userVerificationRequirement": "PREFERRED"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "webauthn_registration",
            "enabled": true,
            "entryNodeId": "807106ff-fb66-469e-93bb-4e0834f6c875",
            "innerTreeOnly": false,
            "nodes": {
              "72ef6e1d-930c-4bed-922a-850815d98ea1": {
                "connections": {
                  "error": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "failure": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "success": "9fce34fc-03f1-4fb1-8ce5-1feff34a403c",
                  "unsupported": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "WebAuthn Registration Node",
                "nodeType": "WebAuthnRegistrationNode",
                "x": 629,
                "y": 266
              },
              "807106ff-fb66-469e-93bb-4e0834f6c875": {
                "connections": {
                  "outcome": "878eb28e-41b2-4bd7-9256-80ed427bd168"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 192,
                "y": 156
              },
              "878eb28e-41b2-4bd7-9256-80ed427bd168": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "9fce34fc-03f1-4fb1-8ce5-1feff34a403c"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 396,
                "y": 157
              },
              "9fce34fc-03f1-4fb1-8ce5-1feff34a403c": {
                "connections": {
                  "error": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "failure": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "noDevice": "72ef6e1d-930c-4bed-922a-850815d98ea1",
                  "success": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "unsupported": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "WebAuthn Authentication Node",
                "nodeType": "WebAuthnAuthenticationNode",
                "x": 608,
                "y": 24
              }
            },
            "staticNodes": {
              "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
                "x": 1200,
                "y": 34
              },
              "e301438c-0bd0-429c-ab0c-66126501069a": {
                "x": 1206,
                "y": 135
              },
              "startNode": {
                "x": 76,
                "y": 98
              }
            },
            "uiConfig": {}
          }
        }
      },
      "trustedJwtIssuer": {
        "test-jwt-issuer": {
          "_id": "test-jwt-issuer",
          "_type": {
            "_id": "TrustedJwtIssuer",
            "collection": true,
            "name": "OAuth2 Trusted JWT Issuer"
          },
          "agentgroup": null,
          "allowedSubjects": [],
          "consentedScopesClaim": "scope",
          "issuer": "hello",
          "jwkSet": null,
          "jwkStoreCacheMissCacheTime": 60000,
          "jwksCacheTimeout": 3600000,
          "jwksUri": null,
          "resourceOwnerIdentityClaim": "sub"
        },
        "trusted jwt": {
          "_id": "trusted jwt",
          "_type": {
            "_id": "TrustedJwtIssuer",
            "collection": true,
            "name": "OAuth2 Trusted JWT Issuer"
          },
          "agentgroup": null,
          "allowedSubjects": [],
          "consentedScopesClaim": "scope",
          "issuer": null,
          "jwkSet": null,
          "jwkStoreCacheMissCacheTime": 60000,
          "jwksCacheTimeout": 3600000,
          "jwksUri": null,
          "resourceOwnerIdentityClaim": "sub"
        }
      },
      "webhookService": {
        "Cool Webhook": {
          "_id": "Cool Webhook",
          "_type": {
            "_id": "webhooks",
            "collection": true,
            "name": "Webhook Service"
          },
          "body": "body",
          "headers": {
            "accept": "*/*",
            "cool": "test"
          },
          "url": "test"
        },
        "Test Webhook": {
          "_id": "Test Webhook",
          "_type": {
            "_id": "webhooks",
            "collection": true,
            "name": "Webhook Service"
          },
          "body": "hello",
          "headers": {
            "accept": "*/*"
          }
        }
      },
      "wsEntity": {
        "ws": {
          "_id": "ws",
          "_type": {
            "_id": "ws",
            "collection": true,
            "name": "Entity Descriptor "
          }
        }
      }
    },
    "root-first": {
      "agent": {},
      "agentGroup": {},
      "application": {},
      "applicationTypes": {
        "iPlanetAMWebAgentService": {
          "_id": "iPlanetAMWebAgentService",
          "actions": {
            "DELETE": true,
            "GET": true,
            "HEAD": true,
            "OPTIONS": true,
            "PATCH": true,
            "POST": true,
            "PUT": true
          },
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "iPlanetAMWebAgentService",
          "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
          "saveIndex": "org.forgerock.openam.entitlement.indextree.TreeSaveIndex",
          "searchIndex": "org.forgerock.openam.entitlement.indextree.TreeSearchIndex"
        },
        "sunAMDelegationService": {
          "_id": "sunAMDelegationService",
          "actions": {
            "DELEGATE": true,
            "MODIFY": true,
            "READ": true
          },
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "sunAMDelegationService",
          "resourceComparator": "com.sun.identity.entitlement.RegExResourceName",
          "saveIndex": "com.sun.identity.entitlement.opensso.DelegationResourceNameIndexGenerator",
          "searchIndex": "com.sun.identity.entitlement.opensso.DelegationResourceNameSplitter"
        },
        "umaApplicationType": {
          "_id": "umaApplicationType",
          "actions": {},
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "umaApplicationType",
          "resourceComparator": "org.forgerock.openam.uma.UmaPolicyResourceMatcher",
          "saveIndex": "org.forgerock.openam.uma.UmaPolicySaveIndex",
          "searchIndex": "org.forgerock.openam.uma.UmaPolicySearchIndex"
        }
      },
      "authentication": {
        "_id": "",
        "_type": {
          "_id": "EMPTY",
          "collection": false,
          "name": "Core"
        },
        "accountlockout": {
          "lockoutDuration": 0,
          "lockoutDurationMultiplier": 1,
          "lockoutWarnUserCount": 0,
          "loginFailureCount": 5,
          "loginFailureDuration": 300,
          "loginFailureLockoutMode": false,
          "storeInvalidAttemptsInDataStore": true
        },
        "core": {
          "adminAuthModule": "ldapService",
          "orgConfig": "ldapService"
        },
        "general": {
          "defaultAuthLevel": 0,
          "identityType": [
            "agent",
            "user"
          ],
          "locale": "en_US",
          "statelessSessionsEnabled": false,
          "twoFactorRequired": false,
          "userStatusCallbackPlugins": []
        },
        "postauthprocess": {
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": [
            "/am/console"
          ],
          "userAttributeSessionMapping": [],
          "usernameGeneratorClass": "com.sun.identity.authentication.spi.DefaultUserIDGenerator",
          "usernameGeneratorEnabled": true
        },
        "security": {
          "addClearSiteDataHeader": true,
          "moduleBasedAuthEnabled": true,
          "sharedSecret": null,
          "zeroPageLoginAllowedWithoutReferrer": true,
          "zeroPageLoginEnabled": false,
          "zeroPageLoginReferrerWhiteList": []
        },
        "trees": {
          "authenticationSessionsMaxDuration": 5,
          "authenticationSessionsStateManagement": "JWT",
          "authenticationSessionsWhitelist": false,
          "authenticationTreeCookieHttpOnly": true,
          "suspendedAuthenticationTimeout": 5
        },
        "userprofile": {
          "aliasAttributeName": [
            "uid"
          ],
          "defaultRole": [],
          "dynamicProfileCreation": "false"
        }
      },
      "authenticationChains": {
        "amsterService": {
          "_id": "amsterService",
          "_type": {
            "_id": "EMPTY",
            "collection": true,
            "name": "Authentication Configuration"
          },
          "authChainConfiguration": [
            {
              "criteria": "REQUIRED",
              "module": "Amster",
              "options": {}
            }
          ],
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": []
        },
        "ldapService": {
          "_id": "ldapService",
          "_type": {
            "_id": "EMPTY",
            "collection": true,
            "name": "Authentication Configuration"
          },
          "authChainConfiguration": [
            {
              "criteria": "REQUIRED",
              "module": "DataStore",
              "options": {}
            }
          ],
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": []
        }
      },
      "authenticationModules": {
        "amster": {
          "_id": "amster",
          "_type": {
            "_id": "amster",
            "collection": true,
            "name": "ForgeRock Amster"
          },
          "authenticationLevel": 0,
          "authorizedKeys": "/home/prestonhales/am/security/keys/amster/authorized_keys",
          "enabled": true
        },
        "datastore": {
          "_id": "datastore",
          "_type": {
            "_id": "datastore",
            "collection": true,
            "name": "Data Store"
          },
          "authenticationLevel": 0
        },
        "federation": {
          "_id": "federation",
          "_type": {
            "_id": "federation",
            "collection": true,
            "name": "Federation"
          },
          "authenticationLevel": 0
        },
        "hotp": {
          "_id": "hotp",
          "_type": {
            "_id": "hotp",
            "collection": true,
            "name": "HOTP"
          },
          "authenticationLevel": 0,
          "autoSendOTP": false,
          "otpDeliveryMethod": "SMS and E-mail",
          "otpLength": "8",
          "otpMaxRetry": 3,
          "otpValidityDuration": 5,
          "smsGatewayClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
          "smtpFromAddress": "no-reply@openam.org",
          "smtpHostPort": 465,
          "smtpHostname": "smtp.gmail.com",
          "smtpSslEnabled": "SSL",
          "smtpUserPassword": null,
          "smtpUsername": "opensso.sun",
          "userProfileEmailAttribute": "mail",
          "userProfileTelephoneAttribute": "telephoneNumber"
        },
        "ldap": {
          "_id": "ldap",
          "_type": {
            "_id": "ldap",
            "collection": true,
            "name": "LDAP"
          },
          "authenticationLevel": 0,
          "beheraPasswordPolicySupportEnabled": true,
          "connectionHeartbeatInterval": 10,
          "connectionHeartbeatTimeUnit": "SECONDS",
          "minimumPasswordLength": "8",
          "openam-auth-ldap-connection-mode": "LDAPS",
          "operationTimeout": 0,
          "primaryLdapServer": [
            "localhost:50636"
          ],
          "profileAttributeMappings": [],
          "returnUserDN": true,
          "searchScope": "SUBTREE",
          "secondaryLdapServer": [],
          "stopLdapbindAfterInmemoryLockedEnabled": false,
          "trustAllServerCertificates": false,
          "userBindDN": "cn=Directory Manager",
          "userBindPassword": null,
          "userProfileRetrievalAttribute": "uid",
          "userSearchAttributes": [
            "uid"
          ],
          "userSearchStartDN": [
            "dc=openam,dc=forgerock,dc=org"
          ]
        },
        "oath": {
          "_id": "oath",
          "_type": {
            "_id": "oath",
            "collection": true,
            "name": "OATH"
          },
          "addChecksum": "False",
          "authenticationLevel": 0,
          "forgerock-oath-maximum-clock-drift": 0,
          "forgerock-oath-sharedsecret-implementation-class": "org.forgerock.openam.authentication.modules.oath.plugins.DefaultSharedSecretProvider",
          "hotpWindowSize": 100,
          "minimumSecretKeyLength": "32",
          "oathAlgorithm": "HOTP",
          "oathOtpMaxRetry": 3,
          "passwordLength": "6",
          "stepsInWindow": 2,
          "timeStepSize": 30,
          "truncationOffset": -1
        },
        "sae": {
          "_id": "sae",
          "_type": {
            "_id": "sae",
            "collection": true,
            "name": "SAE"
          },
          "authenticationLevel": 0
        }
      },
      "conditionTypes": {
        "AMIdentityMembership": {
          "_id": "AMIdentityMembership",
          "config": {
            "properties": {
              "amIdentityName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AMIdentityMembership"
        },
        "AND": {
          "_id": "AND",
          "config": {
            "properties": {
              "conditions": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "AND"
        },
        "AuthLevel": {
          "_id": "AuthLevel",
          "config": {
            "properties": {
              "authLevel": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthLevel"
        },
        "AuthScheme": {
          "_id": "AuthScheme",
          "config": {
            "properties": {
              "applicationIdleTimeout": {
                "type": "integer"
              },
              "applicationName": {
                "type": "string"
              },
              "authScheme": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthScheme"
        },
        "AuthenticateToRealm": {
          "_id": "AuthenticateToRealm",
          "config": {
            "properties": {
              "authenticateToRealm": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticateToRealm"
        },
        "AuthenticateToService": {
          "_id": "AuthenticateToService",
          "config": {
            "properties": {
              "authenticateToService": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticateToService"
        },
        "IPv4": {
          "_id": "IPv4",
          "config": {
            "properties": {
              "dnsName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "endIp": {
                "type": "string"
              },
              "startIp": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "IPv4"
        },
        "IPv6": {
          "_id": "IPv6",
          "config": {
            "properties": {
              "dnsName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "endIp": {
                "type": "string"
              },
              "startIp": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "IPv6"
        },
        "LDAPFilter": {
          "_id": "LDAPFilter",
          "config": {
            "properties": {
              "ldapFilter": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "LDAPFilter"
        },
        "LEAuthLevel": {
          "_id": "LEAuthLevel",
          "config": {
            "properties": {
              "authLevel": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "LEAuthLevel"
        },
        "NOT": {
          "_id": "NOT",
          "config": {
            "properties": {
              "condition": {
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "NOT"
        },
        "OAuth2Scope": {
          "_id": "OAuth2Scope",
          "config": {
            "properties": {
              "requiredScopes": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "OAuth2Scope"
        },
        "OR": {
          "_id": "OR",
          "config": {
            "properties": {
              "conditions": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "OR"
        },
        "Policy": {
          "_id": "Policy",
          "config": {
            "properties": {
              "className": {
                "type": "string"
              },
              "properties": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Policy"
        },
        "ResourceEnvIP": {
          "_id": "ResourceEnvIP",
          "config": {
            "properties": {
              "resourceEnvIPConditionValue": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "ResourceEnvIP"
        },
        "Script": {
          "_id": "Script",
          "config": {
            "properties": {
              "scriptId": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Script"
        },
        "Session": {
          "_id": "Session",
          "config": {
            "properties": {
              "maxSessionTime": {
                "type": "integer"
              },
              "terminateSession": {
                "required": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Session"
        },
        "SessionProperty": {
          "_id": "SessionProperty",
          "config": {
            "properties": {
              "ignoreValueCase": {
                "required": true,
                "type": "boolean"
              },
              "properties": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "SessionProperty"
        },
        "SimpleTime": {
          "_id": "SimpleTime",
          "config": {
            "properties": {
              "endDate": {
                "type": "string"
              },
              "endDay": {
                "type": "string"
              },
              "endTime": {
                "type": "string"
              },
              "enforcementTimeZone": {
                "type": "string"
              },
              "startDate": {
                "type": "string"
              },
              "startDay": {
                "type": "string"
              },
              "startTime": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "SimpleTime"
        },
        "Transaction": {
          "_id": "Transaction",
          "config": {
            "properties": {
              "authenticationStrategy": {
                "type": "string"
              },
              "strategySpecifier": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Transaction"
        }
      },
      "decisionCombiners": {
        "DenyOverride": {
          "_id": "DenyOverride",
          "title": "DenyOverride"
        }
      },
      "idp": {},
      "policy": {},
      "policyset": {
        "oauth2Scopes": {
          "applicationType": "iPlanetAMWebAgentService",
          "attributeNames": [],
          "conditions": [
            "Script",
            "AMIdentityMembership",
            "IPv6",
            "SimpleTime",
            "IPv4",
            "LEAuthLevel",
            "LDAPFilter",
            "AuthScheme",
            "Session",
            "AND",
            "AuthenticateToRealm",
            "ResourceEnvIP",
            "SessionProperty",
            "OAuth2Scope",
            "OR",
            "Transaction",
            "NOT",
            "AuthLevel",
            "AuthenticateToService"
          ],
          "createdBy": "id=dsameuser,ou=user,ou=am-config",
          "creationDate": 1578580064992,
          "description": "The built-in Application used by the OAuth2 scope authorization process.",
          "displayName": "Default OAuth2 Scopes Policy Set",
          "editable": true,
          "entitlementCombiner": "DenyOverride",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509788713,
          "name": "oauth2Scopes",
          "resourceComparator": null,
          "resourceTypeUuids": [
            "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b"
          ],
          "saveIndex": null,
          "searchIndex": null,
          "subjects": [
            "AuthenticatedUsers",
            "NOT",
            "Identity",
            "OR",
            "AND",
            "NONE",
            "JwtClaim"
          ]
        }
      },
      "resourcetype": {
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2": {
          "actions": {
            "DELETE": true,
            "GET": true,
            "HEAD": true,
            "OPTIONS": true,
            "PATCH": true,
            "POST": true,
            "PUT": true
          },
          "createdBy": "id=dsameuser,ou=user,ou=am-config",
          "creationDate": 1595479030487,
          "description": "The built-in URL Resource Type available to OpenAM Policies.",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509788692,
          "name": "URL",
          "patterns": [
            "*://*:*/*",
            "*://*:*/*?*"
          ],
          "uuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2"
        },
        "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b": {
          "actions": {
            "GRANT": true
          },
          "createdBy": "id=dsameuser,ou=user,ou=am-config",
          "creationDate": 1595479030586,
          "description": "The built-in OAuth2 Scope Resource Type for OAuth2policy-provided scope.",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509788670,
          "name": "OAuth2 Scope",
          "patterns": [
            "*://*:*/*",
            "*://*:*/*?*",
            "*"
          ],
          "uuid": "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b"
        }
      },
      "saml": {
        "cot": {},
        "hosted": {},
        "metadata": {},
        "remote": {}
      },
      "script": {
        "01e1a3c0-038b-4c16-956a-6c9d89328cff": {
          "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for a scripted decision node",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Authentication Tree Decision Node Script",
          "script": "/*\n  - Data made available by nodes that have already executed are available in the sharedState variable.\n  - The script should set outcome to either \"true\" or \"false\".\n */\n\noutcome = \"true\";\n"
        },
        "1244e639-4a31-401d-ab61-d75133d8dc9e": {
          "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Instagram",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Instagram Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"username\", rawProfile.username)))\n"
        },
        "13e3f263-9cd3-4844-8d1c-040fd0dd02eb": {
          "_id": "13e3f263-9cd3-4844-8d1c-040fd0dd02eb",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script template for Device Profile Match decision node script for Authentication Tree",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Profile Match Template - Decision Node Script",
          "script": "/*\n * Copyright 2020-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/** ******************************************************************\n *\n * The following script is a simplified template for understanding\n * the basics of device matching. _This is not functionally complete._\n * For a functionally complete script as well as a development toolkit,\n * visit https://github.com/ForgeRock/forgerock-device-match-script.\n *\n * Global node variables accessible within this scope:\n * 1. `sharedState` provides access to incoming request\n * 2. `deviceProfilesDao` provides access to stored profiles\n * 3. `outcome` variable maps to auth tree node outcomes; values are\n *    'true', 'false', or 'unknownDevice' (notice _all_ are strings).\n * ******************************************************************/\n\n/**\n * Get the incoming request's device profile.\n * Returns serialized JSON (type string); parsing this will result a\n * native JS object.\n */\nvar incomingJson = sharedState.get('forgeRock.device.profile').toString();\nvar incoming = JSON.parse(incomingJson);\n\n/**\n * Get the incoming user's username and realm.\n * Notice the use of `.asString()`.\n */\nvar username = sharedState.get(\"username\").asString();\nvar realm = sharedState.get(\"realm\").asString();\n\n/**\n * Get the user's stored profiles for appropriate realm.\n * Returns a _special_ object with methods for profile data\n */\nvar storedProfiles = deviceProfilesDao.getDeviceProfiles(username, realm);\n\n// Default to `outcome` of 'unknownDevice'\noutcome = 'unknownDevice';\n\nif (storedProfiles) {\n    var i = 0;\n    // NOTE: `.size()` method returns the number of stored profiles\n    var len = storedProfiles.size();\n\n    for (i; i < len; i++) {\n        /**\n         * Get the stored profile.\n         * Returns serialized JSON (type string); parsing this will result\n         * a native JS object.\n         */\n        var storedJson = storedProfiles.get(i);\n        var stored = JSON.parse(storedJson);\n\n        /**\n         * Find a stored profile with the same identifier.\n         */\n        if (incoming.identifier === stored.identifier) {\n\n            /**\n             * Now that you've found the appropriate profile, you will perform\n             * the logic here to match the values of the `incoming` profile\n             * with that of the `stored` profile.\n             *\n             * The result of the matching logic is assigned to `outcome`. Since\n             * we have profiles of the same identifier, the value (type string)\n             * should now be either 'true' or 'false' (properties matched or not).\n             *\n             * For more information about this topic, visit this Github repo:\n             * https://github.com/ForgeRock/forgerock-device-match-script\n             */\n            outcome = 'false';\n        }\n    }\n}\n"
        },
        "157298c0-7d31-4059-a95b-eeb08473b7e5": {
          "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
          "context": "AUTHENTICATION_CLIENT_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for client side Device Id (Match) Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Id (Match) - Client Side",
          "script": "var fontDetector = (function () {\n    /**\n     * JavaScript code to detect available availability of a\n     * particular font in a browser using JavaScript and CSS.\n     *\n     * Author : Lalit Patel\n     * Website: http://www.lalit.org/lab/javascript-css-font-detect/\n     * License: Apache Software License 2.0\n     *          http://www.apache.org/licenses/LICENSE-2.0\n     * Version: 0.15 (21 Sep 2009)\n     *          Changed comparision font to default from sans-default-default,\n     *          as in FF3.0 font of child element didn't fallback\n     *          to parent element if the font is missing.\n     * Version: 0.2 (04 Mar 2012)\n     *          Comparing font against all the 3 generic font families ie,\n     *          'monospace', 'sans-serif' and 'sans'. If it doesn't match all 3\n     *          then that font is 100% not available in the system\n     * Version: 0.3 (24 Mar 2012)\n     *          Replaced sans with serif in the list of baseFonts\n     */\n    /*\n     * Portions Copyrighted 2013 ForgeRock AS.\n     */\n    var detector = {}, baseFonts, testString, testSize, h, s, defaultWidth = {}, defaultHeight = {}, index;\n\n    // a font will be compared against all the three default fonts.\n    // and if it doesn't match all 3 then that font is not available.\n    baseFonts = ['monospace', 'sans-serif', 'serif'];\n\n    //we use m or w because these two characters take up the maximum width.\n    // And we use a LLi so that the same matching fonts can get separated\n    testString = \"mmmmmmmmmmlli\";\n\n    //we test using 72px font size, we may use any size. I guess larger the better.\n    testSize = '72px';\n\n    h = document.getElementsByTagName(\"body\")[0];\n\n    // create a SPAN in the document to get the width of the text we use to test\n    s = document.createElement(\"span\");\n    s.style.fontSize = testSize;\n    s.innerHTML = testString;\n    for (index in baseFonts) {\n        //get the default width for the three base fonts\n        s.style.fontFamily = baseFonts[index];\n        h.appendChild(s);\n        defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font\n        defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font\n        h.removeChild(s);\n    }\n\n    detector.detect = function(font) {\n        var detected = false, index, matched;\n        for (index in baseFonts) {\n            s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.\n            h.appendChild(s);\n            matched = (s.offsetWidth !== defaultWidth[baseFonts[index]] || s.offsetHeight !== defaultHeight[baseFonts[index]]);\n            h.removeChild(s);\n            detected = detected || matched;\n        }\n        return detected;\n    };\n\n    return detector;\n}());\n/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved\n *\n * The contents of this file are subject to the terms\n * of the Common Development and Distribution License\n * (the License). You may not use this file except in\n * compliance with the License.\n *\n * You can obtain a copy of the License at\n * https://opensso.dev.java.net/public/CDDLv1.0.html or\n * opensso/legal/CDDLv1.0.txt\n * See the License for the specific language governing\n * permission and limitations under the License.\n *\n * When distributing Covered Code, include this CDDL\n * Header Notice in each file and include the License file\n * at opensso/legal/CDDLv1.0.txt.\n * If applicable, add the following below the CDDL Header,\n * with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n */\n/*\n * Portions Copyrighted 2013 Syntegrity.\n * Portions Copyrighted 2013-2014 ForgeRock AS.\n */\n\nvar collectScreenInfo = function () {\n        var screenInfo = {};\n        if (screen) {\n            if (screen.width) {\n                screenInfo.screenWidth = screen.width;\n            }\n\n            if (screen.height) {\n                screenInfo.screenHeight = screen.height;\n            }\n\n            if (screen.pixelDepth) {\n                screenInfo.screenColourDepth = screen.pixelDepth;\n            }\n        } else {\n            console.warn(\"Cannot collect screen information. screen is not defined.\");\n        }\n        return screenInfo;\n    },\n    collectTimezoneInfo = function () {\n        var timezoneInfo =  {}, offset = new Date().getTimezoneOffset();\n\n        if (offset) {\n            timezoneInfo.timezone = offset;\n        } else {\n            console.warn(\"Cannot collect timezone information. timezone is not defined.\");\n        }\n\n        return timezoneInfo;\n    },\n    collectBrowserPluginsInfo = function () {\n\n        if (navigator && navigator.plugins) {\n            var pluginsInfo = {}, i, plugins = navigator.plugins;\n            pluginsInfo.installedPlugins = \"\";\n\n            for (i = 0; i < plugins.length; i++) {\n                pluginsInfo.installedPlugins = pluginsInfo.installedPlugins + plugins[i].filename + \";\";\n            }\n\n            return pluginsInfo;\n        } else {\n            console.warn(\"Cannot collect browser plugin information. navigator.plugins is not defined.\");\n            return {};\n        }\n\n    },\n// Getting geolocation takes some time and is done asynchronously, hence need a callback which is called once geolocation is retrieved.\n    collectGeolocationInfo = function (callback) {\n        var geolocationInfo = {},\n            successCallback = function(position) {\n                geolocationInfo.longitude = position.coords.longitude;\n                geolocationInfo.latitude = position.coords.latitude;\n                callback(geolocationInfo);\n            }, errorCallback = function(error) {\n                console.warn(\"Cannot collect geolocation information. \" + error.code + \": \" + error.message);\n                callback(geolocationInfo);\n            };\n        if (navigator && navigator.geolocation) {\n            // NB: If user chooses 'Not now' on Firefox neither callback gets called\n            //     https://bugzilla.mozilla.org/show_bug.cgi?id=675533\n            navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n        } else {\n            console.warn(\"Cannot collect geolocation information. navigator.geolocation is not defined.\");\n            callback(geolocationInfo);\n        }\n    },\n    collectBrowserFontsInfo = function () {\n        var fontsInfo = {}, i, fontsList = [\"cursive\",\"monospace\",\"serif\",\"sans-serif\",\"fantasy\",\"default\",\"Arial\",\"Arial Black\",\n            \"Arial Narrow\",\"Arial Rounded MT Bold\",\"Bookman Old Style\",\"Bradley Hand ITC\",\"Century\",\"Century Gothic\",\n            \"Comic Sans MS\",\"Courier\",\"Courier New\",\"Georgia\",\"Gentium\",\"Impact\",\"King\",\"Lucida Console\",\"Lalit\",\n            \"Modena\",\"Monotype Corsiva\",\"Papyrus\",\"Tahoma\",\"TeX\",\"Times\",\"Times New Roman\",\"Trebuchet MS\",\"Verdana\",\n            \"Verona\"];\n        fontsInfo.installedFonts = \"\";\n\n        for (i = 0; i < fontsList.length; i++) {\n            if (fontDetector.detect(fontsList[i])) {\n                fontsInfo.installedFonts = fontsInfo.installedFonts + fontsList[i] + \";\";\n            }\n        }\n        return fontsInfo;\n    },\n    devicePrint = {};\n\ndevicePrint.screen = collectScreenInfo();\ndevicePrint.timezone = collectTimezoneInfo();\ndevicePrint.plugins = collectBrowserPluginsInfo();\ndevicePrint.fonts = collectBrowserFontsInfo();\n\nif (navigator.userAgent) {\n    devicePrint.userAgent = navigator.userAgent;\n}\nif (navigator.appName) {\n    devicePrint.appName = navigator.appName;\n}\nif (navigator.appCodeName) {\n    devicePrint.appCodeName = navigator.appCodeName;\n}\nif (navigator.appVersion) {\n    devicePrint.appVersion = navigator.appVersion;\n}\nif (navigator.appMinorVersion) {\n    devicePrint.appMinorVersion = navigator.appMinorVersion;\n}\nif (navigator.buildID) {\n    devicePrint.buildID = navigator.buildID;\n}\nif (navigator.platform) {\n    devicePrint.platform = navigator.platform;\n}\nif (navigator.cpuClass) {\n    devicePrint.cpuClass = navigator.cpuClass;\n}\nif (navigator.oscpu) {\n    devicePrint.oscpu = navigator.oscpu;\n}\nif (navigator.product) {\n    devicePrint.product = navigator.product;\n}\nif (navigator.productSub) {\n    devicePrint.productSub = navigator.productSub;\n}\nif (navigator.vendor) {\n    devicePrint.vendor = navigator.vendor;\n}\nif (navigator.vendorSub) {\n    devicePrint.vendorSub = navigator.vendorSub;\n}\nif (navigator.language) {\n    devicePrint.language = navigator.language;\n}\nif (navigator.userLanguage) {\n    devicePrint.userLanguage = navigator.userLanguage;\n}\nif (navigator.browserLanguage) {\n    devicePrint.browserLanguage = navigator.browserLanguage;\n}\nif (navigator.systemLanguage) {\n    devicePrint.systemLanguage = navigator.systemLanguage;\n}\n\n// Attempt to collect geo-location information and return this with the data collected so far.\n// Otherwise, if geo-location fails or takes longer than 30 seconds, auto-submit the data collected so far.\nautoSubmitDelay = 30000;\noutput.value = JSON.stringify(devicePrint);\ncollectGeolocationInfo(function(geolocationInfo) {\n    devicePrint.geolocation = geolocationInfo;\n    output.value = JSON.stringify(devicePrint);\n    submit();\n});\n"
        },
        "1d475815-72cb-42eb-aafd-4026989d28a7": {
          "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for Social Identity Provider Profile Transformation",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Social Identity Provider Profile Transformation Script",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/* Default Social Identity Provider Profile Transformation script to use as a template for new scripts */\n"
        },
        "248b8a56-df81-4b1b-b4ba-45d994f6504c": {
          "_id": "248b8a56-df81-4b1b-b4ba-45d994f6504c",
          "context": "SAML2_IDP_ADAPTER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 IDP Adapter",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 IDP Adapter Script",
          "script": "/*\n * Copyright 2021-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * The script has these top level functions that could be executed during a SAML2 flow.\n *      - preSingleSignOn\n *      - preAuthentication\n *      - preSendResponse\n *      - preSignResponse\n *      - preSendFailureResponse\n *\n * Please see the javadoc for the interface definition and more information about these methods.\n * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html\n * Note that the initialize method is not supported in the scripts.\n *\n * Defined variables. Check the documentation on the respective functions for the variables available to it.\n *\n * hostedEntityId - String\n *     Entity ID for the hosted IDP\n * realm - String\n *     Realm of the hosted IDP\n * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)\n *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.\n * request - HttpServletRequest (2)\n *     Servlet request object\n * response - HttpServletResponse (3)\n *     Servlet response object\n * authnRequest - AuthnRequest (4)\n *     The original authentication request sent from SP\n * reqId - String\n *     The id to use for continuation of processing if the adapter redirects\n * res - Response (5)\n *     The SAML Response\n * session - SSOToken (6)\n *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.\n * relayState - String\n *     The relayState that will be used in the redirect\n * faultCode - String\n *     the fault code that will be returned in the SAML response\n * faultDetail - String\n *     the fault detail that will be returned in the SAML response\n * logger - Logger instance\n *     https://backstage.forgerock.com/docs/am/7.3/scripting-guide/scripting-api-global-logger.html.\n *     Corresponding log files will be prefixed with: scripts.<script name>\n *\n * Throws SAML2Exception (7):\n *     for any exceptions occurring in the adapter. The federation process will continue\n *\n * Class reference:\n * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.\n * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.\n * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.\n * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.\n * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html.\n * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.\n * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.\n */\n\n/*\n * Template/default script for SAML2 IDP Adapter scripted plugin.\n */\n\n/*\n * Available variables for preSingleSignOn:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     logger\n *\n * Return - true if browser redirection is happening after processing, false otherwise. Default to false.\n */\nfunction preSingleSignOn () {\n    return false;\n}\n\n/*\n * Available variables for preAuthentication:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     session\n *     relayState\n *     logger\n *\n * Return - true if browser redirection is happening after processing, false otherwise. Default to false.\n */\nfunction preAuthentication () {\n    return false;\n}\n\n/*\n * Available variables for preSendResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     session\n *     relayState\n *     logger\n *\n * Return - true if browser redirection happened after processing, false otherwise. Default to false.\n */\nfunction preSendResponse () {\n    return false;\n}\n\n/*\n * Available variables for preSignResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     session\n *     relayState\n *     res\n *     logger\n */\nfunction preSignResponse () {\n}\n\n/*\n * Available variables for preSendFailureResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     response\n *     faultCode\n *     faultDetail\n *     logger\n */\nfunction preSendFailureResponse () {\n}\n"
        },
        "25e6c06d-cf70-473b-bd28-26931edc476b": {
          "_id": "25e6c06d-cf70-473b-bd28-26931edc476b",
          "context": "OAUTH2_VALIDATE_SCOPE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Scope Validation",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Validate Scope Script",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script validates the requested scopes against the allowed scopes.\n * If no scopes are requested, default scopes are assumed.\n * The script has four top level functions that could be executed during the different OAuth2 flows:\n *      - validateAuthorizationScope\n *      - validateAccessTokenScope\n *      - validateRefreshTokenScope\n *      - validateBackChannelAuthorizationScope\n *\n * Defined variables:\n * requestedScopes - Set<String> (1).\n *          The set of requested scopes.\n * defaultScopes - Set<String> (1).\n *                 The set of default scopes.\n * allowedScopes - Set<String> (1).\n *                 The set of allowed scopes.\n * scriptName - String (primitive).\n *              Always present, the display name of the script.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_VALIDATE_SCOPE\n * httpClient - HTTP Client (2).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n *\n * Throws InvalidScopeException:\n *      - if there are no scopes requested and default scopes are empty\n *      - if a requested scope is not allowed\n *\n * Return - a Set<String> of validated scopes (1).\n *\n * Class reference:\n * (1) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.\n * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n */\n\n/**\n * Default validate scope script.\n */\nfunction validateScopes () {\n    var frJava = JavaImporter(\n        org.forgerock.oauth2.core.exceptions.InvalidScopeException\n    );\n\n    var scopes;\n    if (requestedScopes == null || requestedScopes.isEmpty()) {\n        scopes = defaultScopes;\n    } else {\n        scopes = new java.util.HashSet(allowedScopes);\n        scopes.retainAll(requestedScopes);\n        if (requestedScopes.size() > scopes.size()) {\n            var invalidScopes = new java.util.HashSet(requestedScopes);\n            invalidScopes.removeAll(allowedScopes);\n            throw new frJava.InvalidScopeException('Unknown/invalid scope(s)');\n        }\n    }\n\n    if (scopes == null || scopes.isEmpty()) {\n        throw new frJava.InvalidScopeException('No scope requested and no default scope configured');\n    }\n    return scopes;\n}\n\nfunction validateAuthorizationScope () {\n    return validateScopes();\n}\n\nfunction validateAccessTokenScope () {\n    return validateScopes();\n}\n\nfunction validateRefreshTokenScope () {\n    return validateScopes();\n}\n\nfunction validateBackChannelAuthorizationScope () {\n    return validateScopes();\n}\n"
        },
        "312e951f-70c5-49d2-a9ae-93aef909d5df": {
          "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Salesforce",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Salesforce Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.user_id),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.zoneInfo)))\n"
        },
        "36863ffb-40ec-48b9-94b1-9a99f71cc3b5": {
          "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
          "context": "OIDC_CLAIMS",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OIDC claims",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OIDC Claims Script",
          "script": "/*\n * Copyright 2014-2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\nimport com.iplanet.sso.SSOException\nimport com.sun.identity.idm.IdRepoException\nimport org.forgerock.oauth2.core.exceptions.InvalidRequestException\nimport org.forgerock.oauth2.core.UserInfoClaims\nimport org.forgerock.openidconnect.Claim\n\n/*\n* Defined variables:\n* logger - always presents, the \"OAuth2Provider\" debug logger instance\n* claims - always present, default server provided claims - Map<String, Object>\n* claimObjects - always present, default server provided claims - List<Claim>\n* session - present if the request contains the session cookie, the user's session object\n* identity - always present, the identity of the resource owner\n* scopes - always present, the requested scopes\n* scriptName - always present, the display name of the script\n* requestProperties - always present, contains a map of request properties:\n*                     requestUri - the request URI\n*                     realm - the realm that the request relates to\n*                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n*                     more properties. Please note that these should be handled in accordance with OWASP best practices.\n* clientProperties - present if the client specified in the request was identified, contains a map of client\n*                    properties:\n*                    clientId - the client's Uri for the request locale\n*                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n*                                        for the client\n*                    allowedResponseTypes - list of the allowed response types for the client\n*                    allowedScopes - list of the allowed scopes for the client\n*                    customProperties - A map of the custom properties of the client.\n*                                       Lists or maps will be included as sub-maps, e.g:\n*                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n* requestedClaims - Map<String, Set<String>>\n*                  always present, not empty if the request contains a claims parameter and server has enabled\n*                  claims_parameter_supported, map of requested claims to possible values, otherwise empty,\n*                  requested claims with no requested values will have a key but no value in the map. A key with\n*                  a single value in its Set indicates this is the only value that should be returned.\n* requestedTypedClaims - List<Claim>\n*                       always present, not empty if the request contains a claims parameter and server has enabled\n*                       claims_parameter_supported, list of requested claims with claim name, requested possible values\n*                       and if claim is essential, otherwise empty,\n*                       requested claims with no requested values will have a claim with no values. A claims with\n*                       a single value indicates this is the only value that should be returned.\n* claimsLocales - the values from the 'claims_locales' parameter - List<String>\n* Required to return a Map of claims to be added to the id_token claims\n*\n* Expected return value structure:\n* UserInfoClaims {\n*    Map<String, Object> values; // The values of the claims for the user information\n*    Map<String, List<String>> compositeScopes; // Mapping of scope name to a list of claim names.\n* }\n*/\n\n// user session not guaranteed to be present\nboolean sessionPresent = session != null\n\n/*\n * Pulls first value from users profile attribute\n *\n * @param claim The claim object.\n * @param attr The profile attribute name.\n */\ndef fromSet = { claim, attr ->\n    if (attr != null && attr.size() == 1){\n        attr.iterator().next()\n    } else if (attr != null && attr.size() > 1){\n        attr\n    } else if (logger.warningEnabled()) {\n        logger.warning(\"OpenAMScopeValidator.getUserInfo(): Got an empty result for claim=$claim\");\n    }\n}\n\n// ---vvvvvvvvvv--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---vvvvvvvvvv---\n/*\n * Claim resolver which resolves the value of the claim from its requested values.\n *\n * This resolver will return a value if the claim has one requested values, otherwise an exception is thrown.\n */\ndefaultClaimResolver = { claim ->\n    if (claim.getValues().size() == 1) {\n        [(claim.getName()): claim.getValues().iterator().next()]\n    } else {\n        [:]\n    }\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If no match is found an exception is thrown.\n */\nuserProfileClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim of the user's address.\n *\n * This resolver will return a value for the claim if:\n * # the value of the address is not null\n *\n */\nuserAddressClaimResolver = { claim, identity ->\n    if (identity != null) {\n        addressFormattedValue = fromSet(claim.getName(), identity.getAttribute(\"postaladdress\"))\n        if (addressFormattedValue != null) {\n            return [\n                    \"formatted\" : addressFormattedValue\n            ]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If the claim is essential and no value is found an InvalidRequestException will be thrown and returned to the user.\n * If no match is found an exception is thrown.\n */\nessentialClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (claim.isEssential() && (userProfileValue == null || userProfileValue.isEmpty())) {\n            throw new InvalidRequestException(\"Could not provide value for essential claim $claim\")\n        }\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the list of requested languages from the 'claims_locales' authorize request\n * parameter and attempt to match it to a value from the users' profile attribute.\n * If no match is found an exception is thrown.\n */\nclaimLocalesClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            locale = claimsLocales.find { locale -> localeValues.containsKey(locale) }\n            if (locale != null) {\n                return [(claim.getName()): localeValues.get(locale)]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the language tag specified in the claim object and attempt to match it to a value\n * from the users' profile attribute. If no match is found an exception is thrown.\n */\nlanguageTagClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            if (claim.getLocale() != null) {\n                if (localeValues.containsKey(claim.getLocale())) {\n                    return [(claim.getName()): localeValues.get(claim.getLocale())]\n                } else {\n                    entry = localeValues.entrySet().iterator().next()\n                    return [(claim.getName() + \"#\" + entry.getKey()): entry.getValue()]\n                }\n            } else {\n                entry = localeValues.entrySet().iterator().next()\n                return [(claim.getName()): entry.getValue()]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Given a string \"en|English,jp|Japenese,fr_CA|French Canadian\" will return map of locale -> value.\n */\nparseLocaleAwareString = { s ->\n    return result = s.split(\",\").collectEntries { entry ->\n        split = entry.split(\"\\\\|\")\n        [(split[0]): value = split[1]]\n    }\n}\n// ---^^^^^^^^^^--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---^^^^^^^^^^---\n\n// -------------- UPDATE THIS TO CHANGE CLAIM TO ATTRIBUTE MAPPING FUNCTIONS ---------------\n/*\n * List of claim resolver mappings.\n */\n// [ {claim}: {attribute retriever}, ... ]\nclaimAttributes = [\n        \"email\": userProfileClaimResolver.curry(\"mail\"),\n        \"address\": { claim, identity -> [ \"address\" : userAddressClaimResolver(claim, identity) ] },\n        \"phone_number\": userProfileClaimResolver.curry(\"telephonenumber\"),\n        \"given_name\": userProfileClaimResolver.curry(\"givenname\"),\n        \"zoneinfo\": userProfileClaimResolver.curry(\"preferredtimezone\"),\n        \"family_name\": userProfileClaimResolver.curry(\"sn\"),\n        \"locale\": userProfileClaimResolver.curry(\"preferredlocale\"),\n        \"name\": userProfileClaimResolver.curry(\"cn\")\n]\n\n\n// -------------- UPDATE THIS TO CHANGE SCOPE TO CLAIM MAPPINGS --------------\n/*\n * Map of scopes to claim objects.\n */\n// {scope}: [ {claim}, ... ]\nscopeClaimsMap = [\n        \"email\": [ \"email\" ],\n        \"address\": [ \"address\" ],\n        \"phone\": [ \"phone_number\" ],\n        \"profile\": [ \"given_name\", \"zoneinfo\", \"family_name\", \"locale\", \"name\" ]\n]\n\n\n// ---------------- UPDATE BELOW FOR ADVANCED USAGES -------------------\nif (logger.messageEnabled()) {\n    scopes.findAll { s -> !(\"openid\".equals(s) || scopeClaimsMap.containsKey(s)) }.each { s ->\n        logger.message(\"OpenAMScopeValidator.getUserInfo()::Message: scope not bound to claims: $s\")\n    }\n}\n\n/*\n * Computes the claims return key and value. The key may be a different value if the claim value is not in\n * the requested language.\n */\ndef computeClaim = { claim ->\n    try {\n        claimResolver = claimAttributes.get(claim.getName(), { claimObj, identity -> defaultClaimResolver(claim)})\n        claimResolver(claim, identity)\n    } catch (IdRepoException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    } catch (SSOException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    }\n}\n\n/*\n * Converts requested scopes into claim objects based on the scope mappings in scopeClaimsMap.\n */\ndef convertScopeToClaims = {\n    scopes.findAll { scope -> \"openid\" != scope && scopeClaimsMap.containsKey(scope) }.collectMany { scope ->\n        scopeClaimsMap.get(scope).collect { claim ->\n            new Claim(claim)\n        }\n    }\n}\n\n// Creates a full list of claims to resolve from requested scopes, claims provided by AS and requested claims\ndef claimsToResolve = convertScopeToClaims() + claimObjects + requestedTypedClaims\n\n// Computes the claim return key and values for all requested claims\ncomputedClaims = claimsToResolve.collectEntries() { claim ->\n    result = computeClaim(claim)\n}\n\n// Computes composite scopes\ndef compositeScopes = scopeClaimsMap.findAll { scope ->\n    scopes.contains(scope.key)\n}\n\nreturn new UserInfoClaims((Map)computedClaims, (Map)compositeScopes)\n"
        },
        "3d97c436-42c0-4dd0-a571-ea6f34f752b3": {
          "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Itsme",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Itsme Profile Normalization",
          "script": "/*\n * Copyright 2020-2021 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue managedUser = json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"username\", rawProfile.email),\n        field(\"email\", rawProfile.email)))\nreturn managedUser\n"
        },
        "3f93ef6e-e54a-4393-aba1-f322656db28a": {
          "_id": "3f93ef6e-e54a-4393-aba1-f322656db28a",
          "context": "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Authorize Endpoint Data Provider",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Authorize Endpoint Data Provider Script",
          "script": "/*\n * Copyright 2021-2023 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you return additional data when authorize request is called.\n *\n * Defined variables:\n *\n * session - SSOToken (1)\n *           Present if the request contains the session cookie, the user's session object.\n *\n * httpClient - HTTP Client (2).\n *              Always present, the HTTP client that can be used to make external HTTP requests\n *\n * logger - Debug (3)\n *          Always present, the \"ScriptedAuthorizeEndpointDataProvider\" debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER.\n *\n * scriptName - String (primitive).\n *              Always present, the display name of the script\n *\n * Return - a Map<String, String> of additional data (4).\n *\n * Class reference:\n * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (3) Debug - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.\n */\n\n/**\n * Default authorize endpoint data provider script to use as a template for new scripts.\n */\n\n/* EXAMPLE\nvar map = new java.util.HashMap();\n\nfunction addAdditionalData() {\n\n    //If constant data needs to be returned\n    map.put(\"hello\", \"world\");\n\n    //If some data needs to be returned from third party service\n    addAdditionalDataFromExternalService();\n\n    //If there is a need to return some user session data\n    addAdditionalDataFromSessionProperties()\n\n    return map;\n};\n\nfunction addAdditionalDataFromExternalService() {\n  var frJava = JavaImporter(\n        org.forgerock.oauth2.core.exceptions.ServerException\n    );\n  try {\n        //Obtain additional data by performing a REST call to an external service\n        var request = new org.forgerock.http.protocol.Request();\n        request.setUri(\"https://third.party.app/hello.jsp\");\n        request.setMethod(\"POST\");\n        //request.setEntity(\"foo=bar&hello=world\");\n        request.setEntity(json(object(\n                    field(\"foo\", \"bar\"))));\n        var response = httpClient.send(request).getOrThrow();\n        logResponse(response);\n        var result = JSON.parse(response.getEntity().getString());\n        map.put(\"someKey\",result.get(\"someKey\"));\n  } catch (err) {\n     throw new frJava.ServerException(err);\n  }\n};\n\nfunction addAdditionalDataFromSessionProperties() {\n  //Add additional data from session property values\n   if (session != null) { // session is not available for resource owner password credentials grant\n     map.put(\"ipAddress\", session.getProperty(\"Host\"))\n   }\n};\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n};\n\naddAdditionalData();\n*/\n"
        },
        "400e48ba-3f13-4144-ac7b-f824ea8e98c5": {
          "_id": "400e48ba-3f13-4144-ac7b-f824ea8e98c5",
          "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for scripted JWT Issuers",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 JWT Issuer Script",
          "script": "/*\n * Copyright 2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you to derive the configuration for a dynamic JWT issuer from the issuer string.\n * A JWT issuer is made up of the following:\n *   - issuer - the identifier of the entity that issues JWTs\n *   - resource owner subject claim - the name of the claim in the JWT that identifies the resource owner\n *   - consented scope claim - the name of the claim in the JWT that represents scope that the resource owner\n *                             has already consented to externally\n *   - authorized subjects - the set of principal identifiers that are authorized to be used as resource owners\n *                           by the issuer\n *   - JWKs - either a set of JWKs or connection details for obtaining that set, that are the public keys that\n *            can verify the signature on the issued JWTs.\n *\n * Defined variables:\n * issuer - String\n *          The issuer from the bearer JWT.\n * realm - String\n *         The path of the realm that is handling the request.\n * scriptName - String.\n *              Always present, the display name of the script.\n * logger - Always present, the script debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_SCRIPTED_JWT_ISSUER.\n * httpClient - HTTP Client (1).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n * idRepository - Identity Repository (2). Always present.\n * secrets - Secrets accessor (3). Always present.\n *\n * Return - org.forgerock.oauth2.core.TrustedJwtIssuerConfig (4) - the configuration of the trusted JWT issuer.\n *\n * Class reference:\n * (1) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (2) ScriptedIdentityRepository - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/identity/ScriptedIdentityRepository.html.\n * (3) ScriptedSecrets - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/secrets/ScriptedSecrets.html.\n * (4) TrustedJwtIssuerConfig - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/TrustedJwtIssuerConfig.html.\n */\n\n/* EXAMPLE\n(function () {\n    var frJava = JavaImporter(\n        org.forgerock.oauth2.core.TrustedJwtIssuerConfig,\n        java.util.Collections\n    );\n\n    var iss = idRepository.getIdentity(issuer);\n    if (iss == null) {\n        logger.message('No issuer found for: '+issuer);\n        return null;\n    }\n    logger.message('Found issuer: '+iss);\n    // in this example either a JWK set or a URI to a JWK set are in the postalAddress attribute\n    var jwksAttrs = iss.getAttributeValues('postalAddress');\n    var jwkSet = jwksAttrs.length === 0 ? null : jwksAttrs[0];\n    var config = new frJava.TrustedJwtIssuerConfig(\n        issuer,\n        'sub',\n        'scope',\n        // in this example, valid subjects are stored in the mail attribute\n        iss.getAttributeValues('mail'),\n        jwkSet.startsWith('{') ? jwkSet : null,\n        jwkSet.startsWith('http') ? jwkSet : null,\n        '5 minutes',\n        '1 minute'\n    );\n    return config;\n}());\n*/\n"
        },
        "403cf226-6051-4368-8b72-9ba14f9a5140": {
          "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from VKontakte",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "VKontakte Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.first_name),\n        field(\"givenName\", rawProfile.first_name),\n        field(\"familyName\", rawProfile.last_name),\n        field(\"photoUrl\", rawProfile.photo_50),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "424da748-82cc-4b54-be6f-82bd64d82a74": {
          "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Yahoo",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Yahoo Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.locale)))\n"
        },
        "472534ec-a25f-468d-a606-3fb1935190df": {
          "_id": "472534ec-a25f-468d-a606-3fb1935190df",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from WeChat",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "WeChat Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.openid),\n        field(\"displayName\", rawProfile.nickname),\n        field(\"photoUrl\", rawProfile.headimgurl),\n        field(\"username\", rawProfile.nickname)))\n"
        },
        "484e6246-dbc6-4288-97e6-54e55431402e": {
          "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Apple",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Apple Profile Normalization",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n *\n * In some common default configurations, the following keys are required to be not empty:\n * username, givenName, familyName, email.\n *\n * From RFC4517: A value of the Directory String syntax is a string of one or more\n * arbitrary characters from the Universal Character Set (UCS).\n * A zero-length character string is not permitted.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nString email = \"change@me.com\"\nString subjectId = rawProfile.sub\nString firstName = \" \"\nString lastName = \" \"\nString username = subjectId\nString name\n\nif (rawProfile.isDefined(\"email\") && rawProfile.email.isNotNull()){ // User can elect to not share their email\n    email = rawProfile.email.asString()\n    username = email\n}\nif (rawProfile.isDefined(\"name\") && rawProfile.name.isNotNull()) {\n    if (rawProfile.name.isDefined(\"firstName\") && rawProfile.name.firstName.isNotNull()) {\n        firstName = rawProfile.name.firstName.asString()\n    }\n    if (rawProfile.name.isDefined(\"lastName\") && rawProfile.name.lastName.isNotNull()) {\n        lastName = rawProfile.name.lastName.asString()\n    }\n}\n\nname = (firstName?.trim() ? firstName : \"\") + (lastName?.trim() ? ((firstName?.trim() ? \" \" : \"\") + lastName) : \"\")\nname =  (!name?.trim()) ? \" \" : name\n\nreturn json(object(\n        field(\"id\", subjectId),\n        field(\"displayName\", name),\n        field(\"email\", email),\n        field(\"givenName\", firstName),\n        field(\"familyName\", lastName),\n        field(\"username\", username)))\n"
        },
        "58c824ae-84ed-4724-82cd-db128fc3f6c": {
          "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Converts a normalized social profile into a managed user",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Normalized Profile to Managed User",
          "script": "/*\n * Copyright 2020-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue managedUser = json(object(\n        field(\"givenName\", normalizedProfile.givenName),\n        field(\"sn\", normalizedProfile.familyName),\n        field(\"mail\", normalizedProfile.email),\n        field(\"userName\", normalizedProfile.username)))\n\nif (normalizedProfile.postalAddress.isNotNull()) managedUser.put(\"postalAddress\", normalizedProfile.postalAddress)\nif (normalizedProfile.addressLocality.isNotNull()) managedUser.put(\"city\", normalizedProfile.addressLocality)\nif (normalizedProfile.addressRegion.isNotNull()) managedUser.put(\"stateProvince\", normalizedProfile.addressRegion)\nif (normalizedProfile.postalCode.isNotNull()) managedUser.put(\"postalCode\", normalizedProfile.postalCode)\nif (normalizedProfile.country.isNotNull()) managedUser.put(\"country\", normalizedProfile.country)\nif (normalizedProfile.phone.isNotNull()) managedUser.put(\"telephoneNumber\", normalizedProfile.phone)\n\n// if the givenName and familyName is null or empty\n// then add a boolean flag to the shared state to indicate names are not present\n// this could be used elsewhere\n// for eg. this could be used in a scripted decision node to by-pass patching\n// the user object with blank values when givenName  and familyName is not present\nboolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())\nboolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())\nsharedState.put(\"nameEmptyOrNull\", noGivenName && noFamilyName)\n\n\nreturn managedUser\n"
        },
        "58d29080-4563-480b-89bb-1e7719776a21": {
          "_id": "58d29080-4563-480b-89bb-1e7719776a21",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Google",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Google Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.locale)))\n"
        },
        "5e854779-6ec1-4c39-aeba-0477e0986646": {
          "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
          "context": "CONFIG_PROVIDER_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Script to provide values for a config provider node",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Config Provider Node Script",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/**\n * The following script is a simplified template for understanding how to build\n * up a config Map object with custom values. The Config Provider Node will then\n * provide this config Map to the desired node type. It is important that the Map\n * you build here is named 'config'.\n *\n * Defined variables:\n *\n * nodeState - Node State (1)\n *           Always present, this represents the current values stored in the node state.\n *\n * idRepository - Profile Data (2)\n *           Always present, a repository to retrieve user information.\n *\n * secrets - Credentials and Secrets (3)\n *           Always present, an interface to access the Secrets API from a scripting context.\n *\n * requestHeaders (4) - Map (5)\n *           Always present, an object that provides methods for accessing headers in the login request.\n *\n * logger - Debug Logging (6)\n *          Always present, the debug logger instance.\n *\n * httpClient - HTTP Client (7)\n *          Always present, the HTTP client that can be used to make external HTTP requests.\n *\n * realm - String (primitive).\n *          Always present, the name of the realm the user is authenticating to.\n *\n * existingSession - Map<String, String> (5)\n *          Present if the request contains the session cookie, the user's session object. The returned map from\n *          SSOToken.getProperties() (8)\n *\n * requestParameters - Map (5)\n *          Always present, the object that contains the authentication request parameters.\n *\n *\n * Outputs:\n *\n * config - Map (5)\n *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the\n *           associated node selected in the ConfigProviderNode.\n *\n * Reference:\n * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState\n * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo\n * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets\n * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.\n * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html\n * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n */\n\nconfig = {\n    \"key0\": {\"subKey\": \"value0\"},\n    \"key1\": \"value1\"\n};\n"
        },
        "69f06e63-128c-4e2f-af52-079a8a6f448b": {
          "_id": "69f06e63-128c-4e2f-af52-079a8a6f448b",
          "context": "SAML2_SP_ADAPTER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 SP Adapter",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 SP Adapter Script",
          "script": "/*\n * Copyright 2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * The script has these top level functions that could be executed during a SAML2 flow.\n *      - preSingleSignOnRequest\n *      - preSingleSignOnProcess\n *      - postSingleSignOnSuccess\n *      - postSingleSignOnFailure\n *      - postNewNameIDSuccess\n *      - postTerminateNameIDSuccess\n *      - preSingleLogoutProcess\n *      - postSingleLogoutSuccess\n *\n * Please see the JavaDoc for the interface for more information about these methods.\n * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html\n * Note that the initialize method is not supported in the scripts.\n *\n * Defined variables. Check the documentation on the respective functions for the variables available to it.\n *\n * hostedEntityId - String\n *     Entity ID for the hosted IDP\n * realm - String\n *     Realm of the hosted IDP\n * idpEntityId - String\n *     The entity ID for the Identity Provider for which the sign-on request will be sent.\n * request - HttpServletRequest (1)\n *     Servlet request object\n * response - HttpServletResponse (2)\n *     Servlet response object\n * authnRequest - AuthnRequest (3)\n *     The authentication request sent that is sent from the Service Provider.\n * session - SSOToken (4)\n *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.\n * res - Response (5)\n *     The SSO Response received from the Identity Provider.\n * profile - String\n *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):\n *          - SAML2Constants.HTTP_POST\n *          - SAML2Constants.HTTP_ARTIFACT\n *          - SAML2Constants.PAOS\n * out - PrintWriter (7)\n *     The PrintWriter that can be used to write to.\n * isFederation - boolean\n *     Set to true if using federation, otherwise false.\n * failureCode - int\n *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.\n * userId - String\n *     The unique universal ID of the user with whom the new name identifier request was performed.\n * idRequest - ManageNameIDRequest (8)\n *     The new name identifier request, this will be null if the request object is not available\n * idResponse - ManageNameIDResponse (9)\n *     The new name identifier response, this will be null if the response object is not available\n * binding - String\n *     The binding used for the new name identifier request. This will be one of the following values:\n *          - SAML2Constants.SOAP\n *          - SAML2Constants.HTTP_REDIRECT\n * logoutRequest - LogoutRequest (10)\n *     The single logout request.\n * logoutResponse - LogoutResponse (11)\n *     The single logout response.\n * spAdapterScriptHelper - SpAdapterScriptHelper (12)\n *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.\n * logger - Logger instance\n *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *     Corresponding log files will be prefixed with: scripts.<script name>\n *\n * Throws SAML2Exception (13):\n *     for any exceptions occurring in the adapter. The federation process will continue\n *\n * Class reference:\n * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.\n * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.\n * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.\n * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.\n * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html\n * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html\n * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html\n * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html\n * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html\n * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html\n * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html\n * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.\n * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.\n */\n\n/*\n * Template/default script for SAML2 SP Adapter scripted plugin.\n */\n\n/*\n * Available variables for preSingleSignOnRequest:\n *     hostedEntityId\n *     idpEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleSignOnRequest() {\n}\n\n/*\n * Available variables for preSingleSignOnProcess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     res\n *     profile\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleSignOnProcess() {\n}\n\n/*\n * Available variables for postSingleSignOnSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     out\n *     session\n *     authnRequest\n *     res\n *     profile\n *     isFederation\n *     spAdapterScriptHelper\n *     logger\n *\n * Return - true if response is being redirected, false if not. Default to false.\n */\nfunction postSingleSignOnSuccess() {\n    return false;\n}\n\n/*\n * Available variables for postSingleSignOnFailure:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     res\n *     profile\n *     failureCode\n *     spAdapterScriptHelper\n *     logger\n *\n * Return - true if response is being redirected, false if not. Default to false.\n */\nfunction postSingleSignOnFailure() {\n    return false;\n}\n\n/*\n * Available variables for postNewNameIDSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     idRequest\n *     idResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postNewNameIDSuccess() {\n}\n\n/*\n * Available variables for postTerminateNameIDSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     idRequest\n *     idResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postTerminateNameIDSuccess() {\n}\n\n/*\n * Available variables for preSingleLogoutProcess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     logoutRequest\n *     logoutResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleLogoutProcess() {\n}\n\n/*\n * Available variables for postSingleLogoutSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     logoutRequest\n *     logoutResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postSingleLogoutSuccess() {\n}\n"
        },
        "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30": {
          "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Amazon",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Amazon Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.user_id),\n        field(\"displayName\", rawProfile.name),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "6c49bebe-3a62-11ed-a261-0242ac120002": {
          "_id": "6c49bebe-3a62-11ed-a261-0242ac120002",
          "context": "LIBRARY",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global library script to be referenced from other scripts",
          "evaluatorVersion": "2.0",
          "exports": [
            {
              "arity": 2,
              "id": "logError",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logWarning",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logInfo",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logDebug",
              "type": "Function"
            }
          ],
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Library Script",
          "script": "/*\n * Copyright 2022-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This is an example library script with methods that can be used in other scripts.\n * To reference it, use the following:\n *\n * var library = require(\"Library Script\");\n *\n * library.logError(logger, \"Error message\");\n * library.logDebug(logger, \"Debug message\");\n */\n\nfunction logError(log, errorMessage) {\n  log.error(errorMessage);\n}\n\nfunction logWarning(log, warningMessage) {\n  log.warn(warningMessage);\n}\n\nexports.logError = logError;\nexports.logWarning = logWarning;\n\n// Alternatively, exports can be declared using an inline arrow function\n\nexports.logInfo = (log, infoMessage) => log.info(infoMessage);\nexports.logDebug = (log, debugMessage) => log.debug(debugMessage);\n"
        },
        "703dab1a-1921-4981-98dd-b8e5349d8548": {
          "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
          "context": "AUTHENTICATION_SERVER_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for server side Device Id (Match) Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Id (Match) - Server Side",
          "script": "/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved\n *\n * The contents of this file are subject to the terms\n * of the Common Development and Distribution License\n * (the License). You may not use this file except in\n * compliance with the License.\n *\n * You can obtain a copy of the License at\n * https://opensso.dev.java.net/public/CDDLv1.0.html or\n * opensso/legal/CDDLv1.0.txt\n * See the License for the specific language governing\n * permission and limitations under the License.\n *\n * When distributing Covered Code, include this CDDL\n * Header Notice in each file and include the License file\n * at opensso/legal/CDDLv1.0.txt.\n * If applicable, add the following below the CDDL Header,\n * with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n */\n/*\n * Portions Copyrighted 2013 Syntegrity.\n * Portions Copyrighted 2013-2018 ForgeRock AS.\n */\n\nvar ScalarComparator = {}, ScreenComparator = {}, MultiValueComparator = {}, UserAgentComparator = {}, GeolocationComparator = {};\n\nvar config = {\n    profileExpiration: 30,              //in days\n    maxProfilesAllowed: 5,\n    maxPenaltyPoints: 0,\n    attributes: {\n        screen: {\n            required: true,\n            comparator: ScreenComparator,\n            args: {\n                penaltyPoints: 50\n            }\n        },\n        plugins: {\n            installedPlugins: {\n                required: false,\n                comparator: MultiValueComparator,\n                args: {\n                    maxPercentageDifference: 10,\n                    maxDifferences: 5,\n                    penaltyPoints: 100\n                }\n            }\n        },\n        fonts: {\n            installedFonts: {\n                required: false,\n                comparator: MultiValueComparator,\n                args: {\n                    maxPercentageDifference: 10,\n                    maxDifferences: 5,\n                    penaltyPoints: 100\n                }\n            }\n        },\n        timezone: {\n            timezone: {\n                required: false,\n                comparator: ScalarComparator,\n                args: {\n                    penaltyPoints: 100\n                }\n            }\n        },\n        userAgent: {\n            required: true,\n            comparator: UserAgentComparator,\n            args: {\n                ignoreVersion: true,\n                penaltyPoints: 100\n            }\n        },\n        geolocation: {\n            required: false,\n            comparator: GeolocationComparator,\n            args: {\n                allowedRange: 100,            //in miles\n                penaltyPoints: 100\n            }\n        }\n    }\n};\n\n//---------------------------------------------------------------------------//\n//                           Comparator functions                            //\n//---------------------------------------------------------------------------//\n\nvar all, any, calculateDistance, calculateIntersection, calculatePercentage, nullOrUndefined, splitAndTrim,\n    undefinedLocation;\n\n// ComparisonResult\n\n/**\n * Constructs an instance of a ComparisonResult with the given penalty points.\n *\n * @param penaltyPoints (Number) The penalty points for the comparison (defaults to 0).\n * @param additionalInfoInCurrentValue (boolean) Whether the current value contains more information\n *                                               than the stored value (defaults to false).\n */\nfunction ComparisonResult() {\n\n    var penaltyPoints = 0,\n        additionalInfoInCurrentValue = false;\n\n    if (arguments[0] !== undefined && arguments[1] !== undefined) {\n        penaltyPoints = arguments[0];\n        additionalInfoInCurrentValue = arguments[1];\n    }\n\n    if (arguments[0] !== undefined && arguments[1] === undefined) {\n        if (typeof(arguments[0]) === \"boolean\") {\n            additionalInfoInCurrentValue = arguments[0];\n        } else {\n            penaltyPoints = arguments[0];\n        }\n    }\n\n    this.penaltyPoints = penaltyPoints;\n    this.additionalInfoInCurrentValue = additionalInfoInCurrentValue;\n\n}\n\nComparisonResult.ZERO_PENALTY_POINTS = new ComparisonResult(0);\n\n/**\n * Static method for functional programming.\n *\n * @return boolean true if comparisonResult.isSuccessful().\n */\nComparisonResult.isSuccessful =  function(comparisonResult) {\n    return comparisonResult.isSuccessful();\n};\n\n\n/**\n * Static method for functional programming.\n *\n * @return boolean true if comparisonResult.additionalInfoInCurrentValue.\n */\nComparisonResult.additionalInfoInCurrentValue =  function(comparisonResult) {\n    return comparisonResult.additionalInfoInCurrentValue;\n};\n\n/**\n * Comparison function that can be provided as an argument to array.sort\n */\nComparisonResult.compare = function(first, second) {\n    if (nullOrUndefined(first) && nullOrUndefined(second)) {\n        return 0;\n    } else if (nullOrUndefined(first)) {\n        return -1;\n    } else if (nullOrUndefined(second)) {\n        return 1;\n    } else {\n        if (first.penaltyPoints !== second.penaltyPoints) {\n            return first.penaltyPoints - second.penaltyPoints;\n        } else {\n            return (first.additionalInfoInCurrentValue ? 1 : 0) - (second.additionalInfoInCurrentValue ? 1 : 0);\n        }\n    }\n};\n\n/**\n * Amalgamates the given ComparisonResult into this ComparisonResult.\n *\n * @param comparisonResult The ComparisonResult to include.\n */\nComparisonResult.prototype.addComparisonResult = function(comparisonResult) {\n    this.penaltyPoints += comparisonResult.penaltyPoints;\n    if (comparisonResult.additionalInfoInCurrentValue) {\n        this.additionalInfoInCurrentValue = comparisonResult.additionalInfoInCurrentValue;\n    }\n};\n\n/**\n * Returns true if no penalty points have been assigned for the comparison.\n *\n * @return boolean true if the comparison was successful.\n */\nComparisonResult.prototype.isSuccessful = function() {\n    return nullOrUndefined(this.penaltyPoints) || this.penaltyPoints === 0;\n};\n\n/**\n * Compares two simple objects (String|Number) and if they are equal then returns a ComparisonResult with zero\n * penalty points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue (String|Number) The current value.\n * @param storedValue (String|Number) The stored value.\n * @param config: {\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return ComparisonResult.\n */\nScalarComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"StringComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"StringComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"StringComparator.compare:config: \" + JSON.stringify(config));\n    }\n    if (config.penaltyPoints === 0) {\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (!nullOrUndefined(storedValue)) {\n        if (nullOrUndefined(currentValue) || currentValue !== storedValue) {\n            return new ComparisonResult(config.penaltyPoints);\n        }\n    } else if (!nullOrUndefined(currentValue)) {\n        return new ComparisonResult(true);\n    }\n\n    return ComparisonResult.ZERO_PENALTY_POINTS;\n};\n\n/**\n * Compares two screens and if they are equal then returns a ComparisonResult with zero penalty points assigned,\n * otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue: {\n *            \"screenWidth\": (Number) The current client screen width.\n *            \"screenHeight\": (Number) The current client screen height.\n *            \"screenColourDepth\": (Number) The current client screen colour depth.\n *        }\n * @param storedValue: {\n *            \"screenWidth\": (Number) The stored client screen width.\n *            \"screenHeight\": (Number) The stored client screen height.\n *            \"screenColourDepth\": (Number) The stored client screen colour depth.\n *        }\n * @param config: {\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return ComparisonResult\n */\nScreenComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"ScreenComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"ScreenComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"ScreenComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    if (nullOrUndefined(currentValue)) {\n        currentValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};\n    }\n    if (nullOrUndefined(storedValue)) {\n        storedValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};\n    }\n\n    var comparisonResults = [\n        ScalarComparator.compare(currentValue.screenWidth, storedValue.screenWidth, config),\n        ScalarComparator.compare(currentValue.screenHeight, storedValue.screenHeight, config),\n        ScalarComparator.compare(currentValue.screenColourDepth, storedValue.screenColourDepth, config)];\n\n    if (all(comparisonResults, ComparisonResult.isSuccessful)) {\n        return new ComparisonResult(any(comparisonResults, ComparisonResult.additionalInfoInCurrentValue));\n    } else {\n        return new ComparisonResult(config.penaltyPoints);\n    }\n};\n\n/**\n * Splits both values using delimiter, trims every value and compares collections of values.\n * Returns zero-result for same multi-value attributes.\n *\n * If collections are not same checks if number of differences is less or equal maxDifferences or\n * percentage of difference is less or equal maxPercentageDifference.\n *\n * If yes then returns zero-result with additional info, else returns penaltyPoints-result.\n *\n * @param currentValue: (String) The current value.\n * @param storedValue: (String) The stored value.\n * @param config: {\n *            \"maxPercentageDifference\": (Number) The max difference percentage in the values,\n *                                                before the penalty is assigned.\n *            \"maxDifferences\": (Number) The max number of differences in the values,\n *                                       before the penalty points are assigned.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n  *        }\n * @return ComparisonResult\n */\nMultiValueComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"MultiValueComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"MultiValueComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"MultiValueComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    var delimiter = \";\",\n        currentValues = splitAndTrim(currentValue, delimiter),\n        storedValues = splitAndTrim(storedValue, delimiter),\n        maxNumberOfElements = Math.max(currentValues.length, storedValues.length),\n        numberOfTheSameElements = calculateIntersection(currentValues, storedValues).length,\n        numberOfDifferences = maxNumberOfElements - numberOfTheSameElements,\n        percentageOfDifferences = calculatePercentage(numberOfDifferences, maxNumberOfElements);\n\n    if (nullOrUndefined(storedValue) && !nullOrUndefined(currentValue)) {\n        return new ComparisonResult(true);\n    }\n\n    if (logger.messageEnabled()) {\n        logger.message(numberOfTheSameElements + \" of \" + maxNumberOfElements + \" are same\");\n    }\n\n    if (maxNumberOfElements === 0) {\n        logger.message(\"Ignored because no attributes found in both profiles\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (numberOfTheSameElements === maxNumberOfElements) {\n        logger.message(\"Ignored because all attributes are same\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (numberOfDifferences > config.maxDifferences) {\n        if (logger.messageEnabled()) {\n            logger.message(\"Would be ignored if not more than \" + config.maxDifferences + \" differences\");\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n\n    if (percentageOfDifferences > config.maxPercentageDifference) {\n        if (logger.messageEnabled()) {\n            logger.message(percentageOfDifferences + \" percents are different\");\n            logger.message(\"Would be ignored if not more than \" + config.maxPercentageDifference + \" percent\");\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n\n    if (logger.messageEnabled()) {\n        logger.message(\"Ignored because number of differences(\" + numberOfDifferences + \") not more than \"\n            + config.maxDifferences);\n        logger.message(percentageOfDifferences + \" percents are different\");\n        logger.message(\"Ignored because not more than \" + config.maxPercentageDifference + \" percent\");\n    }\n    return new ComparisonResult(true);\n};\n\n/**\n * Compares two User Agent Strings and if they are equal then returns a ComparisonResult with zero penalty\n * points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue (String) The current value.\n * @param storedValue (String) The stored value.\n * @param config: {\n *            \"ignoreVersion\": (boolean) If the version numbers in the User Agent Strings should be ignore\n *                                       in the comparison.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return A ComparisonResult.\n */\nUserAgentComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"UserAgentComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"UserAgentComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"UserAgentComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    if (config.ignoreVersion) {\n        // remove version number\n        currentValue = nullOrUndefined(currentValue) ? null : currentValue.replace(/[\\d\\.]+/g, \"\").trim();\n        storedValue = nullOrUndefined(storedValue) ? null : storedValue.replace(/[\\d\\.]+/g, \"\").trim();\n    }\n\n    return ScalarComparator.compare(currentValue, storedValue, config);\n};\n\n/**\n * Compares two locations, taking into account a degree of difference.\n *\n * @param currentValue: {\n *            \"latitude\": (Number) The current latitude.\n *            \"longitude\": (Number) The current longitude.\n *        }\n * @param storedValue: {\n *            \"latitude\": (Number) The stored latitude.\n *            \"longitude\": (Number) The stored longitude.\n *        }\n * @param config: {\n *            \"allowedRange\": (Number) The max difference allowed in the two locations, before the penalty is assigned.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n*         }\n * @return ComparisonResult\n */\nGeolocationComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"GeolocationComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"GeolocationComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"GeolocationComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    // Check for undefined stored or current locations\n\n    if (undefinedLocation(currentValue) && undefinedLocation(storedValue)) {\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n    if (undefinedLocation(currentValue) && !undefinedLocation(storedValue)) {\n        return new ComparisonResult(config.penaltyPoints);\n    }\n    if (!undefinedLocation(currentValue) && undefinedLocation(storedValue)) {\n        return new ComparisonResult(true);\n    }\n\n    // Both locations defined, therefore perform comparison\n\n    var distance = calculateDistance(currentValue, storedValue);\n\n    if (logger.messageEnabled()) {\n        logger.message(\"Distance between (\" + currentValue.latitude + \",\" + currentValue.longitude + \") and (\" +\n            storedValue.latitude + \",\" + storedValue.longitude + \") is \" + distance + \" miles\");\n    }\n\n    if (parseFloat(distance.toPrecision(5)) === 0) {\n        logger.message(\"Location is the same\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (distance <= config.allowedRange) {\n        if (logger.messageEnabled()) {\n            logger.message(\"Tolerated because distance not more then \" + config.allowedRange);\n        }\n        return new ComparisonResult(true);\n    } else {\n        if (logger.messageEnabled()) {\n            logger.message(\"Would be ignored if distance not more then \" + config.allowedRange);\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n};\n\n\n//---------------------------------------------------------------------------//\n//                    Device Print Logic - DO NOT MODIFY                     //\n//---------------------------------------------------------------------------//\n\n// Utility functions\n\n/**\n * Returns true if evaluating function f on each element of the Array a returns true.\n *\n * @param a: (Array) The array of elements to evaluate\n * @param f: (Function) A single argument function for mapping elements of the array to boolean.\n * @return boolean.\n */\nall = function(a, f) {\n    var i;\n    for (i = 0; i < a.length; i++) {\n        if (f(a[i]) === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Returns true if evaluating function f on any element of the Array a returns true.\n *\n * @param a: (Array) The array of elements to evaluate\n * @param f: (Function) A single argument function for mapping elements of the array to boolean.\n * @return boolean.\n */\nany = function(a, f) {\n    var i;\n    for (i = 0; i < a.length; i++) {\n        if (f(a[i]) === true) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Returns true if the provided location is null or has undefined longitude or latitude values.\n *\n * @param location: {\n *            \"latitude\": (Number) The latitude.\n *            \"longitude\": (Number) The longitude.\n *        }\n * @return boolean\n */\nundefinedLocation = function(location) {\n    return nullOrUndefined(location) || nullOrUndefined(location.latitude) || nullOrUndefined(location.longitude);\n};\n\n/**\n * Returns true if the provided value is null or undefined.\n *\n * @param value: a value of any type\n * @return boolean\n */\nnullOrUndefined = function(value) {\n    return value === null || value === undefined;\n};\n\n/**\n * Calculates the distances between the two locations.\n *\n * @param first: {\n *            \"latitude\": (Number) The first latitude.\n *            \"longitude\": (Number) The first longitude.\n *        }\n * @param second: {\n *            \"latitude\": (Number) The second latitude.\n *            \"longitude\": (Number) The second longitude.\n *        }\n * @return Number The distance between the two locations.\n */\ncalculateDistance = function(first, second) {\n    var factor = (Math.PI / 180),\n        theta,\n        dist;\n    function degreesToRadians(degrees) {\n        return degrees * factor;\n    }\n    function radiansToDegrees(radians) {\n        return radians / factor;\n    }\n    theta = first.longitude - second.longitude;\n    dist = Math.sin(degreesToRadians(first.latitude)) * Math.sin(degreesToRadians(second.latitude))\n        + Math.cos(degreesToRadians(first.latitude)) * Math.cos(degreesToRadians(second.latitude))\n        * Math.cos(degreesToRadians(theta));\n    dist = Math.acos(dist);\n    dist = radiansToDegrees(dist);\n    dist = dist * 60 * 1.1515;\n    return dist;\n};\n\n/**\n * Converts a String holding a delimited sequence of values into an array.\n *\n * @param text (String) The String representation of a delimited sequence of values.\n * @param delimiter (String) The character delimiting values within the text String.\n * @return (Array) The comma separated values.\n */\nsplitAndTrim = function(text, delimiter) {\n\n    var results = [],\n        i,\n        values,\n        value;\n    if (text === null) {\n        return results;\n    }\n\n    values = text.split(delimiter);\n    for (i = 0; i < values.length; i++) {\n        value = values[i].trim();\n        if (value !== \"\") {\n            results.push(value);\n        }\n    }\n\n    return results;\n};\n\n/**\n * Converts value to a percentage of range.\n *\n * @param value (Number) The actual number to be converted to a percentage.\n * @param range (Number) The total number of values (i.e. represents 100%).\n * @return (Number) The percentage.\n */\ncalculatePercentage = function(value, range) {\n    if (range === 0) {\n        return 0;\n    }\n    return parseFloat((value / range).toPrecision(2)) * 100;\n};\n\n/**\n * Creates a new array containing only those elements found in both arrays received as arguments.\n *\n * @param first (Array) The first array.\n * @param second (Array) The second array.\n * @return (Array) The elements that found in first and second.\n */\ncalculateIntersection = function(first, second) {\n    return first.filter(function(element) {\n        return second.indexOf(element) !== -1;\n    });\n};\n\nfunction getValue(obj, attributePath) {\n    var value = obj,\n        i;\n    for (i = 0; i < attributePath.length; i++) {\n        if (value === undefined) {\n            return null;\n        }\n        value = value[attributePath[i]];\n    }\n    return value;\n}\n\n\nfunction isLeafNode(attributeConfig) {\n    return attributeConfig.comparator !== undefined;\n}\n\nfunction getAttributePaths(attributeConfig, attributePath) {\n\n    var attributePaths = [],\n        attributeName,\n        attrPaths,\n        attrPath,\n        i;\n\n    for (attributeName in attributeConfig) {\n        if (attributeConfig.hasOwnProperty(attributeName)) {\n\n            if (isLeafNode(attributeConfig[attributeName])) {\n                attrPath = attributePath.slice();\n                attrPath.push(attributeName);\n                attributePaths.push(attrPath);\n            } else {\n                attrPath = attributePath.slice();\n                attrPath.push(attributeName);\n                attrPaths = getAttributePaths(attributeConfig[attributeName], attrPath);\n                for (i = 0; i < attrPaths.length; i++) {\n                    attributePaths.push(attrPaths[i]);\n                }\n            }\n        }\n    }\n\n    return attributePaths;\n}\n\nfunction getDevicePrintAttributePaths(attributeConfig) {\n    return getAttributePaths(attributeConfig, []);\n}\n\nfunction hasRequiredAttributes(devicePrint, attributeConfig) {\n\n    var attributePaths = getDevicePrintAttributePaths(attributeConfig),\n        i,\n        attrValue,\n        attrConfig;\n\n    for (i = 0; i < attributePaths.length; i++) {\n\n        attrValue = getValue(devicePrint, attributePaths[i]);\n        attrConfig = getValue(attributeConfig, attributePaths[i]);\n\n        if (attrConfig.required && attrValue === undefined) {\n            logger.warning(\"Device Print profile missing required attribute, \" + attributePaths[i]);\n            return false;\n        }\n    }\n\n    logger.message(\"device print has required attributes\");\n    return true;\n}\n\nfunction compareDevicePrintProfiles(attributeConfig, devicePrint, devicePrintProfiles, maxPenaltyPoints) {\n\n    var attributePaths = getDevicePrintAttributePaths(attributeConfig),\n        dao = sharedState.get('_DeviceIdDao'),\n        results,\n        j,\n        aggregatedComparisonResult,\n        i,\n        currentValue,\n        storedValue,\n        attrConfig,\n        comparisonResult,\n        selectedComparisonResult,\n        selectedProfile,\n        curDevicePrintProfile,\n        vals;\n\n    results = [];\n    for (j = 0; j < devicePrintProfiles.length; j++) {\n        curDevicePrintProfile = JSON.parse(org.forgerock.json.JsonValue.json(devicePrintProfiles[j]));\n        aggregatedComparisonResult = new ComparisonResult();\n        for (i = 0; i < attributePaths.length; i++) {\n\n            currentValue = getValue(devicePrint, attributePaths[i]);\n            storedValue = getValue(curDevicePrintProfile.devicePrint, attributePaths[i]);\n            attrConfig = getValue(attributeConfig, attributePaths[i]);\n\n            if (storedValue === null) {\n                comparisonResult = new ComparisonResult(attrConfig.penaltyPoints);\n            } else {\n                comparisonResult = attrConfig.comparator.compare(currentValue, storedValue, attrConfig.args);\n            }\n\n            if (logger.messageEnabled()) {\n                logger.message(\"Comparing attribute path: \" + attributePaths[i]\n                    + \", Comparison result: successful=\" + comparisonResult.isSuccessful() + \", penaltyPoints=\"\n                    + comparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n                    + comparisonResult.additionalInfoInCurrentValue);\n            }\n            aggregatedComparisonResult.addComparisonResult(comparisonResult);\n        }\n        if (logger.messageEnabled()) {\n            logger.message(\"Aggregated comparison result: successful=\"\n                + aggregatedComparisonResult.isSuccessful() + \", penaltyPoints=\"\n                + aggregatedComparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n                + aggregatedComparisonResult.additionalInfoInCurrentValue);\n        }\n\n        results.push({\n            key: aggregatedComparisonResult,\n            value: devicePrintProfiles[j]\n        });\n    }\n\n    if (results.length === 0) {\n        return null;\n    }\n\n    results.sort(function(a, b) {\n        return ComparisonResult.compare(a.key, b.key);\n    });\n    selectedComparisonResult = results[0].key;\n    if (logger.messageEnabled()) {\n        logger.message(\"Selected comparison result: successful=\" + selectedComparisonResult.isSuccessful()\n            + \", penaltyPoints=\" + selectedComparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n            + selectedComparisonResult.additionalInfoInCurrentValue);\n    }\n\n    selectedProfile = null;\n    if (selectedComparisonResult.penaltyPoints <= maxPenaltyPoints) {\n        selectedProfile = results[0].value;\n        if (logger.messageEnabled()) {\n            logger.message(\"Selected profile: \" + selectedProfile +\n                \" with \" + selectedComparisonResult.penaltyPoints + \" penalty points\");\n        }\n    }\n\n    if (selectedProfile === null) {\n        return false;\n    }\n\n    /* update profile */\n    selectedProfile.put(\"selectionCounter\",\n        java.lang.Integer.valueOf(parseInt(selectedProfile.get(\"selectionCounter\"), 10) + 1));\n    selectedProfile.put(\"lastSelectedDate\", java.lang.Long.valueOf(new Date().getTime()));\n    selectedProfile.put(\"devicePrint\", devicePrint);\n\n    vals = [];\n    for (i = 0; i < devicePrintProfiles.length; i++) {\n        vals.push(org.forgerock.json.JsonValue.json(devicePrintProfiles[i]));\n    }\n\n    dao.saveDeviceProfiles(username, realm, vals);\n\n    return true;\n}\n\nfunction matchDevicePrint() {\n\n    if (!username) {\n        logger.error(\"Username not set. Cannot compare user's device print profiles.\");\n        authState = FAILED;\n    } else {\n\n        if (logger.messageEnabled()) {\n            logger.message(\"client devicePrint: \" + clientScriptOutputData);\n        }\n\n        var getProfiles = function () {\n\n                function isExpiredProfile(devicePrintProfile) {\n                    var expirationDate = new Date(),\n                        lastSelectedDate;\n                    expirationDate.setDate(expirationDate.getDate() - config.profileExpiration);\n\n                    lastSelectedDate = new Date(devicePrintProfile.lastSelectedDate);\n\n                    return lastSelectedDate < expirationDate;\n                }\n\n                function getNotExpiredProfiles() {\n                    var profile,\n                        dao = sharedState.get('_DeviceIdDao'),\n                        results = [],\n                        profiles,\n                        iter;\n\n                    profiles = dao.getDeviceProfiles(username, realm);\n\n                    if (profiles) {\n                        iter = profiles.iterator();\n\n                        while (iter.hasNext()) {\n                            profile = iter.next().getObject();\n                            if (!isExpiredProfile(profile)) {\n                                results.push(profile);\n                            }\n                        }\n                    }\n                    if (logger.messageEnabled()) {\n                        logger.message(\"stored non-expired profiles: \" + results);\n                    }\n                    return results;\n                }\n\n                return getNotExpiredProfiles();\n            },\n            devicePrint = JSON.parse(clientScriptOutputData),\n            devicePrintProfiles = getProfiles();\n\n        if (!hasRequiredAttributes(devicePrint, config.attributes)) {\n            logger.message(\"devicePrint.hasRequiredAttributes: false\");\n            // Will fail this module but fall-through to next module. Which should be OTP.\n            authState = FAILED;\n        } else if (compareDevicePrintProfiles(config.attributes, devicePrint, devicePrintProfiles, config.maxPenaltyPoints)) {\n            logger.message(\"devicePrint.hasValidProfile: true\");\n            authState = SUCCESS;\n        } else {\n            logger.message(\"devicePrint.hasValidProfile: false\");\n            sharedState.put('devicePrintProfile', JSON.stringify(devicePrint));\n            // Will fail this module but fall-through to next module. Which should be OTP.\n            authState = FAILED;\n        }\n    }\n}\n\nmatchDevicePrint();\n"
        },
        "73cecbfc-dad0-4395-be6a-6858ee3a80e5": {
          "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Microsoft",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Microsoft Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.displayName),\n        field(\"givenName\", rawProfile.givenName),\n        field(\"familyName\", rawProfile.surname),\n        field(\"email\", rawProfile.userPrincipalName),\n        field(\"username\", rawProfile.userPrincipalName)))\n"
        },
        "7e3d7067-d50f-4674-8c76-a3e13a810c33": {
          "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
          "context": "AUTHENTICATION_SERVER_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for server side Scripted Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Module - Server Side",
          "script": "/*\n * Copyright 2015-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nvar START_TIME = 9;  // 9am\nvar END_TIME   = 17; // 5pm\nvar longitude, latitude;\nvar localTime;\n\nlogger.message(\"Starting scripted authentication\");\nlogger.message(\"User: \" + username);\n\nvar userPostalAddress = getUserPostalAddress();\nlogger.message(\"User address: \" + userPostalAddress);\n\ngetLongitudeLatitudeFromUserPostalAddress();\ngetLocalTime();\n\nlogger.message(\"Current time at the users location: \" + localTime.getHours());\nif (localTime.getHours() < START_TIME || localTime.getHours() > END_TIME) {\n    logger.error(\"Login forbidden outside work hours!\");\n    authState = FAILED;\n} else {\n    logger.message(\"Authentication allowed!\");\n    authState = SUCCESS;\n}\n\nfunction getLongitudeLatitudeFromUserPostalAddress() {\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(userPostalAddress));\n      request.setMethod(\"GET\");\n      //the above URI has to be extended with an API_KEY if used in a frequent manner\n      //see documentation: https://developers.google.com/maps/documentation/geocoding/intro\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var geocode = JSON.parse(response.getEntity().getString());\n    var i;\n    for (i = 0; i < geocode.results.length; i++) {\n        var result = geocode.results[i];\n        latitude = result.geometry.location.lat;\n        longitude = result.geometry.location.lng;\n\n           logger.message(\"latitude:\" + latitude + \" longitude:\" + longitude);\n    }\n}\n\nfunction getLocalTime() {\n\n    var now = new Date().getTime() / 1000;\n    var location = \"location=\" + latitude + \",\" + longitude;\n    var timestamp = \"timestamp=\" + now;\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"https://maps.googleapis.com/maps/api/timezone/json?\" + location + \"&\" + timestamp);\n      request.setMethod(\"GET\");\n      //the above URI has to be extended with an API_KEY if used in a frequent manner\n      //see documentation: https://developers.google.com/maps/documentation/timezone/intro\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var timezone = JSON.parse(response.getEntity().getString());\n    var localTimestamp = parseInt(now) + parseInt(timezone.dstOffset) + parseInt(timezone.rawOffset);\n    localTime = new Date(localTimestamp*1000);\n}\n\nfunction getUserPostalAddress() {\n    var userAddressSet = idRepository.getAttribute(username, \"postalAddress\");\n    if (userAddressSet == null || userAddressSet.isEmpty()) {\n        logger.warning(\"No address specified for user: \" + username);\n        return false;\n    }\n    return userAddressSet.iterator().next()\n}\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n}\n"
        },
        "8862ca8f-7770-4af5-a888-ac0df0947f36": {
          "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from LinkedIn",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "LinkedIn Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"givenName\", rawProfile.firstName.localized.get(0)),\n        field(\"familyName\", rawProfile.lastName.localized.get(0)),\n        field(\"photoUrl\", rawProfile.profilePicture.displayImage),\n        field(\"email\", rawProfile.elements.get(0).get(\"handle~\").emailAddress),\n        field(\"username\", rawProfile.elements.get(0).get(\"handle~\").emailAddress)))\n"
        },
        "8e298710-b55e-4085-a464-88a375a4004b": {
          "_id": "8e298710-b55e-4085-a464-88a375a4004b",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Twitter",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Twitter Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id_str),\n        field(\"displayName\", rawProfile.name),\n        field(\"photoUrl\", rawProfile.profile_image_url),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.screen_name)))\n"
        },
        "91d197de-5916-4dca-83b5-9a4df26e7159": {
          "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from WordPress",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "WordPress Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.username),\n        field(\"displayName\", rawProfile.display_name),\n        field(\"photoUrl\", rawProfile.avatar_URL),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.username)))\n"
        },
        "9de3eb62-f131-4fac-a294-7bd170fd4acb": {
          "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
          "context": "POLICY_CONDITION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for Scripted Policy Conditions",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Policy Condition",
          "script": "/*\n * Copyright 2015-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n/**\n * This is a Policy Condition example script. It demonstrates how to access a user's information,\n * use that information in external HTTP calls and make a policy decision based on the outcome.\n */\n\nvar userAddress, userIP, resourceHost;\n\nif (validateAndInitializeParameters()) {\n\n    var countryFromUserAddress = getCountryFromUserAddress();\n    logger.message(\"Country retrieved from user's address: \" + countryFromUserAddress);\n    var countryFromUserIP = getCountryFromUserIP();\n    logger.message(\"Country retrieved from user's IP: \" + countryFromUserIP);\n    var countryFromResourceURI = getCountryFromResourceURI();\n    logger.message(\"Country retrieved from resource URI: \" + countryFromResourceURI);\n\n    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {\n        logger.message(\"Authorization Succeeded\");\n        responseAttributes.put(\"countryOfOrigin\", [countryFromUserAddress]);\n        authorized = true;\n    } else {\n        logger.message(\"Authorization Failed\");\n        authorized = false;\n    }\n\n} else {\n    logger.message(\"Required parameters not found. Authorization Failed.\");\n    authorized = false;\n}\n\n/**\n * Use the user's address to lookup their country of residence.\n *\n * @returns {*} The user's country of residence.\n */\nfunction getCountryFromUserAddress() {\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(userAddress));\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var geocode = JSON.parse(response.getEntity().getString());\n    var i;\n    for (i = 0; i < geocode.results.length; i++) {\n        var result = geocode.results[i];\n        var j;\n        for (j = 0; j < result.address_components.length; i++) {\n            if (result.address_components[i].types[0] == \"country\") {\n                return result.address_components[i].long_name;\n            }\n        }\n    }\n}\n\n/**\n * Use the user's IP to lookup the country from which the request originated.\n *\n * @returns {*} The country from which the request originated.\n */\nfunction getCountryFromUserIP() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + userIP);\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity().getString());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Use the requested resource's host name to lookup the country where the resource is hosted.\n *\n * @returns {*} The country in which the resource is hosted.\n */\nfunction getCountryFromResourceURI() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + encodeURIComponent(resourceHost));\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity().getString());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Retrieve and validate the variables required to make the external HTTP calls.\n *\n * @returns {boolean} Will be true if validation was successful.\n */\nfunction validateAndInitializeParameters() {\n    var userAddressSet = identity.getAttribute(\"postalAddress\");\n    if (userAddressSet == null || userAddressSet.isEmpty()) {\n        logger.warning(\"No address specified for user: \" + username);\n        return false;\n    }\n    userAddress = userAddressSet.iterator().next();\n    logger.message(\"User address: \" + userAddress);\n\n    if (!environment) {\n        logger.warning(\"No environment parameters specified in the evaluation request.\");\n        return false;\n    }\n\n    var ipSet = environment.get(\"IP\");\n    if (ipSet == null || ipSet.isEmpty()) {\n        logger.warning(\"No IP specified in the evaluation request environment parameters.\");\n        return false;\n    }\n    userIP = ipSet.iterator().next();\n    logger.message(\"User IP: \" + userIP);\n\n    if (!resourceURI) {\n        logger.warning(\"No resource URI specified.\");\n        return false;\n    }\n    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];\n    logger.message(\"Resource host: \" + resourceHost);\n\n    return true;\n}\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n}\n"
        },
        "a7a78773-445b-4eca-bb93-409e86bced81": {
          "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from GitHub",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "GitHub Profile Normalization",
          "script": "/*\n * Copyright 2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.name),\n        field(\"username\", rawProfile.login)))\n"
        },
        "bae1d54a-e97d-4997-aa5d-c027f21af82c": {
          "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Facebook",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Facebook Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.first_name),\n        field(\"familyName\", rawProfile.last_name),\n        field(\"photoUrl\", rawProfile.picture.data.url),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "c4f22465-2368-4e27-8013-e6399974fd48": {
          "_id": "c4f22465-2368-4e27-8013-e6399974fd48",
          "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 IDP Attribute Mapper",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 IDP Attribute Mapper Script",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.\n *\n * Defined variables:\n * session - SSOToken (1)\n *           The single sign-on session.\n * hostedEntityId - String (primitive).\n *                  The hosted entity ID.\n * remoteEntityId - String (primitive).\n *                  The remote entity ID.\n * realm - String (primitive).\n *         The name of the realm the user is authenticating to.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER\n * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)\n *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.\n *\n * Throws SAML2Exception:\n *      - on failing to map the IDP attributes.\n *\n * Return - a list of SAML Attribute (3) objects.\n *\n * Class reference:\n * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.\n * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.\n */\n\n/**\n * Default SAML2 IDP Attribute Mapper.\n */\nfunction getAttributes() {\n    var frJava = JavaImporter(\n        com.sun.identity.saml2.common.SAML2Exception\n    );\n\n    const debugMethod = \"ScriptedIDPAttributeMapper.getAttributes:: \";\n\n    try {\n\n        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {\n            logger.error(debugMethod + \"Invalid session.\");\n            return null;\n        }\n\n        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);\n        logger.message(debugMethod + \"Remote SP attribute map = {}\", configMap);\n        if (configMap == null || configMap.isEmpty()) {\n            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);\n            if (configMap == null || configMap.isEmpty()) {\n                logger.message(debugMethod + \"Configuration map is not defined.\");\n                return null;\n            }\n            logger.message(debugMethod + \"Hosted IDP attribute map = {}\", configMap);\n        }\n\n        var attributes = new java.util.ArrayList();\n        var stringValueMap = new java.util.HashSet();\n        var binaryValueMap;\n        var localAttribute;\n\n        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.\n        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {\n            try {\n                // Resolve attributes to be read from the datastore.\n                var stringAttributes = new java.util.HashSet();\n                var binaryAttributes = new java.util.HashSet();\n                var keyIter = configMap.keySet().iterator();\n                while (keyIter.hasNext()) {\n                    var key = keyIter.next();\n                    localAttribute = configMap.get(key);\n                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                            // add it to the list of attributes to treat as being binary\n                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));\n                        } else {\n                            stringAttributes.add(localAttribute);\n                        }\n                    }\n                }\n\n                if (!stringAttributes.isEmpty()) {\n                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);\n                }\n                if (!binaryAttributes.isEmpty()) {\n                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);\n                }\n            } catch (error) {\n                logger.error(debugMethod + \"Error accessing the datastore. \" + error);\n                //continue to check in ssotoken.\n            }\n        }\n\n        var keyIter = configMap.keySet().iterator();\n        while (keyIter.hasNext()) {\n            var key = keyIter.next()\n            var nameFormat = null;\n            var samlAttribute = key;\n            localAttribute = configMap.get(key);\n            // check if samlAttribute has format nameFormat|samlAttribute\n            var samlAttributes = String(new java.lang.String(samlAttribute));\n            var tokens = samlAttributes.split('|');\n\n            if (tokens.length > 1) {\n                nameFormat = tokens[0];\n                samlAttribute = tokens[1];\n            }\n\n            var attributeValues = new java.util.HashSet();\n            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                // Remove the static flag before using it as the static value\n                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);\n                attributeValues = new java.util.HashSet([localAttribute]);\n                logger.message(debugMethod + \"Adding static value {} for attribute named {}\", localAttribute, samlAttribute);\n            } else {\n                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                    // Remove the flag as not used for lookup\n                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);\n                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,\n                        binaryValueMap);\n                } else {\n                    if (stringValueMap != null && !stringValueMap.isEmpty()) {\n                        attributeValues = stringValueMap.get(localAttribute);\n                    } else {\n                        logger.message(debugMethod + \"{} string value map was empty or null.\", localAttribute);\n                    }\n                }\n\n                // If all else fails, try to get the value from the users ssoToken\n                if (attributeValues == null || attributeValues.isEmpty()) {\n                    logger.message(debugMethod + \"User profile does not have value for {}, checking SSOToken.\", localAttribute);\n                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));\n                }\n            }\n\n            if (attributeValues == null || attributeValues.isEmpty()) {\n                logger.message(debugMethod + \"{} not found in user profile or SSOToken.\", localAttribute);\n            } else {\n                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));\n            }\n        }\n\n        return attributes;\n\n    } catch (error) {\n        logger.error(debugMethod + \"Error mapping IDP attributes. \" + error);\n        throw new frJava.SAML2Exception(error);\n    }\n}\n\ngetAttributes();\n"
        },
        "c735de08-f8f2-4e69-aa4a-2d8d3d438323": {
          "_id": "c735de08-f8f2-4e69-aa4a-2d8d3d438323",
          "context": "OAUTH2_MAY_ACT",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 May Act",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 May Act Script",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/**\n * Defined variables:\n * token - The access token to be updated. Mutable object, all changes to the access token will be reflected.\n * logger - always present, corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.\n * scriptName - always present, the display name of the script\n * session - present if the request contains the session cookie, the user's session object\n * requestProperties - always present, contains a map of request properties:\n *                     requestUri - the request URI\n *                     realm - the realm that the request relates to\n *                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n *                     more properties. Please note that these should be handled in accordance with OWASP best\n *                     practices.\n * clientProperties - present if the client specified in the request was identified, contains a map of client\n *                    properties:\n *                    clientId - the client's Uri for the request locale\n *                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n *                                        for the client\n *                    allowedResponseTypes - list of the allowed response types for the client\n *                    allowedScopes - list of the allowed scopes for the client\n *                    customProperties - A map of the custom properties of the client.\n *                                       Lists or maps will be included as sub-maps, e.g:\n *                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n *\n * identity - always present, the identity of the resource owner\n * scopes - always present, the requested scopes\n */\n/*\nimport org.forgerock.json.JsonValue\n\ntoken.setMayAct(\n    JsonValue.json(JsonValue.object(\n        JsonValue.field(\"client_id\", \"myClient\"), \n        JsonValue.field(\"sub\", \"(usr!myActor)\"))))\n*/\n"
        },
        "c827d2b4-3608-4693-868e-bbcf86bd87c7": {
          "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
          "context": "AUTHENTICATION_CLIENT_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for client side Scripted Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Module - Client Side",
          "script": "/*\n * Copyright 2016-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n/* Default Authentication client side script to use as a template for new scripts */\n"
        },
        "d22f9a0c-426a-4466-b95e-d0f125b0d5fa": {
          "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
          "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Access Token Modification",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Access Token Modification Script",
          "script": "/*\n * Copyright 2019-2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport org.forgerock.http.protocol.Request\nimport org.forgerock.http.protocol.Response\n\nimport com.iplanet.sso.SSOException\n\nimport groovy.json.JsonSlurper\n\n/**\n * Defined variables:\n * accessToken - The access token to be updated. Mutable object, all changes to the access token will be reflected.\n * httpClient - always present, the HTTP client that can be used to make external HTTP requests\n * identity - always present, the identity of the resource owner\n * logger - always present, corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.\n * scopes - always present, the requested scopes\n * session - present if the request contains the session cookie, the user's session object\n * scriptName - always present, the display name of the script\n * requestProperties - always present, contains a map of request properties:\n *                     requestUri - the request URI\n *                     realm - the realm that the request relates to\n *                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n *                     more properties. Please note that these should be handled in accordance with OWASP best\n *                     practices.\n * clientProperties - present if the client specified in the request was identified, contains a map of client\n *                    properties:\n *                    clientId - the client's Uri for the request locale\n *                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n *                                        for the client\n *                    allowedResponseTypes - list of the allowed response types for the client\n *                    allowedScopes - list of the allowed scopes for the client\n *                    customProperties - A map of the custom properties of the client.\n *                                       Lists or maps will be included as sub-maps, e.g:\n *                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n *\n * No return value - changes shall be made to the accessToken parameter directly.\n *\n * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens, and similarly the size of\n * the JWTs if client based OAuth2 tokens are utilised.\n * When adding/updating fields make sure that the token size remains within client/user-agent limits.\n */\n\n/*\n//Field to always include in token\naccessToken.setField(\"hello\", \"world\")\n\n//Obtain additional values by performing a REST call to an external service\ntry {\n    Response response = httpClient.send(new Request()\n            .setUri(\"https://third.party.app/hello.jsp\")\n            .setMethod(\"POST\")\n            .modifyHeaders({ headers -> headers.put(\"Content-Type\", \"application/json;charset=UTF-8\") })\n//          .setEntity('foo=bar&hello=world'))\n            .setEntity([foo: 'bar']))\n            .getOrThrow()\n    if (response.status.successful) {\n        def result = new JsonSlurper().parseText(response.entity.string)\n        accessToken.setFields(result.get(\"updatedFields\"))\n    } else {\n        logger.error(\"Unable to obtain access token modifications: {}, {}\", response.status, response.entity.toString())\n    }\n} catch (InterruptedException ex) {\n    logger.error(\"The request processing was interrupted\", ex)\n    Thread.currentThread().interrupt()\n    //The access token request will fail with HTTP 500 error in this case.\n    throw new RuntimeException(\"Unable to obtain response from \")\n}\n\n//Add new fields containing identity attribute values\ndef attributes = identity.getAttributes([\"mail\", \"telephoneNumber\"].toSet())\naccessToken.setField(\"mail\", attributes[\"mail\"])\naccessToken.setField(\"phone\", attributes[\"telephoneNumber\"])\n\n//Add new fields containing session property values\nif (session != null) { // session is not available for resource owner password credentials grant\n    try {\n        accessToken.setField(\"ipAddress\", session.getProperty(\"Host\"))\n    } catch (SSOException ex) {\n        logger.error(\"Unable to retrieve session property value\", ex)\n    }\n}\n\n// Remove a native field from the token entry, that was set by AM. For complete list of remove* methods see the JavaDoc\n// for org.forgerock.oauth2.core.AccessToken class.\naccessToken.removeTokenName()\n*/\n"
        },
        "da56fe60-8b38-4c46-a405-d6b306d4b336": {
          "_id": "da56fe60-8b38-4c46-a405-d6b306d4b336",
          "context": "OAUTH2_EVALUATE_SCOPE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Scope Evaluation",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Evaluate Scope Script",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you populate the scopes with profile attribute values when the tokeninfo endpoint is called.\n * For example, if one of the scopes is mail, AM sets mail to the resource owner's email address in the token information returned.\n *\n * Defined variables:\n * accessToken - AccessToken (1).\n *               The access token to be updated.\n *               Mutable object, all changes to the access token will be reflected.\n * identity - AMIdentity (2).\n *            The client's identity if present or the resource owner's identity. Can be null.\n * scriptName - String (primitive).\n *              Always present, the display name of the script.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_EVALUATE_SCOPE\n * httpClient - HTTP Client (3).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n *\n * Return - a Map<String, Object> of the access token's information (4).\n *\n * Class reference:\n * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.\n * (2) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.\n * (3) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.\n */\n\n/**\n * Default evaluate scope script to use as a template for new scripts.\n */\n\n(function () {\n    var map = new java.util.HashMap();\n    if (identity !== null) {\n        var scopes = accessToken.getScope().toArray();\n        scopes.forEach(function (scope) {\n            var attributes = identity.getAttribute(scope).toArray();\n            map.put(scope, attributes.join(\",\"));\n        });\n    } else {\n        logger.error('identity is null');\n    }\n    return map;\n}());\n"
        },
        "ed685f9f-5909-4726-86e8-22bd38b47663": {
          "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Converts a normalized social profile into an Identity",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Normalized Profile to Identity",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue identity = json(object(\n        field(\"givenName\", normalizedProfile.givenName),\n        field(\"sn\", normalizedProfile.familyName),\n        field(\"mail\", normalizedProfile.email),\n        field(\"cn\", normalizedProfile.displayName),\n        field(\"userName\", normalizedProfile.username),\n        field(\"iplanet-am-user-alias-list\", selectedIdp + '-' + normalizedProfile.id.asString())))\n\nreturn identity\n"
        }
      },
      "secrets": {},
      "secretstore": {
        "default-keystore": {
          "_id": "default-keystore",
          "_type": {
            "_id": "KeyStoreSecretStore",
            "collection": true,
            "name": "Keystore"
          },
          "file": "/home/prestonhales/am/security/keystores/keystore.jceks",
          "keyEntryPassword": "entrypass",
          "leaseExpiryDuration": 5,
          "mappings": [],
          "providerName": "SunJCE",
          "storePassword": "storepass",
          "storetype": "JCEKS"
        },
        "default-passwords-store": {
          "_id": "default-passwords-store",
          "_type": {
            "_id": "FileSystemSecretStore",
            "collection": true,
            "name": "File System Secret Volumes"
          },
          "directory": "/home/prestonhales/am/security/secrets/encrypted",
          "format": "ENCRYPTED_PLAIN"
        }
      },
      "service": {
        "SocialIdentityProviders": {
          "_id": "",
          "_type": {
            "_id": "SocialIdentityProviders",
            "collection": false,
            "name": "Social Identity Provider Service"
          },
          "enabled": true,
          "location": "/first",
          "nextDescendents": []
        },
        "id-repositories": {
          "_id": "",
          "_type": {
            "_id": "id-repositories",
            "collection": false,
            "name": "sunIdentityRepositoryService"
          },
          "location": "/first",
          "nextDescendents": [
            {
              "_id": "embedded",
              "_type": {
                "_id": "LDAPv3ForOpenDS",
                "collection": true,
                "name": "OpenDJ"
              },
              "authentication": {
                "sun-idrepo-ldapv3-config-auth-naming-attr": "uid"
              },
              "cachecontrol": {
                "sun-idrepo-ldapv3-dncache-enabled": true,
                "sun-idrepo-ldapv3-dncache-size": 1500
              },
              "errorhandling": {
                "com.iplanet.am.ldap.connection.delay.between.retries": 1000
              },
              "groupconfig": {
                "sun-idrepo-ldapv3-config-group-attributes": [
                  "dn",
                  "cn",
                  "uniqueMember",
                  "objectclass"
                ],
                "sun-idrepo-ldapv3-config-group-container-name": "ou",
                "sun-idrepo-ldapv3-config-group-container-value": "groups",
                "sun-idrepo-ldapv3-config-group-objectclass": [
                  "top",
                  "groupofuniquenames"
                ],
                "sun-idrepo-ldapv3-config-groups-search-attribute": "cn",
                "sun-idrepo-ldapv3-config-groups-search-filter": "(objectclass=groupOfUniqueNames)",
                "sun-idrepo-ldapv3-config-memberurl": "memberUrl",
                "sun-idrepo-ldapv3-config-uniquemember": "uniqueMember"
              },
              "ldapsettings": {
                "openam-idrepo-ldapv3-affinity-level": "all",
                "openam-idrepo-ldapv3-behera-support-enabled": true,
                "openam-idrepo-ldapv3-contains-iot-identities-enriched-as-oauth2client": false,
                "openam-idrepo-ldapv3-heartbeat-interval": 10,
                "openam-idrepo-ldapv3-heartbeat-timeunit": "SECONDS",
                "openam-idrepo-ldapv3-keepalive-searchfilter": "(objectclass=*)",
                "openam-idrepo-ldapv3-mtls-enabled": false,
                "openam-idrepo-ldapv3-proxied-auth-denied-fallback": false,
                "openam-idrepo-ldapv3-proxied-auth-enabled": false,
                "sun-idrepo-ldapv3-config-authid": "cn=Directory Manager",
                "sun-idrepo-ldapv3-config-authpw": null,
                "sun-idrepo-ldapv3-config-connection-mode": "LDAPS",
                "sun-idrepo-ldapv3-config-connection_pool_max_size": 10,
                "sun-idrepo-ldapv3-config-connection_pool_min_size": 1,
                "sun-idrepo-ldapv3-config-ldap-server": [
                  "localhost:50636",
                  "localhost:50636|01"
                ],
                "sun-idrepo-ldapv3-config-max-result": 1000,
                "sun-idrepo-ldapv3-config-organization_name": "dc=openam,dc=forgerock,dc=org",
                "sun-idrepo-ldapv3-config-search-scope": "SCOPE_SUB",
                "sun-idrepo-ldapv3-config-time-limit": 10,
                "sun-idrepo-ldapv3-config-trust-all-server-certificates": false
              },
              "persistentsearch": {
                "sun-idrepo-ldapv3-config-psearch-filter": "(&(!(objectclass=frCoreToken))(!(ou:dn:=services))(!(ou:dn:=tokens)))",
                "sun-idrepo-ldapv3-config-psearch-scope": "SCOPE_SUB",
                "sun-idrepo-ldapv3-config-psearchbase": "dc=openam,dc=forgerock,dc=org"
              },
              "pluginconfig": {
                "sunIdRepoAttributeMapping": [],
                "sunIdRepoClass": "org.forgerock.openam.idrepo.ldap.DJLDAPv3Repo",
                "sunIdRepoSupportedOperations": [
                  "realm=read,create,edit,delete,service",
                  "user=read,create,edit,delete,service",
                  "group=read,create,edit,delete"
                ]
              },
              "userconfig": {
                "sun-idrepo-ldapv3-config-active": "Active",
                "sun-idrepo-ldapv3-config-auth-kba-attempts-attr": [
                  "kbaInfoAttempts"
                ],
                "sun-idrepo-ldapv3-config-auth-kba-attr": [
                  "kbaInfo"
                ],
                "sun-idrepo-ldapv3-config-auth-kba-index-attr": "kbaActiveIndex",
                "sun-idrepo-ldapv3-config-createuser-attr-mapping": [
                  "cn",
                  "sn"
                ],
                "sun-idrepo-ldapv3-config-inactive": "Inactive",
                "sun-idrepo-ldapv3-config-isactive": "inetuserstatus",
                "sun-idrepo-ldapv3-config-people-container-name": "ou",
                "sun-idrepo-ldapv3-config-people-container-value": "people",
                "sun-idrepo-ldapv3-config-user-attributes": [
                  "iplanet-am-auth-configuration",
                  "iplanet-am-user-alias-list",
                  "iplanet-am-user-password-reset-question-answer",
                  "mail",
                  "assignedDashboard",
                  "authorityRevocationList",
                  "dn",
                  "iplanet-am-user-password-reset-options",
                  "employeeNumber",
                  "createTimestamp",
                  "kbaActiveIndex",
                  "caCertificate",
                  "iplanet-am-session-quota-limit",
                  "iplanet-am-user-auth-config",
                  "sun-fm-saml2-nameid-infokey",
                  "sunIdentityMSISDNNumber",
                  "iplanet-am-user-password-reset-force-reset",
                  "sunAMAuthInvalidAttemptsData",
                  "devicePrintProfiles",
                  "givenName",
                  "iplanet-am-session-get-valid-sessions",
                  "objectClass",
                  "adminRole",
                  "inetUserHttpURL",
                  "lastEmailSent",
                  "iplanet-am-user-account-life",
                  "postalAddress",
                  "userCertificate",
                  "preferredtimezone",
                  "iplanet-am-user-admin-start-dn",
                  "boundDevices",
                  "oath2faEnabled",
                  "preferredlanguage",
                  "sun-fm-saml2-nameid-info",
                  "userPassword",
                  "iplanet-am-session-service-status",
                  "telephoneNumber",
                  "iplanet-am-session-max-idle-time",
                  "distinguishedName",
                  "iplanet-am-session-destroy-sessions",
                  "kbaInfoAttempts",
                  "modifyTimestamp",
                  "uid",
                  "iplanet-am-user-success-url",
                  "iplanet-am-user-auth-modules",
                  "kbaInfo",
                  "memberOf",
                  "sn",
                  "preferredLocale",
                  "manager",
                  "iplanet-am-session-max-session-time",
                  "deviceProfiles",
                  "cn",
                  "oathDeviceProfiles",
                  "webauthnDeviceProfiles",
                  "iplanet-am-user-login-status",
                  "pushDeviceProfiles",
                  "push2faEnabled",
                  "inetUserStatus",
                  "retryLimitNodeCount",
                  "iplanet-am-user-failure-url",
                  "iplanet-am-session-max-caching-time"
                ],
                "sun-idrepo-ldapv3-config-user-objectclass": [
                  "iplanet-am-managed-person",
                  "inetuser",
                  "sunFMSAML2NameIdentifier",
                  "inetorgperson",
                  "devicePrintProfilesContainer",
                  "boundDevicesContainer",
                  "iplanet-am-user-service",
                  "iPlanetPreferences",
                  "pushDeviceProfilesContainer",
                  "forgerock-am-dashboard-service",
                  "organizationalperson",
                  "top",
                  "kbaInfoContainer",
                  "person",
                  "sunAMAuthAccountLockout",
                  "oathDeviceProfilesContainer",
                  "webauthnDeviceProfilesContainer",
                  "iplanet-am-auth-configuration-service",
                  "deviceProfilesContainer"
                ],
                "sun-idrepo-ldapv3-config-users-search-attribute": "uid",
                "sun-idrepo-ldapv3-config-users-search-filter": "(objectclass=inetorgperson)"
              }
            }
          ],
          "sunIdRepoAttributeCombiner": "com.iplanet.am.sdk.AttributeCombiner",
          "sunIdRepoAttributeValidator": [
            "class=com.sun.identity.idm.server.IdRepoAttributeValidatorImpl",
            "minimumPasswordLength=8",
            "usernameInvalidChars=*|(|)|&|!"
          ]
        },
        "oauth-oidc": {
          "_id": "",
          "_type": {
            "_id": "oauth-oidc",
            "collection": false,
            "name": "OAuth2 Provider"
          },
          "advancedOAuth2Config": {
            "allowClientCredentialsInTokenRequestQueryParameters": false,
            "allowedAudienceValues": [],
            "authenticationAttributes": [
              "uid"
            ],
            "codeVerifierEnforced": "false",
            "defaultScopes": [],
            "displayNameAttribute": "cn",
            "expClaimRequiredInRequestObject": false,
            "grantTypes": [
              "implicit",
              "urn:ietf:params:oauth:grant-type:saml2-bearer",
              "refresh_token",
              "password",
              "client_credentials",
              "urn:ietf:params:oauth:grant-type:device_code",
              "authorization_code",
              "urn:openid:params:grant-type:ciba",
              "urn:ietf:params:oauth:grant-type:uma-ticket",
              "urn:ietf:params:oauth:grant-type:token-exchange",
              "urn:ietf:params:oauth:grant-type:jwt-bearer"
            ],
            "hashSalt": "changeme",
            "includeSubnameInTokenClaims": true,
            "macaroonTokenFormat": "V2",
            "maxAgeOfRequestObjectNbfClaim": 0,
            "maxDifferenceBetweenRequestObjectNbfAndExp": 0,
            "moduleMessageEnabledInPasswordGrant": false,
            "nbfClaimRequiredInRequestObject": false,
            "parRequestUriLifetime": 90,
            "passwordGrantAuthService": "[Empty]",
            "persistentClaims": [],
            "refreshTokenGracePeriod": 0,
            "requestObjectProcessing": "OIDC",
            "requirePushedAuthorizationRequests": false,
            "responseTypeClasses": [
              "code|org.forgerock.oauth2.core.AuthorizationCodeResponseTypeHandler",
              "id_token|org.forgerock.openidconnect.IdTokenResponseTypeHandler",
              "token|org.forgerock.oauth2.core.TokenResponseTypeHandler"
            ],
            "supportedScopes": [],
            "supportedSubjectTypes": [
              "public",
              "pairwise"
            ],
            "tlsCertificateBoundAccessTokensEnabled": true,
            "tlsCertificateRevocationCheckingEnabled": false,
            "tlsClientCertificateHeaderFormat": "URLENCODED_PEM",
            "tokenCompressionEnabled": false,
            "tokenEncryptionEnabled": false,
            "tokenExchangeClasses": [
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToAccessTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToAccessTokenExchanger"
            ],
            "tokenSigningAlgorithm": "HS256",
            "tokenValidatorClasses": [
              "urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.OidcIdTokenValidator",
              "urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.OAuth2AccessTokenValidator"
            ]
          },
          "advancedOIDCConfig": {
            "alwaysAddClaimsToToken": false,
            "amrMappings": {},
            "authorisedIdmDelegationClients": [],
            "authorisedOpenIdConnectSSOClients": [],
            "claimsParameterSupported": false,
            "defaultACR": [],
            "idTokenInfoClientAuthenticationEnabled": true,
            "includeAllKtyAlgCombinationsInJwksUri": false,
            "loaMapping": {},
            "storeOpsTokens": true,
            "supportedAuthorizationResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedAuthorizationResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedAuthorizationResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRequestParameterEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRequestParameterEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRequestParameterSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenEndpointAuthenticationSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenIntrospectionResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedTokenIntrospectionResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedTokenIntrospectionResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedUserInfoEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedUserInfoEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedUserInfoSigningAlgorithms": [
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512"
            ],
            "useForceAuthnForMaxAge": false,
            "useForceAuthnForPromptLogin": false
          },
          "cibaConfig": {
            "cibaAuthReqIdLifetime": 600,
            "cibaMinimumPollingInterval": 2,
            "supportedCibaSigningAlgorithms": [
              "ES256",
              "PS256"
            ]
          },
          "clientDynamicRegistrationConfig": {
            "allowDynamicRegistration": false,
            "dynamicClientRegistrationScope": "dynamic_client_registration",
            "dynamicClientRegistrationSoftwareStatementRequired": false,
            "generateRegistrationAccessTokens": true,
            "requiredSoftwareStatementAttestedAttributes": [
              "redirect_uris"
            ]
          },
          "consent": {
            "clientsCanSkipConsent": false,
            "enableRemoteConsent": false,
            "supportedRcsRequestEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsRequestEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsRequestSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRcsResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsResponseEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsResponseSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "coreOAuth2Config": {
            "accessTokenLifetime": 3600,
            "accessTokenMayActScript": "[Empty]",
            "codeLifetime": 120,
            "issueRefreshToken": true,
            "issueRefreshTokenOnRefreshedToken": true,
            "macaroonTokensEnabled": false,
            "oidcMayActScript": "[Empty]",
            "refreshTokenLifetime": 604800,
            "scopesPolicySet": "oauth2Scopes",
            "statelessTokensEnabled": false,
            "usePolicyEngineForScope": false
          },
          "coreOIDCConfig": {
            "jwtTokenLifetime": 3600,
            "oidcDiscoveryEndpointEnabled": false,
            "overrideableOIDCClaims": [],
            "supportedClaims": [],
            "supportedIDTokenEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedIDTokenEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedIDTokenSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "deviceCodeConfig": {
            "deviceCodeLifetime": 300,
            "devicePollInterval": 5,
            "deviceUserCodeCharacterSet": "234567ACDEFGHJKLMNPQRSTWXYZabcdefhijkmnopqrstwxyz",
            "deviceUserCodeLength": 8
          },
          "location": "/first",
          "nextDescendents": [],
          "pluginsConfig": {
            "accessTokenEnricherClass": "org.forgerock.oauth2.core.plugins.registry.DefaultAccessTokenEnricher",
            "accessTokenModificationPluginType": "SCRIPTED",
            "accessTokenModificationScript": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
            "authorizeEndpointDataProviderClass": "org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider",
            "authorizeEndpointDataProviderPluginType": "JAVA",
            "authorizeEndpointDataProviderScript": "3f93ef6e-e54a-4393-aba1-f322656db28a",
            "evaluateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator",
            "evaluateScopePluginType": "JAVA",
            "evaluateScopeScript": "da56fe60-8b38-4c46-a405-d6b306d4b336",
            "oidcClaimsPluginType": "SCRIPTED",
            "oidcClaimsScript": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
            "userCodeGeneratorClass": "org.forgerock.oauth2.core.plugins.registry.DefaultUserCodeGenerator",
            "validateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator",
            "validateScopePluginType": "JAVA",
            "validateScopeScript": "25e6c06d-cf70-473b-bd28-26931edc476b"
          }
        },
        "policyconfiguration": {
          "_id": "",
          "_type": {
            "_id": "policyconfiguration",
            "collection": false,
            "name": "Policy Configuration"
          },
          "bindDn": "cn=Directory Manager",
          "bindPassword": null,
          "checkIfResourceTypeExists": true,
          "connectionPoolMaximumSize": 10,
          "connectionPoolMinimumSize": 1,
          "ldapServer": [
            "localhost:50636"
          ],
          "location": "/first",
          "maximumSearchResults": 100,
          "mtlsEnabled": false,
          "nextDescendents": [],
          "policyHeartbeatInterval": 10,
          "policyHeartbeatTimeUnit": "SECONDS",
          "realmSearchFilter": "(objectclass=sunismanagedorganization)",
          "searchTimeout": 5,
          "sslEnabled": true,
          "subjectsResultTTL": 10,
          "userAliasEnabled": false,
          "usersBaseDn": "dc=openam,dc=forgerock,dc=org",
          "usersSearchAttribute": "uid",
          "usersSearchFilter": "(objectclass=inetorgperson)",
          "usersSearchScope": "SCOPE_SUB"
        }
      },
      "subjectAttributes": {
        "undefined": "iplanet-am-user-login-status"
      },
      "subjectTypes": {
        "AND": {
          "_id": "AND",
          "config": {
            "properties": {
              "subjects": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "AND"
        },
        "AuthenticatedUsers": {
          "_id": "AuthenticatedUsers",
          "config": {
            "properties": {},
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticatedUsers"
        },
        "Identity": {
          "_id": "Identity",
          "config": {
            "properties": {
              "subjectValues": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Identity"
        },
        "JwtClaim": {
          "_id": "JwtClaim",
          "config": {
            "properties": {
              "claimName": {
                "type": "string"
              },
              "claimValue": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "JwtClaim"
        },
        "NONE": {
          "_id": "NONE",
          "config": {
            "properties": {},
            "type": "object"
          },
          "logical": false,
          "title": "NONE"
        },
        "NOT": {
          "_id": "NOT",
          "config": {
            "properties": {
              "subject": {
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "NOT"
        },
        "OR": {
          "_id": "OR",
          "config": {
            "properties": {
              "subjects": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "OR"
        },
        "Policy": {
          "_id": "Policy",
          "config": {
            "properties": {
              "className": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Policy"
        }
      },
      "trees": {
        "Agent": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "a87ff679-a2f3-371d-9181-a67b7542122c": {
              "_id": "a87ff679-a2f3-371d-9181-a67b7542122c",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "AgentDataStoreDecisionNode",
                "collection": true,
                "name": "Agent Data Store Decision"
              }
            },
            "e4da3b7f-bbce-3345-9777-2b0674a318d5": {
              "_id": "e4da3b7f-bbce-3345-9777-2b0674a318d5",
              "_outcomes": [
                {
                  "displayName": "Has Credentials",
                  "id": "true"
                },
                {
                  "displayName": "No Credentials",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "ZeroPageLoginNode",
                "collection": true,
                "name": "Zero Page Login Collector"
              },
              "allowWithoutReferer": true,
              "passwordHeader": "X-OpenAM-Password",
              "referrerWhiteList": [],
              "usernameHeader": "X-OpenAM-Username"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Agent",
            "description": "null",
            "enabled": true,
            "entryNodeId": "e4da3b7f-bbce-3345-9777-2b0674a318d5",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "a87ff679-a2f3-371d-9181-a67b7542122c": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Agent Data Store Decision",
                "nodeType": "AgentDataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "e4da3b7f-bbce-3345-9777-2b0674a318d5": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "a87ff679-a2f3-371d-9181-a67b7542122c"
                },
                "displayName": "Zero Page Login Collector",
                "nodeType": "ZeroPageLoginNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Example": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "c4ca4238-a0b9-3382-8dcc-509a6f75849b": {
              "_id": "c4ca4238-a0b9-3382-8dcc-509a6f75849b",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c81e728d-9d4c-3f63-af06-7f89cc14862c": {
              "_id": "c81e728d-9d4c-3f63-af06-7f89cc14862c",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "cfcd2084-95d5-35ef-a6e7-dff9f98764da": {
              "_id": "cfcd2084-95d5-35ef-a6e7-dff9f98764da",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3": {
              "_id": "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3",
              "_outcomes": [
                {
                  "displayName": "Has Credentials",
                  "id": "true"
                },
                {
                  "displayName": "No Credentials",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "ZeroPageLoginNode",
                "collection": true,
                "name": "Zero Page Login Collector"
              },
              "allowWithoutReferer": true,
              "passwordHeader": "X-OpenAM-Password",
              "referrerWhiteList": [],
              "usernameHeader": "X-OpenAM-Username"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Example",
            "description": "null",
            "enabled": true,
            "entryNodeId": "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "c4ca4238-a0b9-3382-8dcc-509a6f75849b": {
                "connections": {
                  "outcome": "c81e728d-9d4c-3f63-af06-7f89cc14862c"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c81e728d-9d4c-3f63-af06-7f89cc14862c": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "cfcd2084-95d5-35ef-a6e7-dff9f98764da": {
                "connections": {
                  "outcome": "c4ca4238-a0b9-3382-8dcc-509a6f75849b"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3": {
                "connections": {
                  "false": "cfcd2084-95d5-35ef-a6e7-dff9f98764da",
                  "true": "c81e728d-9d4c-3f63-af06-7f89cc14862c"
                },
                "displayName": "Zero Page Login Collector",
                "nodeType": "ZeroPageLoginNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Facebook-ProvisionIDMAccount": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "37693cfc-7480-39e4-9d87-b8c7d8b9aacd": {
              "_id": "37693cfc-7480-39e4-9d87-b8c7d8b9aacd",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialFacebookNode",
                "collection": true,
                "name": "Social Facebook"
              },
              "authenticationIdKey": "id",
              "authorizeEndpoint": "https://www.facebook.com/dialog/oauth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|facebook-",
              "cfgAccountMapperConfiguration": {
                "id": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|facebook-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "first_name": "givenName",
                "id": "iplanet-am-user-alias-list",
                "last_name": "sn",
                "name": "cn"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "facebook",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "public_profile,email",
              "tokenEndpoint": "https://graph.facebook.com/v2.12/oauth/access_token",
              "userInfoEndpoint": "https://graph.facebook.com/v2.6/me?fields=name%2Cemail%2Cfirst_name%2Clast_name"
            },
            "b6d767d2-f8ed-3d21-a44b-0e5886680cb9": {
              "_id": "b6d767d2-f8ed-3d21-a44b-0e5886680cb9",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ProvisionIdmAccountNode",
                "collection": true,
                "name": "Provision IDM Account"
              },
              "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Facebook-ProvisionIDMAccount",
            "description": "null",
            "enabled": true,
            "entryNodeId": "37693cfc-7480-39e4-9d87-b8c7d8b9aacd",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "37693cfc-7480-39e4-9d87-b8c7d8b9aacd": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "b6d767d2-f8ed-3d21-a44b-0e5886680cb9"
                },
                "displayName": "Facebook Social Authentication",
                "nodeType": "SocialFacebookNode",
                "x": 0,
                "y": 0
              },
              "b6d767d2-f8ed-3d21-a44b-0e5886680cb9": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Provision IDM Account",
                "nodeType": "ProvisionIdmAccountNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Google-AnonymousUser": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1ff1de77-4005-38da-93f4-2943881c655f": {
              "_id": "1ff1de77-4005-38da-93f4-2943881c655f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SetSuccessUrlNode",
                "collection": true,
                "name": "Success URL"
              },
              "successUrl": "https://www.forgerock.com/"
            },
            "4e732ced-3463-306d-a0ca-9a15b6153677": {
              "_id": "4e732ced-3463-306d-a0ca-9a15b6153677",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialGoogleNode",
                "collection": true,
                "name": "Social Google"
              },
              "authenticationIdKey": "sub",
              "authorizeEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|google-",
              "cfgAccountMapperConfiguration": {
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|google-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "family_name": "sn",
                "given_name": "givenName",
                "name": "cn",
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "google",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "profile email",
              "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
              "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo"
            },
            "8e296a06-7a37-3633-b0de-d05f5a3bf3ec": {
              "_id": "8e296a06-7a37-3633-b0de-d05f5a3bf3ec",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AnonymousUserNode",
                "collection": true,
                "name": "Anonymous User Mapping"
              },
              "anonymousUserName": "anonymous"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Google-AnonymousUser",
            "description": "null",
            "enabled": true,
            "entryNodeId": "4e732ced-3463-306d-a0ca-9a15b6153677",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1ff1de77-4005-38da-93f4-2943881c655f": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Set Success URL",
                "nodeType": "SetSuccessUrlNode",
                "x": 0,
                "y": 0
              },
              "4e732ced-3463-306d-a0ca-9a15b6153677": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "8e296a06-7a37-3633-b0de-d05f5a3bf3ec"
                },
                "displayName": "Google Social Authentication",
                "nodeType": "SocialGoogleNode",
                "x": 0,
                "y": 0
              },
              "8e296a06-7a37-3633-b0de-d05f5a3bf3ec": {
                "connections": {
                  "outcome": "1ff1de77-4005-38da-93f4-2943881c655f"
                },
                "displayName": "Map to Anonymous User",
                "nodeType": "AnonymousUserNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Google-DynamicAccountCreation": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0": {
              "_id": "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ProvisionDynamicAccountNode",
                "collection": true,
                "name": "Provision Dynamic Account"
              },
              "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider"
            },
            "182be0c5-cdcd-3072-bb18-64cdee4d3d6e": {
              "_id": "182be0c5-cdcd-3072-bb18-64cdee4d3d6e",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "CreatePasswordNode",
                "collection": true,
                "name": "Create Password"
              },
              "minPasswordLength": 0
            },
            "33e75ff0-9dd6-31bb-a69f-351039152189": {
              "_id": "33e75ff0-9dd6-31bb-a69f-351039152189",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialGoogleNode",
                "collection": true,
                "name": "Social Google"
              },
              "authenticationIdKey": "sub",
              "authorizeEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|google-",
              "cfgAccountMapperConfiguration": {
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|google-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "family_name": "sn",
                "given_name": "givenName",
                "name": "cn",
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "google",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "profile email",
              "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
              "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo"
            },
            "34173cb3-8f07-389d-9beb-c2ac9128303f": {
              "_id": "34173cb3-8f07-389d-9beb-c2ac9128303f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordSmtpSenderNode",
                "collection": true,
                "name": "OTP Email Sender"
              },
              "emailAttribute": "mail",
              "emailContent": {
                "en": "Here is your One Time Password: '{{OTP}}'.</p><p>If you did not request this, please contact support."
              },
              "emailSubject": {
                "en": "Your One Time Password"
              },
              "fromEmailAddress": "admin@example.com",
              "hostName": "mail.example.com",
              "hostPort": 25,
              "password": null,
              "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
              "sslOption": "SSL",
              "username": "admin@example.com"
            },
            "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01": {
              "_id": "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01",
              "_outcomes": [
                {
                  "displayName": "Retry",
                  "id": "Retry"
                },
                {
                  "displayName": "Reject",
                  "id": "Reject"
                }
              ],
              "_type": {
                "_id": "RetryLimitDecisionNode",
                "collection": true,
                "name": "Retry Limit Decision"
              },
              "incrementUserAttributeOnFailure": true,
              "retryLimit": 3
            },
            "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b": {
              "_id": "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordGeneratorNode",
                "collection": true,
                "name": "HOTP Generator"
              },
              "length": 8
            },
            "c16a5320-fa47-3530-9958-3c34fd356ef5": {
              "_id": "c16a5320-fa47-3530-9958-3c34fd356ef5",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordCollectorDecisionNode",
                "collection": true,
                "name": "OTP Collector Decision"
              },
              "passwordExpiryTime": 5
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Google-DynamicAccountCreation",
            "description": "null",
            "enabled": true,
            "entryNodeId": "33e75ff0-9dd6-31bb-a69f-351039152189",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Provision Dynamic Account",
                "nodeType": "ProvisionDynamicAccountNode",
                "x": 0,
                "y": 0
              },
              "182be0c5-cdcd-3072-bb18-64cdee4d3d6e": {
                "connections": {
                  "outcome": "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0"
                },
                "displayName": "Create Password",
                "nodeType": "CreatePasswordNode",
                "x": 0,
                "y": 0
              },
              "33e75ff0-9dd6-31bb-a69f-351039152189": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b"
                },
                "displayName": "Google Social Authentication",
                "nodeType": "SocialGoogleNode",
                "x": 0,
                "y": 0
              },
              "34173cb3-8f07-389d-9beb-c2ac9128303f": {
                "connections": {
                  "outcome": "c16a5320-fa47-3530-9958-3c34fd356ef5"
                },
                "displayName": "OTP Email Sender",
                "nodeType": "OneTimePasswordSmtpSenderNode",
                "x": 0,
                "y": 0
              },
              "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01": {
                "connections": {
                  "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "Retry": "c16a5320-fa47-3530-9958-3c34fd356ef5"
                },
                "displayName": "Retry Limit Decision",
                "nodeType": "RetryLimitDecisionNode",
                "x": 0,
                "y": 0
              },
              "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b": {
                "connections": {
                  "outcome": "34173cb3-8f07-389d-9beb-c2ac9128303f"
                },
                "displayName": "HOTP Generator",
                "nodeType": "OneTimePasswordGeneratorNode",
                "x": 0,
                "y": 0
              },
              "c16a5320-fa47-3530-9958-3c34fd356ef5": {
                "connections": {
                  "false": "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01",
                  "true": "182be0c5-cdcd-3072-bb18-64cdee4d3d6e"
                },
                "displayName": "OTP Collector Decision",
                "nodeType": "OneTimePasswordCollectorDecisionNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "HmacOneTimePassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1f0e3dad-9990-3345-b743-9f8ffabdffc4": {
              "_id": "1f0e3dad-9990-3345-b743-9f8ffabdffc4",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordGeneratorNode",
                "collection": true,
                "name": "HOTP Generator"
              },
              "length": 8
            },
            "3c59dc04-8e88-3024-bbe8-079a5c74d079": {
              "_id": "3c59dc04-8e88-3024-bbe8-079a5c74d079",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordCollectorDecisionNode",
                "collection": true,
                "name": "OTP Collector Decision"
              },
              "passwordExpiryTime": 5
            },
            "6f4922f4-5568-361a-8cdf-4ad2299f6d23": {
              "_id": "6f4922f4-5568-361a-8cdf-4ad2299f6d23",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "70efdf2e-c9b0-3607-9795-c442636b55fb": {
              "_id": "70efdf2e-c9b0-3607-9795-c442636b55fb",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "98f13708-2101-34c4-b568-7be6106a3b84": {
              "_id": "98f13708-2101-34c4-b568-7be6106a3b84",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordSmtpSenderNode",
                "collection": true,
                "name": "OTP Email Sender"
              },
              "emailAttribute": "mail",
              "emailContent": {
                "en": "Here is your One Time Password: '{{OTP}}'.</p><p>If you did not request this, please contact support."
              },
              "emailSubject": {
                "en": "Your One Time Password"
              },
              "fromEmailAddress": "admin@example.com",
              "hostName": "mail.example.com",
              "hostPort": 25,
              "password": null,
              "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
              "sslOption": "SSL",
              "username": "admin@example.com"
            },
            "c74d97b0-1eae-357e-84aa-9d5bade97baf": {
              "_id": "c74d97b0-1eae-357e-84aa-9d5bade97baf",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "HmacOneTimePassword",
            "description": "null",
            "enabled": true,
            "entryNodeId": "c74d97b0-1eae-357e-84aa-9d5bade97baf",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1f0e3dad-9990-3345-b743-9f8ffabdffc4": {
                "connections": {
                  "outcome": "98f13708-2101-34c4-b568-7be6106a3b84"
                },
                "displayName": "HOTP Generator",
                "nodeType": "OneTimePasswordGeneratorNode",
                "x": 0,
                "y": 0
              },
              "3c59dc04-8e88-3024-bbe8-079a5c74d079": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "OTP Collector Decision",
                "nodeType": "OneTimePasswordCollectorDecisionNode",
                "x": 0,
                "y": 0
              },
              "6f4922f4-5568-361a-8cdf-4ad2299f6d23": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "1f0e3dad-9990-3345-b743-9f8ffabdffc4"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "70efdf2e-c9b0-3607-9795-c442636b55fb": {
                "connections": {
                  "outcome": "6f4922f4-5568-361a-8cdf-4ad2299f6d23"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "98f13708-2101-34c4-b568-7be6106a3b84": {
                "connections": {
                  "outcome": "3c59dc04-8e88-3024-bbe8-079a5c74d079"
                },
                "displayName": "OTP Email Sender",
                "nodeType": "OneTimePasswordSmtpSenderNode",
                "x": 0,
                "y": 0
              },
              "c74d97b0-1eae-357e-84aa-9d5bade97baf": {
                "connections": {
                  "outcome": "70efdf2e-c9b0-3607-9795-c442636b55fb"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PersistentCookie": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "6512bd43-d9ca-36e0-ac99-0b0a82652dca": {
              "_id": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3": {
              "_id": "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SetPersistentCookieNode",
                "collection": true,
                "name": "Set Persistent Cookie"
              },
              "hmacSigningKey": null,
              "idleTimeout": 5,
              "maxLife": 5,
              "persistentCookieName": "session-jwt",
              "useHttpOnlyCookie": true,
              "useSecureCookie": false
            },
            "aab32389-22bc-325a-af60-6eb525ffdc56": {
              "_id": "aab32389-22bc-325a-af60-6eb525ffdc56",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "PersistentCookieDecisionNode",
                "collection": true,
                "name": "Persistent Cookie Decision"
              },
              "enforceClientIp": false,
              "hmacSigningKey": null,
              "idleTimeout": 5,
              "persistentCookieName": "session-jwt",
              "useHttpOnlyCookie": true,
              "useSecureCookie": false
            },
            "c20ad4d7-6fe9-3759-aa27-a0c99bff6710": {
              "_id": "c20ad4d7-6fe9-3759-aa27-a0c99bff6710",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c51ce410-c124-310e-8db5-e4b97fc2af39": {
              "_id": "c51ce410-c124-310e-8db5-e4b97fc2af39",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PersistentCookie",
            "description": "null",
            "enabled": true,
            "entryNodeId": "aab32389-22bc-325a-af60-6eb525ffdc56",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "6512bd43-d9ca-36e0-ac99-0b0a82652dca": {
                "connections": {
                  "outcome": "c20ad4d7-6fe9-3759-aa27-a0c99bff6710"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Set Persistent Cookie",
                "nodeType": "SetPersistentCookieNode",
                "x": 0,
                "y": 0
              },
              "aab32389-22bc-325a-af60-6eb525ffdc56": {
                "connections": {
                  "false": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Persistent Cookie Decision",
                "nodeType": "PersistentCookieDecisionNode",
                "x": 0,
                "y": 0
              },
              "c20ad4d7-6fe9-3759-aa27-a0c99bff6710": {
                "connections": {
                  "outcome": "c51ce410-c124-310e-8db5-e4b97fc2af39"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c51ce410-c124-310e-8db5-e4b97fc2af39": {
                "connections": {
                  "false": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
                  "true": "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformForgottenUsername": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "d82c8d16-19ad-3176-9665-453cfb2e55f0": {
              "_id": "d82c8d16-19ad-3176-9665-453cfb2e55f0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "mail"
              ],
              "identityAttribute": "mail",
              "required": true,
              "validateInputs": false
            }
          },
          "nodes": {
            "72b32a1f-754b-31c0-9b36-95e0cb6cde7f": {
              "_id": "72b32a1f-754b-31c0-9b36-95e0cb6cde7f",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "InnerTreeEvaluatorNode",
                "collection": true,
                "name": "Inner Tree Evaluator"
              },
              "tree": "PlatformLogin"
            },
            "9f61408e-3afb-333e-90cd-f1b20de6f466": {
              "_id": "9f61408e-3afb-333e-90cd-f1b20de6f466",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
              },
              "emailTemplateName": "forgottenUsername",
              "identityAttribute": "mail",
              "objectLookup": true
            },
            "a684ecee-e76f-3522-b732-86a895bc8436": {
              "_id": "a684ecee-e76f-3522-b732-86a895bc8436",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "d82c8d16-19ad-3176-9665-453cfb2e55f0",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {
                "en": "Enter your email address or <a href=\"#/service/PlatformLogin\">Sign in</a>"
              },
              "pageHeader": {
                "en": "Forgotten Username"
              },
              "stage": "null"
            },
            "b53b3a3d-6ab9-3ce0-a682-29151c9bde11": {
              "_id": "b53b3a3d-6ab9-3ce0-a682-29151c9bde11",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "IdentifyExistingUserNode",
                "collection": true,
                "name": "Identify Existing User"
              },
              "identityAttribute": "mail"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformForgottenUsername",
            "description": "Forgotten Username Tree",
            "enabled": true,
            "entryNodeId": "a684ecee-e76f-3522-b732-86a895bc8436",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "72b32a1f-754b-31c0-9b36-95e0cb6cde7f": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Inner Tree Evaluator",
                "nodeType": "InnerTreeEvaluatorNode",
                "x": 0,
                "y": 0
              },
              "9f61408e-3afb-333e-90cd-f1b20de6f466": {
                "connections": {
                  "outcome": "72b32a1f-754b-31c0-9b36-95e0cb6cde7f"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "a684ecee-e76f-3522-b732-86a895bc8436": {
                "connections": {
                  "outcome": "b53b3a3d-6ab9-3ce0-a682-29151c9bde11"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "b53b3a3d-6ab9-3ce0-a682-29151c9bde11": {
                "connections": {
                  "false": "9f61408e-3afb-333e-90cd-f1b20de6f466",
                  "true": "9f61408e-3afb-333e-90cd-f1b20de6f466"
                },
                "displayName": "Identify Existing User",
                "nodeType": "IdentifyExistingUserNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformLogin": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "642e92ef-b794-3173-8881-b53e1e1b18b6": {
              "_id": "642e92ef-b794-3173-8881-b53e1e1b18b6",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            },
            "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7": {
              "_id": "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            }
          },
          "nodes": {
            "2838023a-778d-3aec-9c21-2708f721b788": {
              "_id": "2838023a-778d-3aec-9c21-2708f721b788",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "IncrementLoginCountNode",
                "collection": true,
                "name": "Increment Login Count"
              },
              "identityAttribute": "userName"
            },
            "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8": {
              "_id": "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "InnerTreeEvaluatorNode",
                "collection": true,
                "name": "Inner Tree Evaluator"
              },
              "tree": "PlatformProgressiveProfile"
            },
            "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a": {
              "_id": "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "f457c545-a9de-388f-98ec-ee47145a72c0": {
              "_id": "f457c545-a9de-388f-98ec-ee47145a72c0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "642e92ef-b794-3173-8881-b53e1e1b18b6",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "New here? <a href=\"#/service/PlatformRegistration\">Create an account</a><br><a href=\"#/service/PlatformForgottenUsername\">Forgot username?</a><a href=\"#/service/PlatformResetPassword\"> Forgot password?</a>"
              },
              "pageHeader": {
                "en": "Sign In"
              },
              "stage": "null"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformLogin",
            "description": "Platform Login Tree",
            "enabled": true,
            "entryNodeId": "f457c545-a9de-388f-98ec-ee47145a72c0",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "2838023a-778d-3aec-9c21-2708f721b788": {
                "connections": {
                  "outcome": "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8"
                },
                "displayName": "Increment Login Count",
                "nodeType": "IncrementLoginCountNode",
                "x": 0,
                "y": 0
              },
              "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Inner Tree Evaluator",
                "nodeType": "InnerTreeEvaluatorNode",
                "x": 0,
                "y": 0
              },
              "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "2838023a-778d-3aec-9c21-2708f721b788"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "f457c545-a9de-388f-98ec-ee47145a72c0": {
                "connections": {
                  "outcome": "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformProgressiveProfile": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "f7177163-c833-3ff4-b38f-c8d2872f1ec6": {
              "_id": "f7177163-c833-3ff4-b38f-c8d2872f1ec6",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "preferences/updates",
                "preferences/marketing"
              ],
              "identityAttribute": "userName",
              "required": false,
              "validateInputs": false
            }
          },
          "nodes": {
            "17e62166-fc85-36df-a4d1-bc0e1742c08b": {
              "_id": "17e62166-fc85-36df-a4d1-bc0e1742c08b",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "QueryFilterDecisionNode",
                "collection": true,
                "name": "Query Filter Decision"
              },
              "identityAttribute": "userName",
              "queryFilter": "!(/preferences pr) or /preferences/marketing eq false or /preferences/updates eq false"
            },
            "6c8349cc-7260-3e62-a3b1-396831a8398f": {
              "_id": "6c8349cc-7260-3e62-a3b1-396831a8398f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "f7177163-c833-3ff4-b38f-c8d2872f1ec6",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {},
              "pageHeader": {
                "en": "Please select your preferences"
              },
              "stage": "null"
            },
            "a1d0c6e8-3f02-3327-9846-1063f4ac58a6": {
              "_id": "a1d0c6e8-3f02-3327-9846-1063f4ac58a6",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "LoginCountDecisionNode",
                "collection": true,
                "name": "Login Count Decision"
              },
              "amount": 3,
              "identityAttribute": "userName",
              "interval": "AT"
            },
            "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f": {
              "_id": "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "userName",
              "identityResource": "managed/user",
              "ignoredFields": [],
              "patchAsObject": false
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformProgressiveProfile",
            "description": "Prompt for missing preferences on 3rd login",
            "enabled": true,
            "entryNodeId": "a1d0c6e8-3f02-3327-9846-1063f4ac58a6",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "17e62166-fc85-36df-a4d1-bc0e1742c08b": {
                "connections": {
                  "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "true": "6c8349cc-7260-3e62-a3b1-396831a8398f"
                },
                "displayName": "Query Filter Decision",
                "nodeType": "QueryFilterDecisionNode",
                "x": 0,
                "y": 0
              },
              "6c8349cc-7260-3e62-a3b1-396831a8398f": {
                "connections": {
                  "outcome": "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "a1d0c6e8-3f02-3327-9846-1063f4ac58a6": {
                "connections": {
                  "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "true": "17e62166-fc85-36df-a4d1-bc0e1742c08b"
                },
                "displayName": "Login Count Decision",
                "nodeType": "LoginCountDecisionNode",
                "x": 0,
                "y": 0
              },
              "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformRegistration": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "19ca14e7-ea63-38a4-ae0e-b13d585e4c22": {
              "_id": "19ca14e7-ea63-38a4-ae0e-b13d585e4c22",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "givenName",
                "sn",
                "mail",
                "preferences/marketing",
                "preferences/updates"
              ],
              "identityAttribute": "userName",
              "required": true,
              "validateInputs": true
            },
            "1c383cd3-0b7c-398a-b502-93adfecb7b18": {
              "_id": "1c383cd3-0b7c-398a-b502-93adfecb7b18",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            },
            "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa": {
              "_id": "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AcceptTermsAndConditionsNode",
                "collection": true,
                "name": "Accept Terms and Conditions"
              }
            },
            "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d": {
              "_id": "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "KbaCreateNode",
                "collection": true,
                "name": "KBA Definition"
              },
              "allowUserDefinedQuestions": true,
              "message": {
                "en": "Select a security question"
              }
            },
            "e369853d-f766-3a44-a1ed-0ff613f563bd": {
              "_id": "e369853d-f766-3a44-a1ed-0ff613f563bd",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": true
            }
          },
          "nodes": {
            "3416a75f-4cea-3109-907c-acd8e2f2aefc": {
              "_id": "3416a75f-4cea-3109-907c-acd8e2f2aefc",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "IncrementLoginCountNode",
                "collection": true,
                "name": "Increment Login Count"
              },
              "identityAttribute": "userName"
            },
            "d645920e-395f-3dad-bbbb-ed0eca3fe2e0": {
              "_id": "d645920e-395f-3dad-bbbb-ed0eca3fe2e0",
              "_outcomes": [
                {
                  "displayName": "Created",
                  "id": "CREATED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "CreateObjectNode",
                "collection": true,
                "name": "Create Object"
              },
              "identityResource": "managed/user"
            },
            "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c": {
              "_id": "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "e369853d-f766-3a44-a1ed-0ff613f563bd",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "19ca14e7-ea63-38a4-ae0e-b13d585e4c22",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                },
                {
                  "_id": "1c383cd3-0b7c-398a-b502-93adfecb7b18",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                },
                {
                  "_id": "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d",
                  "displayName": "KBA Definition",
                  "nodeType": "KbaCreateNode"
                },
                {
                  "_id": "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa",
                  "displayName": "Accept Terms and Conditions",
                  "nodeType": "AcceptTermsAndConditionsNode"
                }
              ],
              "pageDescription": {
                "en": "Signing up is fast and easy.<br>Already have an account?<a href='#/service/PlatformLogin'>Sign In</a>"
              },
              "pageHeader": {
                "en": "Sign Up"
              },
              "stage": "null"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformRegistration",
            "description": "Platform Registration Tree",
            "enabled": true,
            "entryNodeId": "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "3416a75f-4cea-3109-907c-acd8e2f2aefc": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Increment Login Count",
                "nodeType": "IncrementLoginCountNode",
                "x": 0,
                "y": 0
              },
              "d645920e-395f-3dad-bbbb-ed0eca3fe2e0": {
                "connections": {
                  "CREATED": "3416a75f-4cea-3109-907c-acd8e2f2aefc",
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "Create Object",
                "nodeType": "CreateObjectNode",
                "x": 0,
                "y": 0
              },
              "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c": {
                "connections": {
                  "outcome": "d645920e-395f-3dad-bbbb-ed0eca3fe2e0"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformResetPassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "44f683a8-4163-3352-bafe-57c2e008bc8c": {
              "_id": "44f683a8-4163-3352-bafe-57c2e008bc8c",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            },
            "66f041e1-6a60-328b-85a7-e228a89c3799": {
              "_id": "66f041e1-6a60-328b-85a7-e228a89c3799",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "mail"
              ],
              "identityAttribute": "mail",
              "required": true,
              "validateInputs": false
            }
          },
          "nodes": {
            "03afdbd6-6e79-39b1-a5f8-597834fa83a4": {
              "_id": "03afdbd6-6e79-39b1-a5f8-597834fa83a4",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "44f683a8-4163-3352-bafe-57c2e008bc8c",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Change password"
              },
              "pageHeader": {
                "en": "Reset Password"
              },
              "stage": "null"
            },
            "072b030b-a126-32f4-b237-4f342be9ed44": {
              "_id": "072b030b-a126-32f4-b237-4f342be9ed44",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "IdentifyExistingUserNode",
                "collection": true,
                "name": "Identify Existing User"
              },
              "identifier": "userName",
              "identityAttribute": "mail"
            },
            "093f65e0-80a2-35f8-876b-1c5722a46aa2": {
              "_id": "093f65e0-80a2-35f8-876b-1c5722a46aa2",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "66f041e1-6a60-328b-85a7-e228a89c3799",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {
                "en": "Enter your email address or <a href=\"#/service/PlatformLogin\">Sign in</a>"
              },
              "pageHeader": {
                "en": "Reset Password"
              },
              "stage": "null"
            },
            "7f39f831-7fbd-3198-8ef4-c628eba02591": {
              "_id": "7f39f831-7fbd-3198-8ef4-c628eba02591",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
              },
              "emailTemplateName": "resetPassword",
              "identityAttribute": "mail",
              "objectLookup": true
            },
            "ea5d2f1c-4608-332e-87d3-aa3d998e5135": {
              "_id": "ea5d2f1c-4608-332e-87d3-aa3d998e5135",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "mail",
              "identityResource": "managed/user",
              "ignoredFields": [],
              "patchAsObject": false
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformResetPassword",
            "description": "Reset Password Tree",
            "enabled": true,
            "entryNodeId": "093f65e0-80a2-35f8-876b-1c5722a46aa2",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "03afdbd6-6e79-39b1-a5f8-597834fa83a4": {
                "connections": {
                  "outcome": "ea5d2f1c-4608-332e-87d3-aa3d998e5135"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "072b030b-a126-32f4-b237-4f342be9ed44": {
                "connections": {
                  "false": "7f39f831-7fbd-3198-8ef4-c628eba02591",
                  "true": "7f39f831-7fbd-3198-8ef4-c628eba02591"
                },
                "displayName": "Identify Existing User",
                "nodeType": "IdentifyExistingUserNode",
                "x": 0,
                "y": 0
              },
              "093f65e0-80a2-35f8-876b-1c5722a46aa2": {
                "connections": {
                  "outcome": "072b030b-a126-32f4-b237-4f342be9ed44"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "7f39f831-7fbd-3198-8ef4-c628eba02591": {
                "connections": {
                  "outcome": "03afdbd6-6e79-39b1-a5f8-597834fa83a4"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "ea5d2f1c-4608-332e-87d3-aa3d998e5135": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformUpdatePassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "735b90b4-5681-35ed-ac3f-678819b6e058": {
              "_id": "735b90b4-5681-35ed-ac3f-678819b6e058",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            },
            "7cbbc409-ec99-3f19-878c-75bd1e06f215": {
              "_id": "7cbbc409-ec99-3f19-878c-75bd1e06f215",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            }
          },
          "nodes": {
            "14bfa6bb-1487-3e45-bba0-28a21ed38046": {
              "_id": "14bfa6bb-1487-3e45-bba0-28a21ed38046",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1": {
              "_id": "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "AttributePresentDecisionNode",
                "collection": true,
                "name": "Attribute Present Decision"
              },
              "identityAttribute": "userName",
              "presentAttribute": "password"
            },
            "32bb90e8-976a-3b52-98d5-da10fe66f21d": {
              "_id": "32bb90e8-976a-3b52-98d5-da10fe66f21d",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to your address, please verify  your email address to update your password. Click the link in that email to proceed."
              },
              "emailTemplateName": "updatePassword",
              "identityAttribute": "userName",
              "objectLookup": true
            },
            "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db": {
              "_id": "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "735b90b4-5681-35ed-ac3f-678819b6e058",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Enter current password"
              },
              "pageHeader": {
                "en": "Verify Existing Password"
              },
              "stage": "null"
            },
            "d2ddea18-f006-35ce-8623-e36bd4e3c7c5": {
              "_id": "d2ddea18-f006-35ce-8623-e36bd4e3c7c5",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "userName",
              "identityResource": "managed/user",
              "ignoredFields": [
                "userName"
              ],
              "patchAsObject": true
            },
            "e2c420d9-28d4-3f8c-a0ff-2ec19b371514": {
              "_id": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "7cbbc409-ec99-3f19-878c-75bd1e06f215",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Enter new password"
              },
              "pageHeader": {
                "en": "Update Password"
              },
              "stage": "null"
            },
            "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb": {
              "_id": "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SessionDataNode",
                "collection": true,
                "name": "Get Session Data"
              },
              "sessionDataKey": "UserToken",
              "sharedStateKey": "userName"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformUpdatePassword",
            "description": "Update password using active session",
            "enabled": true,
            "entryNodeId": "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "14bfa6bb-1487-3e45-bba0-28a21ed38046": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1": {
                "connections": {
                  "false": "32bb90e8-976a-3b52-98d5-da10fe66f21d",
                  "true": "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db"
                },
                "displayName": "Attribute Present Decision",
                "nodeType": "AttributePresentDecisionNode",
                "x": 0,
                "y": 0
              },
              "32bb90e8-976a-3b52-98d5-da10fe66f21d": {
                "connections": {
                  "outcome": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db": {
                "connections": {
                  "outcome": "14bfa6bb-1487-3e45-bba0-28a21ed38046"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "d2ddea18-f006-35ce-8623-e36bd4e3c7c5": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              },
              "e2c420d9-28d4-3f8c-a0ff-2ec19b371514": {
                "connections": {
                  "outcome": "d2ddea18-f006-35ce-8623-e36bd4e3c7c5"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb": {
                "connections": {
                  "outcome": "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1"
                },
                "displayName": "Get Session Data",
                "nodeType": "SessionDataNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "RetryLimit": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1679091c-5a88-3faf-afb5-e6087eb1b2dc": {
              "_id": "1679091c-5a88-3faf-afb5-e6087eb1b2dc",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26": {
              "_id": "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26",
              "_outcomes": [
                {
                  "displayName": "Retry",
                  "id": "Retry"
                },
                {
                  "displayName": "Reject",
                  "id": "Reject"
                }
              ],
              "_type": {
                "_id": "RetryLimitDecisionNode",
                "collection": true,
                "name": "Retry Limit Decision"
              },
              "incrementUserAttributeOnFailure": true,
              "retryLimit": 3
            },
            "8f14e45f-ceea-367a-9a36-dedd4bea2543": {
              "_id": "8f14e45f-ceea-367a-9a36-dedd4bea2543",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c9f0f895-fb98-3b91-99f5-1fd0297e236d": {
              "_id": "c9f0f895-fb98-3b91-99f5-1fd0297e236d",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "d3d94468-02a4-3259-b55d-38e6d163e820": {
              "_id": "d3d94468-02a4-3259-b55d-38e6d163e820",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AccountLockoutNode",
                "collection": true,
                "name": "Account Lockout"
              },
              "lockAction": "LOCK"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "RetryLimit",
            "description": "null",
            "enabled": true,
            "entryNodeId": "1679091c-5a88-3faf-afb5-e6087eb1b2dc",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1679091c-5a88-3faf-afb5-e6087eb1b2dc": {
                "connections": {
                  "outcome": "8f14e45f-ceea-367a-9a36-dedd4bea2543"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26": {
                "connections": {
                  "Reject": "d3d94468-02a4-3259-b55d-38e6d163e820",
                  "Retry": "1679091c-5a88-3faf-afb5-e6087eb1b2dc"
                },
                "displayName": "Retry Limit Decision",
                "nodeType": "RetryLimitDecisionNode",
                "x": 0,
                "y": 0
              },
              "8f14e45f-ceea-367a-9a36-dedd4bea2543": {
                "connections": {
                  "outcome": "c9f0f895-fb98-3b91-99f5-1fd0297e236d"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c9f0f895-fb98-3b91-99f5-1fd0297e236d": {
                "connections": {
                  "false": "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "d3d94468-02a4-3259-b55d-38e6d163e820": {
                "connections": {
                  "outcome": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "Account Lockout",
                "nodeType": "AccountLockoutNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        }
      },
      "trustedJwtIssuer": {},
      "webhookService": {
        "webhooks": {
          "_id": "webhooks",
          "_type": {
            "_id": "webhooks",
            "collection": true,
            "name": "Webhook Service"
          },
          "headers": {
            "accept": "*/*"
          }
        }
      },
      "wsEntity": {
        "ws": {
          "_id": "ws",
          "_type": {
            "_id": "ws",
            "collection": true,
            "name": "Entity Descriptor "
          }
        }
      }
    },
    "root-first-second": {
      "agent": {},
      "agentGroup": {},
      "application": {},
      "applicationTypes": {
        "iPlanetAMWebAgentService": {
          "_id": "iPlanetAMWebAgentService",
          "actions": {
            "DELETE": true,
            "GET": true,
            "HEAD": true,
            "OPTIONS": true,
            "PATCH": true,
            "POST": true,
            "PUT": true
          },
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "iPlanetAMWebAgentService",
          "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
          "saveIndex": "org.forgerock.openam.entitlement.indextree.TreeSaveIndex",
          "searchIndex": "org.forgerock.openam.entitlement.indextree.TreeSearchIndex"
        },
        "sunAMDelegationService": {
          "_id": "sunAMDelegationService",
          "actions": {
            "DELEGATE": true,
            "MODIFY": true,
            "READ": true
          },
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "sunAMDelegationService",
          "resourceComparator": "com.sun.identity.entitlement.RegExResourceName",
          "saveIndex": "com.sun.identity.entitlement.opensso.DelegationResourceNameIndexGenerator",
          "searchIndex": "com.sun.identity.entitlement.opensso.DelegationResourceNameSplitter"
        },
        "umaApplicationType": {
          "_id": "umaApplicationType",
          "actions": {},
          "applicationClassName": "com.sun.identity.entitlement.Application",
          "name": "umaApplicationType",
          "resourceComparator": "org.forgerock.openam.uma.UmaPolicyResourceMatcher",
          "saveIndex": "org.forgerock.openam.uma.UmaPolicySaveIndex",
          "searchIndex": "org.forgerock.openam.uma.UmaPolicySearchIndex"
        }
      },
      "authentication": {
        "_id": "",
        "_type": {
          "_id": "EMPTY",
          "collection": false,
          "name": "Core"
        },
        "accountlockout": {
          "lockoutDuration": 0,
          "lockoutDurationMultiplier": 1,
          "lockoutWarnUserCount": 0,
          "loginFailureCount": 5,
          "loginFailureDuration": 300,
          "loginFailureLockoutMode": false,
          "storeInvalidAttemptsInDataStore": true
        },
        "core": {
          "adminAuthModule": "ldapService",
          "orgConfig": "ldapService"
        },
        "general": {
          "defaultAuthLevel": 0,
          "identityType": [
            "agent",
            "user"
          ],
          "locale": "en_US",
          "statelessSessionsEnabled": true,
          "twoFactorRequired": false,
          "userStatusCallbackPlugins": []
        },
        "postauthprocess": {
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": [
            "/am/console"
          ],
          "userAttributeSessionMapping": [],
          "usernameGeneratorClass": "com.sun.identity.authentication.spi.DefaultUserIDGenerator",
          "usernameGeneratorEnabled": true
        },
        "security": {
          "addClearSiteDataHeader": true,
          "moduleBasedAuthEnabled": true,
          "sharedSecret": null,
          "zeroPageLoginAllowedWithoutReferrer": true,
          "zeroPageLoginEnabled": false,
          "zeroPageLoginReferrerWhiteList": []
        },
        "trees": {
          "authenticationSessionsMaxDuration": 5,
          "authenticationSessionsStateManagement": "JWT",
          "authenticationSessionsWhitelist": false,
          "authenticationTreeCookieHttpOnly": true,
          "suspendedAuthenticationTimeout": 5
        },
        "userprofile": {
          "aliasAttributeName": [
            "uid"
          ],
          "defaultRole": [],
          "dynamicProfileCreation": "false"
        }
      },
      "authenticationChains": {
        "amsterService": {
          "_id": "amsterService",
          "_type": {
            "_id": "EMPTY",
            "collection": true,
            "name": "Authentication Configuration"
          },
          "authChainConfiguration": [
            {
              "criteria": "REQUIRED",
              "module": "Amster",
              "options": {}
            }
          ],
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": []
        },
        "ldapService": {
          "_id": "ldapService",
          "_type": {
            "_id": "EMPTY",
            "collection": true,
            "name": "Authentication Configuration"
          },
          "authChainConfiguration": [
            {
              "criteria": "REQUIRED",
              "module": "DataStore",
              "options": {}
            }
          ],
          "loginFailureUrl": [],
          "loginPostProcessClass": [],
          "loginSuccessUrl": []
        }
      },
      "authenticationModules": {
        "amster": {
          "_id": "amster",
          "_type": {
            "_id": "amster",
            "collection": true,
            "name": "ForgeRock Amster"
          },
          "authenticationLevel": 0,
          "authorizedKeys": "/home/prestonhales/am/security/keys/amster/authorized_keys",
          "enabled": true
        },
        "datastore": {
          "_id": "datastore",
          "_type": {
            "_id": "datastore",
            "collection": true,
            "name": "Data Store"
          },
          "authenticationLevel": 0
        },
        "federation": {
          "_id": "federation",
          "_type": {
            "_id": "federation",
            "collection": true,
            "name": "Federation"
          },
          "authenticationLevel": 0
        },
        "hotp": {
          "_id": "hotp",
          "_type": {
            "_id": "hotp",
            "collection": true,
            "name": "HOTP"
          },
          "authenticationLevel": 0,
          "autoSendOTP": false,
          "otpDeliveryMethod": "SMS and E-mail",
          "otpLength": "8",
          "otpMaxRetry": 3,
          "otpValidityDuration": 5,
          "smsGatewayClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
          "smtpFromAddress": "no-reply@openam.org",
          "smtpHostPort": 465,
          "smtpHostname": "smtp.gmail.com",
          "smtpSslEnabled": "SSL",
          "smtpUserPassword": null,
          "smtpUsername": "opensso.sun",
          "userProfileEmailAttribute": "mail",
          "userProfileTelephoneAttribute": "telephoneNumber"
        },
        "ldap": {
          "_id": "ldap",
          "_type": {
            "_id": "ldap",
            "collection": true,
            "name": "LDAP"
          },
          "authenticationLevel": 0,
          "beheraPasswordPolicySupportEnabled": true,
          "connectionHeartbeatInterval": 10,
          "connectionHeartbeatTimeUnit": "SECONDS",
          "minimumPasswordLength": "8",
          "openam-auth-ldap-connection-mode": "LDAPS",
          "operationTimeout": 0,
          "primaryLdapServer": [
            "localhost:50636"
          ],
          "profileAttributeMappings": [],
          "returnUserDN": true,
          "searchScope": "SUBTREE",
          "secondaryLdapServer": [],
          "stopLdapbindAfterInmemoryLockedEnabled": false,
          "trustAllServerCertificates": false,
          "userBindDN": "cn=Directory Manager",
          "userBindPassword": null,
          "userProfileRetrievalAttribute": "uid",
          "userSearchAttributes": [
            "uid"
          ],
          "userSearchStartDN": [
            "dc=openam,dc=forgerock,dc=org"
          ]
        },
        "oath": {
          "_id": "oath",
          "_type": {
            "_id": "oath",
            "collection": true,
            "name": "OATH"
          },
          "addChecksum": "False",
          "authenticationLevel": 0,
          "forgerock-oath-maximum-clock-drift": 0,
          "forgerock-oath-sharedsecret-implementation-class": "org.forgerock.openam.authentication.modules.oath.plugins.DefaultSharedSecretProvider",
          "hotpWindowSize": 100,
          "minimumSecretKeyLength": "32",
          "oathAlgorithm": "HOTP",
          "oathOtpMaxRetry": 3,
          "passwordLength": "6",
          "stepsInWindow": 2,
          "timeStepSize": 30,
          "truncationOffset": -1
        },
        "sae": {
          "_id": "sae",
          "_type": {
            "_id": "sae",
            "collection": true,
            "name": "SAE"
          },
          "authenticationLevel": 0
        }
      },
      "conditionTypes": {
        "AMIdentityMembership": {
          "_id": "AMIdentityMembership",
          "config": {
            "properties": {
              "amIdentityName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AMIdentityMembership"
        },
        "AND": {
          "_id": "AND",
          "config": {
            "properties": {
              "conditions": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "AND"
        },
        "AuthLevel": {
          "_id": "AuthLevel",
          "config": {
            "properties": {
              "authLevel": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthLevel"
        },
        "AuthScheme": {
          "_id": "AuthScheme",
          "config": {
            "properties": {
              "applicationIdleTimeout": {
                "type": "integer"
              },
              "applicationName": {
                "type": "string"
              },
              "authScheme": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthScheme"
        },
        "AuthenticateToRealm": {
          "_id": "AuthenticateToRealm",
          "config": {
            "properties": {
              "authenticateToRealm": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticateToRealm"
        },
        "AuthenticateToService": {
          "_id": "AuthenticateToService",
          "config": {
            "properties": {
              "authenticateToService": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticateToService"
        },
        "IPv4": {
          "_id": "IPv4",
          "config": {
            "properties": {
              "dnsName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "endIp": {
                "type": "string"
              },
              "startIp": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "IPv4"
        },
        "IPv6": {
          "_id": "IPv6",
          "config": {
            "properties": {
              "dnsName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "endIp": {
                "type": "string"
              },
              "startIp": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "IPv6"
        },
        "LDAPFilter": {
          "_id": "LDAPFilter",
          "config": {
            "properties": {
              "ldapFilter": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "LDAPFilter"
        },
        "LEAuthLevel": {
          "_id": "LEAuthLevel",
          "config": {
            "properties": {
              "authLevel": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "LEAuthLevel"
        },
        "NOT": {
          "_id": "NOT",
          "config": {
            "properties": {
              "condition": {
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "NOT"
        },
        "OAuth2Scope": {
          "_id": "OAuth2Scope",
          "config": {
            "properties": {
              "requiredScopes": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "OAuth2Scope"
        },
        "OR": {
          "_id": "OR",
          "config": {
            "properties": {
              "conditions": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "OR"
        },
        "Policy": {
          "_id": "Policy",
          "config": {
            "properties": {
              "className": {
                "type": "string"
              },
              "properties": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Policy"
        },
        "ResourceEnvIP": {
          "_id": "ResourceEnvIP",
          "config": {
            "properties": {
              "resourceEnvIPConditionValue": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "ResourceEnvIP"
        },
        "Script": {
          "_id": "Script",
          "config": {
            "properties": {
              "scriptId": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Script"
        },
        "Session": {
          "_id": "Session",
          "config": {
            "properties": {
              "maxSessionTime": {
                "type": "integer"
              },
              "terminateSession": {
                "required": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Session"
        },
        "SessionProperty": {
          "_id": "SessionProperty",
          "config": {
            "properties": {
              "ignoreValueCase": {
                "required": true,
                "type": "boolean"
              },
              "properties": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "SessionProperty"
        },
        "SimpleTime": {
          "_id": "SimpleTime",
          "config": {
            "properties": {
              "endDate": {
                "type": "string"
              },
              "endDay": {
                "type": "string"
              },
              "endTime": {
                "type": "string"
              },
              "enforcementTimeZone": {
                "type": "string"
              },
              "startDate": {
                "type": "string"
              },
              "startDay": {
                "type": "string"
              },
              "startTime": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "SimpleTime"
        },
        "Transaction": {
          "_id": "Transaction",
          "config": {
            "properties": {
              "authenticationStrategy": {
                "type": "string"
              },
              "strategySpecifier": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Transaction"
        }
      },
      "decisionCombiners": {
        "DenyOverride": {
          "_id": "DenyOverride",
          "title": "DenyOverride"
        }
      },
      "idp": {},
      "policy": {},
      "policyset": {
        "oauth2Scopes": {
          "applicationType": "iPlanetAMWebAgentService",
          "attributeNames": [],
          "conditions": [
            "Script",
            "AMIdentityMembership",
            "IPv6",
            "SimpleTime",
            "IPv4",
            "LEAuthLevel",
            "LDAPFilter",
            "AuthScheme",
            "Session",
            "AND",
            "AuthenticateToRealm",
            "ResourceEnvIP",
            "SessionProperty",
            "OAuth2Scope",
            "OR",
            "Transaction",
            "NOT",
            "AuthLevel",
            "AuthenticateToService"
          ],
          "createdBy": "id=dsameuser,ou=user,ou=am-config",
          "creationDate": 1578580064992,
          "description": "The built-in Application used by the OAuth2 scope authorization process.",
          "displayName": "Default OAuth2 Scopes Policy Set",
          "editable": true,
          "entitlementCombiner": "DenyOverride",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509790191,
          "name": "oauth2Scopes",
          "resourceComparator": null,
          "resourceTypeUuids": [
            "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b"
          ],
          "saveIndex": null,
          "searchIndex": null,
          "subjects": [
            "AuthenticatedUsers",
            "NOT",
            "Identity",
            "OR",
            "AND",
            "NONE",
            "JwtClaim"
          ]
        }
      },
      "resourcetype": {
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2": {
          "actions": {
            "DELETE": true,
            "GET": true,
            "HEAD": true,
            "OPTIONS": true,
            "PATCH": true,
            "POST": true,
            "PUT": true
          },
          "createdBy": "id=dsameuser,ou=user,ou=am-config",
          "creationDate": 1595479030487,
          "description": "The built-in URL Resource Type available to OpenAM Policies.",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509790171,
          "name": "URL",
          "patterns": [
            "*://*:*/*",
            "*://*:*/*?*"
          ],
          "uuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2"
        },
        "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b": {
          "actions": {
            "GRANT": true
          },
          "createdBy": "id=dsameuser,ou=user,ou=am-config",
          "creationDate": 1595479030586,
          "description": "The built-in OAuth2 Scope Resource Type for OAuth2policy-provided scope.",
          "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
          "lastModifiedDate": 1728509790156,
          "name": "OAuth2 Scope",
          "patterns": [
            "*://*:*/*",
            "*://*:*/*?*",
            "*"
          ],
          "uuid": "d60b7a71-1dc6-44a5-8e48-e4b9d92dee8b"
        }
      },
      "saml": {
        "cot": {},
        "hosted": {},
        "metadata": {},
        "remote": {}
      },
      "script": {
        "01e1a3c0-038b-4c16-956a-6c9d89328cff": {
          "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for a scripted decision node",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Authentication Tree Decision Node Script",
          "script": "/*\n  - Data made available by nodes that have already executed are available in the sharedState variable.\n  - The script should set outcome to either \"true\" or \"false\".\n */\n\noutcome = \"true\";\n"
        },
        "1244e639-4a31-401d-ab61-d75133d8dc9e": {
          "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Instagram",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Instagram Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"username\", rawProfile.username)))\n"
        },
        "13e3f263-9cd3-4844-8d1c-040fd0dd02eb": {
          "_id": "13e3f263-9cd3-4844-8d1c-040fd0dd02eb",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script template for Device Profile Match decision node script for Authentication Tree",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Profile Match Template - Decision Node Script",
          "script": "/*\n * Copyright 2020-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/** ******************************************************************\n *\n * The following script is a simplified template for understanding\n * the basics of device matching. _This is not functionally complete._\n * For a functionally complete script as well as a development toolkit,\n * visit https://github.com/ForgeRock/forgerock-device-match-script.\n *\n * Global node variables accessible within this scope:\n * 1. `sharedState` provides access to incoming request\n * 2. `deviceProfilesDao` provides access to stored profiles\n * 3. `outcome` variable maps to auth tree node outcomes; values are\n *    'true', 'false', or 'unknownDevice' (notice _all_ are strings).\n * ******************************************************************/\n\n/**\n * Get the incoming request's device profile.\n * Returns serialized JSON (type string); parsing this will result a\n * native JS object.\n */\nvar incomingJson = sharedState.get('forgeRock.device.profile').toString();\nvar incoming = JSON.parse(incomingJson);\n\n/**\n * Get the incoming user's username and realm.\n * Notice the use of `.asString()`.\n */\nvar username = sharedState.get(\"username\").asString();\nvar realm = sharedState.get(\"realm\").asString();\n\n/**\n * Get the user's stored profiles for appropriate realm.\n * Returns a _special_ object with methods for profile data\n */\nvar storedProfiles = deviceProfilesDao.getDeviceProfiles(username, realm);\n\n// Default to `outcome` of 'unknownDevice'\noutcome = 'unknownDevice';\n\nif (storedProfiles) {\n    var i = 0;\n    // NOTE: `.size()` method returns the number of stored profiles\n    var len = storedProfiles.size();\n\n    for (i; i < len; i++) {\n        /**\n         * Get the stored profile.\n         * Returns serialized JSON (type string); parsing this will result\n         * a native JS object.\n         */\n        var storedJson = storedProfiles.get(i);\n        var stored = JSON.parse(storedJson);\n\n        /**\n         * Find a stored profile with the same identifier.\n         */\n        if (incoming.identifier === stored.identifier) {\n\n            /**\n             * Now that you've found the appropriate profile, you will perform\n             * the logic here to match the values of the `incoming` profile\n             * with that of the `stored` profile.\n             *\n             * The result of the matching logic is assigned to `outcome`. Since\n             * we have profiles of the same identifier, the value (type string)\n             * should now be either 'true' or 'false' (properties matched or not).\n             *\n             * For more information about this topic, visit this Github repo:\n             * https://github.com/ForgeRock/forgerock-device-match-script\n             */\n            outcome = 'false';\n        }\n    }\n}\n"
        },
        "157298c0-7d31-4059-a95b-eeb08473b7e5": {
          "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
          "context": "AUTHENTICATION_CLIENT_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for client side Device Id (Match) Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Id (Match) - Client Side",
          "script": "var fontDetector = (function () {\n    /**\n     * JavaScript code to detect available availability of a\n     * particular font in a browser using JavaScript and CSS.\n     *\n     * Author : Lalit Patel\n     * Website: http://www.lalit.org/lab/javascript-css-font-detect/\n     * License: Apache Software License 2.0\n     *          http://www.apache.org/licenses/LICENSE-2.0\n     * Version: 0.15 (21 Sep 2009)\n     *          Changed comparision font to default from sans-default-default,\n     *          as in FF3.0 font of child element didn't fallback\n     *          to parent element if the font is missing.\n     * Version: 0.2 (04 Mar 2012)\n     *          Comparing font against all the 3 generic font families ie,\n     *          'monospace', 'sans-serif' and 'sans'. If it doesn't match all 3\n     *          then that font is 100% not available in the system\n     * Version: 0.3 (24 Mar 2012)\n     *          Replaced sans with serif in the list of baseFonts\n     */\n    /*\n     * Portions Copyrighted 2013 ForgeRock AS.\n     */\n    var detector = {}, baseFonts, testString, testSize, h, s, defaultWidth = {}, defaultHeight = {}, index;\n\n    // a font will be compared against all the three default fonts.\n    // and if it doesn't match all 3 then that font is not available.\n    baseFonts = ['monospace', 'sans-serif', 'serif'];\n\n    //we use m or w because these two characters take up the maximum width.\n    // And we use a LLi so that the same matching fonts can get separated\n    testString = \"mmmmmmmmmmlli\";\n\n    //we test using 72px font size, we may use any size. I guess larger the better.\n    testSize = '72px';\n\n    h = document.getElementsByTagName(\"body\")[0];\n\n    // create a SPAN in the document to get the width of the text we use to test\n    s = document.createElement(\"span\");\n    s.style.fontSize = testSize;\n    s.innerHTML = testString;\n    for (index in baseFonts) {\n        //get the default width for the three base fonts\n        s.style.fontFamily = baseFonts[index];\n        h.appendChild(s);\n        defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font\n        defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font\n        h.removeChild(s);\n    }\n\n    detector.detect = function(font) {\n        var detected = false, index, matched;\n        for (index in baseFonts) {\n            s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.\n            h.appendChild(s);\n            matched = (s.offsetWidth !== defaultWidth[baseFonts[index]] || s.offsetHeight !== defaultHeight[baseFonts[index]]);\n            h.removeChild(s);\n            detected = detected || matched;\n        }\n        return detected;\n    };\n\n    return detector;\n}());\n/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved\n *\n * The contents of this file are subject to the terms\n * of the Common Development and Distribution License\n * (the License). You may not use this file except in\n * compliance with the License.\n *\n * You can obtain a copy of the License at\n * https://opensso.dev.java.net/public/CDDLv1.0.html or\n * opensso/legal/CDDLv1.0.txt\n * See the License for the specific language governing\n * permission and limitations under the License.\n *\n * When distributing Covered Code, include this CDDL\n * Header Notice in each file and include the License file\n * at opensso/legal/CDDLv1.0.txt.\n * If applicable, add the following below the CDDL Header,\n * with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n */\n/*\n * Portions Copyrighted 2013 Syntegrity.\n * Portions Copyrighted 2013-2014 ForgeRock AS.\n */\n\nvar collectScreenInfo = function () {\n        var screenInfo = {};\n        if (screen) {\n            if (screen.width) {\n                screenInfo.screenWidth = screen.width;\n            }\n\n            if (screen.height) {\n                screenInfo.screenHeight = screen.height;\n            }\n\n            if (screen.pixelDepth) {\n                screenInfo.screenColourDepth = screen.pixelDepth;\n            }\n        } else {\n            console.warn(\"Cannot collect screen information. screen is not defined.\");\n        }\n        return screenInfo;\n    },\n    collectTimezoneInfo = function () {\n        var timezoneInfo =  {}, offset = new Date().getTimezoneOffset();\n\n        if (offset) {\n            timezoneInfo.timezone = offset;\n        } else {\n            console.warn(\"Cannot collect timezone information. timezone is not defined.\");\n        }\n\n        return timezoneInfo;\n    },\n    collectBrowserPluginsInfo = function () {\n\n        if (navigator && navigator.plugins) {\n            var pluginsInfo = {}, i, plugins = navigator.plugins;\n            pluginsInfo.installedPlugins = \"\";\n\n            for (i = 0; i < plugins.length; i++) {\n                pluginsInfo.installedPlugins = pluginsInfo.installedPlugins + plugins[i].filename + \";\";\n            }\n\n            return pluginsInfo;\n        } else {\n            console.warn(\"Cannot collect browser plugin information. navigator.plugins is not defined.\");\n            return {};\n        }\n\n    },\n// Getting geolocation takes some time and is done asynchronously, hence need a callback which is called once geolocation is retrieved.\n    collectGeolocationInfo = function (callback) {\n        var geolocationInfo = {},\n            successCallback = function(position) {\n                geolocationInfo.longitude = position.coords.longitude;\n                geolocationInfo.latitude = position.coords.latitude;\n                callback(geolocationInfo);\n            }, errorCallback = function(error) {\n                console.warn(\"Cannot collect geolocation information. \" + error.code + \": \" + error.message);\n                callback(geolocationInfo);\n            };\n        if (navigator && navigator.geolocation) {\n            // NB: If user chooses 'Not now' on Firefox neither callback gets called\n            //     https://bugzilla.mozilla.org/show_bug.cgi?id=675533\n            navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n        } else {\n            console.warn(\"Cannot collect geolocation information. navigator.geolocation is not defined.\");\n            callback(geolocationInfo);\n        }\n    },\n    collectBrowserFontsInfo = function () {\n        var fontsInfo = {}, i, fontsList = [\"cursive\",\"monospace\",\"serif\",\"sans-serif\",\"fantasy\",\"default\",\"Arial\",\"Arial Black\",\n            \"Arial Narrow\",\"Arial Rounded MT Bold\",\"Bookman Old Style\",\"Bradley Hand ITC\",\"Century\",\"Century Gothic\",\n            \"Comic Sans MS\",\"Courier\",\"Courier New\",\"Georgia\",\"Gentium\",\"Impact\",\"King\",\"Lucida Console\",\"Lalit\",\n            \"Modena\",\"Monotype Corsiva\",\"Papyrus\",\"Tahoma\",\"TeX\",\"Times\",\"Times New Roman\",\"Trebuchet MS\",\"Verdana\",\n            \"Verona\"];\n        fontsInfo.installedFonts = \"\";\n\n        for (i = 0; i < fontsList.length; i++) {\n            if (fontDetector.detect(fontsList[i])) {\n                fontsInfo.installedFonts = fontsInfo.installedFonts + fontsList[i] + \";\";\n            }\n        }\n        return fontsInfo;\n    },\n    devicePrint = {};\n\ndevicePrint.screen = collectScreenInfo();\ndevicePrint.timezone = collectTimezoneInfo();\ndevicePrint.plugins = collectBrowserPluginsInfo();\ndevicePrint.fonts = collectBrowserFontsInfo();\n\nif (navigator.userAgent) {\n    devicePrint.userAgent = navigator.userAgent;\n}\nif (navigator.appName) {\n    devicePrint.appName = navigator.appName;\n}\nif (navigator.appCodeName) {\n    devicePrint.appCodeName = navigator.appCodeName;\n}\nif (navigator.appVersion) {\n    devicePrint.appVersion = navigator.appVersion;\n}\nif (navigator.appMinorVersion) {\n    devicePrint.appMinorVersion = navigator.appMinorVersion;\n}\nif (navigator.buildID) {\n    devicePrint.buildID = navigator.buildID;\n}\nif (navigator.platform) {\n    devicePrint.platform = navigator.platform;\n}\nif (navigator.cpuClass) {\n    devicePrint.cpuClass = navigator.cpuClass;\n}\nif (navigator.oscpu) {\n    devicePrint.oscpu = navigator.oscpu;\n}\nif (navigator.product) {\n    devicePrint.product = navigator.product;\n}\nif (navigator.productSub) {\n    devicePrint.productSub = navigator.productSub;\n}\nif (navigator.vendor) {\n    devicePrint.vendor = navigator.vendor;\n}\nif (navigator.vendorSub) {\n    devicePrint.vendorSub = navigator.vendorSub;\n}\nif (navigator.language) {\n    devicePrint.language = navigator.language;\n}\nif (navigator.userLanguage) {\n    devicePrint.userLanguage = navigator.userLanguage;\n}\nif (navigator.browserLanguage) {\n    devicePrint.browserLanguage = navigator.browserLanguage;\n}\nif (navigator.systemLanguage) {\n    devicePrint.systemLanguage = navigator.systemLanguage;\n}\n\n// Attempt to collect geo-location information and return this with the data collected so far.\n// Otherwise, if geo-location fails or takes longer than 30 seconds, auto-submit the data collected so far.\nautoSubmitDelay = 30000;\noutput.value = JSON.stringify(devicePrint);\ncollectGeolocationInfo(function(geolocationInfo) {\n    devicePrint.geolocation = geolocationInfo;\n    output.value = JSON.stringify(devicePrint);\n    submit();\n});\n"
        },
        "1d475815-72cb-42eb-aafd-4026989d28a7": {
          "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for Social Identity Provider Profile Transformation",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Social Identity Provider Profile Transformation Script",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/* Default Social Identity Provider Profile Transformation script to use as a template for new scripts */\n"
        },
        "248b8a56-df81-4b1b-b4ba-45d994f6504c": {
          "_id": "248b8a56-df81-4b1b-b4ba-45d994f6504c",
          "context": "SAML2_IDP_ADAPTER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 IDP Adapter",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 IDP Adapter Script",
          "script": "/*\n * Copyright 2021-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * The script has these top level functions that could be executed during a SAML2 flow.\n *      - preSingleSignOn\n *      - preAuthentication\n *      - preSendResponse\n *      - preSignResponse\n *      - preSendFailureResponse\n *\n * Please see the javadoc for the interface definition and more information about these methods.\n * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html\n * Note that the initialize method is not supported in the scripts.\n *\n * Defined variables. Check the documentation on the respective functions for the variables available to it.\n *\n * hostedEntityId - String\n *     Entity ID for the hosted IDP\n * realm - String\n *     Realm of the hosted IDP\n * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)\n *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.\n * request - HttpServletRequest (2)\n *     Servlet request object\n * response - HttpServletResponse (3)\n *     Servlet response object\n * authnRequest - AuthnRequest (4)\n *     The original authentication request sent from SP\n * reqId - String\n *     The id to use for continuation of processing if the adapter redirects\n * res - Response (5)\n *     The SAML Response\n * session - SSOToken (6)\n *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.\n * relayState - String\n *     The relayState that will be used in the redirect\n * faultCode - String\n *     the fault code that will be returned in the SAML response\n * faultDetail - String\n *     the fault detail that will be returned in the SAML response\n * logger - Logger instance\n *     https://backstage.forgerock.com/docs/am/7.3/scripting-guide/scripting-api-global-logger.html.\n *     Corresponding log files will be prefixed with: scripts.<script name>\n *\n * Throws SAML2Exception (7):\n *     for any exceptions occurring in the adapter. The federation process will continue\n *\n * Class reference:\n * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.\n * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.\n * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.\n * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.\n * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html.\n * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.\n * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.\n */\n\n/*\n * Template/default script for SAML2 IDP Adapter scripted plugin.\n */\n\n/*\n * Available variables for preSingleSignOn:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     logger\n *\n * Return - true if browser redirection is happening after processing, false otherwise. Default to false.\n */\nfunction preSingleSignOn () {\n    return false;\n}\n\n/*\n * Available variables for preAuthentication:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     session\n *     relayState\n *     logger\n *\n * Return - true if browser redirection is happening after processing, false otherwise. Default to false.\n */\nfunction preAuthentication () {\n    return false;\n}\n\n/*\n * Available variables for preSendResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     response\n *     reqId\n *     session\n *     relayState\n *     logger\n *\n * Return - true if browser redirection happened after processing, false otherwise. Default to false.\n */\nfunction preSendResponse () {\n    return false;\n}\n\n/*\n * Available variables for preSignResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     authnRequest\n *     session\n *     relayState\n *     res\n *     logger\n */\nfunction preSignResponse () {\n}\n\n/*\n * Available variables for preSendFailureResponse:\n *     hostedEntityId\n *     realm\n *     idpAdapterScriptHelper\n *     request\n *     response\n *     faultCode\n *     faultDetail\n *     logger\n */\nfunction preSendFailureResponse () {\n}\n"
        },
        "25e6c06d-cf70-473b-bd28-26931edc476b": {
          "_id": "25e6c06d-cf70-473b-bd28-26931edc476b",
          "context": "OAUTH2_VALIDATE_SCOPE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Scope Validation",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Validate Scope Script",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script validates the requested scopes against the allowed scopes.\n * If no scopes are requested, default scopes are assumed.\n * The script has four top level functions that could be executed during the different OAuth2 flows:\n *      - validateAuthorizationScope\n *      - validateAccessTokenScope\n *      - validateRefreshTokenScope\n *      - validateBackChannelAuthorizationScope\n *\n * Defined variables:\n * requestedScopes - Set<String> (1).\n *          The set of requested scopes.\n * defaultScopes - Set<String> (1).\n *                 The set of default scopes.\n * allowedScopes - Set<String> (1).\n *                 The set of allowed scopes.\n * scriptName - String (primitive).\n *              Always present, the display name of the script.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_VALIDATE_SCOPE\n * httpClient - HTTP Client (2).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n *\n * Throws InvalidScopeException:\n *      - if there are no scopes requested and default scopes are empty\n *      - if a requested scope is not allowed\n *\n * Return - a Set<String> of validated scopes (1).\n *\n * Class reference:\n * (1) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.\n * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n */\n\n/**\n * Default validate scope script.\n */\nfunction validateScopes () {\n    var frJava = JavaImporter(\n        org.forgerock.oauth2.core.exceptions.InvalidScopeException\n    );\n\n    var scopes;\n    if (requestedScopes == null || requestedScopes.isEmpty()) {\n        scopes = defaultScopes;\n    } else {\n        scopes = new java.util.HashSet(allowedScopes);\n        scopes.retainAll(requestedScopes);\n        if (requestedScopes.size() > scopes.size()) {\n            var invalidScopes = new java.util.HashSet(requestedScopes);\n            invalidScopes.removeAll(allowedScopes);\n            throw new frJava.InvalidScopeException('Unknown/invalid scope(s)');\n        }\n    }\n\n    if (scopes == null || scopes.isEmpty()) {\n        throw new frJava.InvalidScopeException('No scope requested and no default scope configured');\n    }\n    return scopes;\n}\n\nfunction validateAuthorizationScope () {\n    return validateScopes();\n}\n\nfunction validateAccessTokenScope () {\n    return validateScopes();\n}\n\nfunction validateRefreshTokenScope () {\n    return validateScopes();\n}\n\nfunction validateBackChannelAuthorizationScope () {\n    return validateScopes();\n}\n"
        },
        "312e951f-70c5-49d2-a9ae-93aef909d5df": {
          "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Salesforce",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Salesforce Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.user_id),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.zoneInfo)))\n"
        },
        "36863ffb-40ec-48b9-94b1-9a99f71cc3b5": {
          "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
          "context": "OIDC_CLAIMS",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OIDC claims",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OIDC Claims Script",
          "script": "/*\n * Copyright 2014-2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\nimport com.iplanet.sso.SSOException\nimport com.sun.identity.idm.IdRepoException\nimport org.forgerock.oauth2.core.exceptions.InvalidRequestException\nimport org.forgerock.oauth2.core.UserInfoClaims\nimport org.forgerock.openidconnect.Claim\n\n/*\n* Defined variables:\n* logger - always presents, the \"OAuth2Provider\" debug logger instance\n* claims - always present, default server provided claims - Map<String, Object>\n* claimObjects - always present, default server provided claims - List<Claim>\n* session - present if the request contains the session cookie, the user's session object\n* identity - always present, the identity of the resource owner\n* scopes - always present, the requested scopes\n* scriptName - always present, the display name of the script\n* requestProperties - always present, contains a map of request properties:\n*                     requestUri - the request URI\n*                     realm - the realm that the request relates to\n*                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n*                     more properties. Please note that these should be handled in accordance with OWASP best practices.\n* clientProperties - present if the client specified in the request was identified, contains a map of client\n*                    properties:\n*                    clientId - the client's Uri for the request locale\n*                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n*                                        for the client\n*                    allowedResponseTypes - list of the allowed response types for the client\n*                    allowedScopes - list of the allowed scopes for the client\n*                    customProperties - A map of the custom properties of the client.\n*                                       Lists or maps will be included as sub-maps, e.g:\n*                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n* requestedClaims - Map<String, Set<String>>\n*                  always present, not empty if the request contains a claims parameter and server has enabled\n*                  claims_parameter_supported, map of requested claims to possible values, otherwise empty,\n*                  requested claims with no requested values will have a key but no value in the map. A key with\n*                  a single value in its Set indicates this is the only value that should be returned.\n* requestedTypedClaims - List<Claim>\n*                       always present, not empty if the request contains a claims parameter and server has enabled\n*                       claims_parameter_supported, list of requested claims with claim name, requested possible values\n*                       and if claim is essential, otherwise empty,\n*                       requested claims with no requested values will have a claim with no values. A claims with\n*                       a single value indicates this is the only value that should be returned.\n* claimsLocales - the values from the 'claims_locales' parameter - List<String>\n* Required to return a Map of claims to be added to the id_token claims\n*\n* Expected return value structure:\n* UserInfoClaims {\n*    Map<String, Object> values; // The values of the claims for the user information\n*    Map<String, List<String>> compositeScopes; // Mapping of scope name to a list of claim names.\n* }\n*/\n\n// user session not guaranteed to be present\nboolean sessionPresent = session != null\n\n/*\n * Pulls first value from users profile attribute\n *\n * @param claim The claim object.\n * @param attr The profile attribute name.\n */\ndef fromSet = { claim, attr ->\n    if (attr != null && attr.size() == 1){\n        attr.iterator().next()\n    } else if (attr != null && attr.size() > 1){\n        attr\n    } else if (logger.warningEnabled()) {\n        logger.warning(\"OpenAMScopeValidator.getUserInfo(): Got an empty result for claim=$claim\");\n    }\n}\n\n// ---vvvvvvvvvv--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---vvvvvvvvvv---\n/*\n * Claim resolver which resolves the value of the claim from its requested values.\n *\n * This resolver will return a value if the claim has one requested values, otherwise an exception is thrown.\n */\ndefaultClaimResolver = { claim ->\n    if (claim.getValues().size() == 1) {\n        [(claim.getName()): claim.getValues().iterator().next()]\n    } else {\n        [:]\n    }\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If no match is found an exception is thrown.\n */\nuserProfileClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim of the user's address.\n *\n * This resolver will return a value for the claim if:\n * # the value of the address is not null\n *\n */\nuserAddressClaimResolver = { claim, identity ->\n    if (identity != null) {\n        addressFormattedValue = fromSet(claim.getName(), identity.getAttribute(\"postaladdress\"))\n        if (addressFormattedValue != null) {\n            return [\n                    \"formatted\" : addressFormattedValue\n            ]\n        }\n    }\n    [:]\n}\n\n/*\n * Claim resolver which resolves the value of the claim by looking up the user's profile.\n *\n * This resolver will return a value for the claim if:\n * # the user's profile attribute is not null\n * # AND the claim contains no requested values\n * # OR the claim contains requested values and the value from the user's profile is in the list of values\n *\n * If the claim is essential and no value is found an InvalidRequestException will be thrown and returned to the user.\n * If no match is found an exception is thrown.\n */\nessentialClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (claim.isEssential() && (userProfileValue == null || userProfileValue.isEmpty())) {\n            throw new InvalidRequestException(\"Could not provide value for essential claim $claim\")\n        }\n        if (userProfileValue != null && (claim.getValues() == null || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue))) {\n            return [(claim.getName()): userProfileValue]\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the list of requested languages from the 'claims_locales' authorize request\n * parameter and attempt to match it to a value from the users' profile attribute.\n * If no match is found an exception is thrown.\n */\nclaimLocalesClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            locale = claimsLocales.find { locale -> localeValues.containsKey(locale) }\n            if (locale != null) {\n                return [(claim.getName()): localeValues.get(locale)]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Claim resolver which expects the user's profile attribute value to be in the following format:\n * \"language_tag|value_for_language,...\".\n *\n * This resolver will take the language tag specified in the claim object and attempt to match it to a value\n * from the users' profile attribute. If no match is found an exception is thrown.\n */\nlanguageTagClaimResolver = { attribute, claim, identity ->\n    if (identity != null) {\n        userProfileValue = fromSet(claim.getName(), identity.getAttribute(attribute))\n        if (userProfileValue != null) {\n            localeValues = parseLocaleAwareString(userProfileValue)\n            if (claim.getLocale() != null) {\n                if (localeValues.containsKey(claim.getLocale())) {\n                    return [(claim.getName()): localeValues.get(claim.getLocale())]\n                } else {\n                    entry = localeValues.entrySet().iterator().next()\n                    return [(claim.getName() + \"#\" + entry.getKey()): entry.getValue()]\n                }\n            } else {\n                entry = localeValues.entrySet().iterator().next()\n                return [(claim.getName()): entry.getValue()]\n            }\n        }\n    }\n    return [:]\n}\n\n/*\n * Given a string \"en|English,jp|Japenese,fr_CA|French Canadian\" will return map of locale -> value.\n */\nparseLocaleAwareString = { s ->\n    return result = s.split(\",\").collectEntries { entry ->\n        split = entry.split(\"\\\\|\")\n        [(split[0]): value = split[1]]\n    }\n}\n// ---^^^^^^^^^^--- EXAMPLE CLAIM ATTRIBUTE RESOLVER FUNCTIONS ---^^^^^^^^^^---\n\n// -------------- UPDATE THIS TO CHANGE CLAIM TO ATTRIBUTE MAPPING FUNCTIONS ---------------\n/*\n * List of claim resolver mappings.\n */\n// [ {claim}: {attribute retriever}, ... ]\nclaimAttributes = [\n        \"email\": userProfileClaimResolver.curry(\"mail\"),\n        \"address\": { claim, identity -> [ \"address\" : userAddressClaimResolver(claim, identity) ] },\n        \"phone_number\": userProfileClaimResolver.curry(\"telephonenumber\"),\n        \"given_name\": userProfileClaimResolver.curry(\"givenname\"),\n        \"zoneinfo\": userProfileClaimResolver.curry(\"preferredtimezone\"),\n        \"family_name\": userProfileClaimResolver.curry(\"sn\"),\n        \"locale\": userProfileClaimResolver.curry(\"preferredlocale\"),\n        \"name\": userProfileClaimResolver.curry(\"cn\")\n]\n\n\n// -------------- UPDATE THIS TO CHANGE SCOPE TO CLAIM MAPPINGS --------------\n/*\n * Map of scopes to claim objects.\n */\n// {scope}: [ {claim}, ... ]\nscopeClaimsMap = [\n        \"email\": [ \"email\" ],\n        \"address\": [ \"address\" ],\n        \"phone\": [ \"phone_number\" ],\n        \"profile\": [ \"given_name\", \"zoneinfo\", \"family_name\", \"locale\", \"name\" ]\n]\n\n\n// ---------------- UPDATE BELOW FOR ADVANCED USAGES -------------------\nif (logger.messageEnabled()) {\n    scopes.findAll { s -> !(\"openid\".equals(s) || scopeClaimsMap.containsKey(s)) }.each { s ->\n        logger.message(\"OpenAMScopeValidator.getUserInfo()::Message: scope not bound to claims: $s\")\n    }\n}\n\n/*\n * Computes the claims return key and value. The key may be a different value if the claim value is not in\n * the requested language.\n */\ndef computeClaim = { claim ->\n    try {\n        claimResolver = claimAttributes.get(claim.getName(), { claimObj, identity -> defaultClaimResolver(claim)})\n        claimResolver(claim, identity)\n    } catch (IdRepoException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    } catch (SSOException e) {\n        if (logger.warningEnabled()) {\n            logger.warning(\"OpenAMScopeValidator.getUserInfo(): Unable to retrieve attribute=$attribute\", e);\n        }\n    }\n}\n\n/*\n * Converts requested scopes into claim objects based on the scope mappings in scopeClaimsMap.\n */\ndef convertScopeToClaims = {\n    scopes.findAll { scope -> \"openid\" != scope && scopeClaimsMap.containsKey(scope) }.collectMany { scope ->\n        scopeClaimsMap.get(scope).collect { claim ->\n            new Claim(claim)\n        }\n    }\n}\n\n// Creates a full list of claims to resolve from requested scopes, claims provided by AS and requested claims\ndef claimsToResolve = convertScopeToClaims() + claimObjects + requestedTypedClaims\n\n// Computes the claim return key and values for all requested claims\ncomputedClaims = claimsToResolve.collectEntries() { claim ->\n    result = computeClaim(claim)\n}\n\n// Computes composite scopes\ndef compositeScopes = scopeClaimsMap.findAll { scope ->\n    scopes.contains(scope.key)\n}\n\nreturn new UserInfoClaims((Map)computedClaims, (Map)compositeScopes)\n"
        },
        "3d97c436-42c0-4dd0-a571-ea6f34f752b3": {
          "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Itsme",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Itsme Profile Normalization",
          "script": "/*\n * Copyright 2020-2021 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue managedUser = json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"username\", rawProfile.email),\n        field(\"email\", rawProfile.email)))\nreturn managedUser\n"
        },
        "3f93ef6e-e54a-4393-aba1-f322656db28a": {
          "_id": "3f93ef6e-e54a-4393-aba1-f322656db28a",
          "context": "OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Authorize Endpoint Data Provider",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Authorize Endpoint Data Provider Script",
          "script": "/*\n * Copyright 2021-2023 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you return additional data when authorize request is called.\n *\n * Defined variables:\n *\n * session - SSOToken (1)\n *           Present if the request contains the session cookie, the user's session object.\n *\n * httpClient - HTTP Client (2).\n *              Always present, the HTTP client that can be used to make external HTTP requests\n *\n * logger - Debug (3)\n *          Always present, the \"ScriptedAuthorizeEndpointDataProvider\" debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_AUTHORIZE_ENDPOINT_DATA_PROVIDER.\n *\n * scriptName - String (primitive).\n *              Always present, the display name of the script\n *\n * Return - a Map<String, String> of additional data (4).\n *\n * Class reference:\n * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (2) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (3) Debug - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.\n */\n\n/**\n * Default authorize endpoint data provider script to use as a template for new scripts.\n */\n\n/* EXAMPLE\nvar map = new java.util.HashMap();\n\nfunction addAdditionalData() {\n\n    //If constant data needs to be returned\n    map.put(\"hello\", \"world\");\n\n    //If some data needs to be returned from third party service\n    addAdditionalDataFromExternalService();\n\n    //If there is a need to return some user session data\n    addAdditionalDataFromSessionProperties()\n\n    return map;\n};\n\nfunction addAdditionalDataFromExternalService() {\n  var frJava = JavaImporter(\n        org.forgerock.oauth2.core.exceptions.ServerException\n    );\n  try {\n        //Obtain additional data by performing a REST call to an external service\n        var request = new org.forgerock.http.protocol.Request();\n        request.setUri(\"https://third.party.app/hello.jsp\");\n        request.setMethod(\"POST\");\n        //request.setEntity(\"foo=bar&hello=world\");\n        request.setEntity(json(object(\n                    field(\"foo\", \"bar\"))));\n        var response = httpClient.send(request).getOrThrow();\n        logResponse(response);\n        var result = JSON.parse(response.getEntity().getString());\n        map.put(\"someKey\",result.get(\"someKey\"));\n  } catch (err) {\n     throw new frJava.ServerException(err);\n  }\n};\n\nfunction addAdditionalDataFromSessionProperties() {\n  //Add additional data from session property values\n   if (session != null) { // session is not available for resource owner password credentials grant\n     map.put(\"ipAddress\", session.getProperty(\"Host\"))\n   }\n};\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n};\n\naddAdditionalData();\n*/\n"
        },
        "400e48ba-3f13-4144-ac7b-f824ea8e98c5": {
          "_id": "400e48ba-3f13-4144-ac7b-f824ea8e98c5",
          "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for scripted JWT Issuers",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 JWT Issuer Script",
          "script": "/*\n * Copyright 2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you to derive the configuration for a dynamic JWT issuer from the issuer string.\n * A JWT issuer is made up of the following:\n *   - issuer - the identifier of the entity that issues JWTs\n *   - resource owner subject claim - the name of the claim in the JWT that identifies the resource owner\n *   - consented scope claim - the name of the claim in the JWT that represents scope that the resource owner\n *                             has already consented to externally\n *   - authorized subjects - the set of principal identifiers that are authorized to be used as resource owners\n *                           by the issuer\n *   - JWKs - either a set of JWKs or connection details for obtaining that set, that are the public keys that\n *            can verify the signature on the issued JWTs.\n *\n * Defined variables:\n * issuer - String\n *          The issuer from the bearer JWT.\n * realm - String\n *         The path of the realm that is handling the request.\n * scriptName - String.\n *              Always present, the display name of the script.\n * logger - Always present, the script debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_SCRIPTED_JWT_ISSUER.\n * httpClient - HTTP Client (1).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n * idRepository - Identity Repository (2). Always present.\n * secrets - Secrets accessor (3). Always present.\n *\n * Return - org.forgerock.oauth2.core.TrustedJwtIssuerConfig (4) - the configuration of the trusted JWT issuer.\n *\n * Class reference:\n * (1) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (2) ScriptedIdentityRepository - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/identity/ScriptedIdentityRepository.html.\n * (3) ScriptedSecrets - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openam/scripting/api/secrets/ScriptedSecrets.html.\n * (4) TrustedJwtIssuerConfig - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/TrustedJwtIssuerConfig.html.\n */\n\n/* EXAMPLE\n(function () {\n    var frJava = JavaImporter(\n        org.forgerock.oauth2.core.TrustedJwtIssuerConfig,\n        java.util.Collections\n    );\n\n    var iss = idRepository.getIdentity(issuer);\n    if (iss == null) {\n        logger.message('No issuer found for: '+issuer);\n        return null;\n    }\n    logger.message('Found issuer: '+iss);\n    // in this example either a JWK set or a URI to a JWK set are in the postalAddress attribute\n    var jwksAttrs = iss.getAttributeValues('postalAddress');\n    var jwkSet = jwksAttrs.length === 0 ? null : jwksAttrs[0];\n    var config = new frJava.TrustedJwtIssuerConfig(\n        issuer,\n        'sub',\n        'scope',\n        // in this example, valid subjects are stored in the mail attribute\n        iss.getAttributeValues('mail'),\n        jwkSet.startsWith('{') ? jwkSet : null,\n        jwkSet.startsWith('http') ? jwkSet : null,\n        '5 minutes',\n        '1 minute'\n    );\n    return config;\n}());\n*/\n"
        },
        "403cf226-6051-4368-8b72-9ba14f9a5140": {
          "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from VKontakte",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "VKontakte Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.first_name),\n        field(\"givenName\", rawProfile.first_name),\n        field(\"familyName\", rawProfile.last_name),\n        field(\"photoUrl\", rawProfile.photo_50),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "424da748-82cc-4b54-be6f-82bd64d82a74": {
          "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Yahoo",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Yahoo Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.locale)))\n"
        },
        "472534ec-a25f-468d-a606-3fb1935190df": {
          "_id": "472534ec-a25f-468d-a606-3fb1935190df",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from WeChat",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "WeChat Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.openid),\n        field(\"displayName\", rawProfile.nickname),\n        field(\"photoUrl\", rawProfile.headimgurl),\n        field(\"username\", rawProfile.nickname)))\n"
        },
        "484e6246-dbc6-4288-97e6-54e55431402e": {
          "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Apple",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Apple Profile Normalization",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n *\n * In some common default configurations, the following keys are required to be not empty:\n * username, givenName, familyName, email.\n *\n * From RFC4517: A value of the Directory String syntax is a string of one or more\n * arbitrary characters from the Universal Character Set (UCS).\n * A zero-length character string is not permitted.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nString email = \"change@me.com\"\nString subjectId = rawProfile.sub\nString firstName = \" \"\nString lastName = \" \"\nString username = subjectId\nString name\n\nif (rawProfile.isDefined(\"email\") && rawProfile.email.isNotNull()){ // User can elect to not share their email\n    email = rawProfile.email.asString()\n    username = email\n}\nif (rawProfile.isDefined(\"name\") && rawProfile.name.isNotNull()) {\n    if (rawProfile.name.isDefined(\"firstName\") && rawProfile.name.firstName.isNotNull()) {\n        firstName = rawProfile.name.firstName.asString()\n    }\n    if (rawProfile.name.isDefined(\"lastName\") && rawProfile.name.lastName.isNotNull()) {\n        lastName = rawProfile.name.lastName.asString()\n    }\n}\n\nname = (firstName?.trim() ? firstName : \"\") + (lastName?.trim() ? ((firstName?.trim() ? \" \" : \"\") + lastName) : \"\")\nname =  (!name?.trim()) ? \" \" : name\n\nreturn json(object(\n        field(\"id\", subjectId),\n        field(\"displayName\", name),\n        field(\"email\", email),\n        field(\"givenName\", firstName),\n        field(\"familyName\", lastName),\n        field(\"username\", username)))\n"
        },
        "58c824ae-84ed-4724-82cd-db128fc3f6c": {
          "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Converts a normalized social profile into a managed user",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Normalized Profile to Managed User",
          "script": "/*\n * Copyright 2020-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue managedUser = json(object(\n        field(\"givenName\", normalizedProfile.givenName),\n        field(\"sn\", normalizedProfile.familyName),\n        field(\"mail\", normalizedProfile.email),\n        field(\"userName\", normalizedProfile.username)))\n\nif (normalizedProfile.postalAddress.isNotNull()) managedUser.put(\"postalAddress\", normalizedProfile.postalAddress)\nif (normalizedProfile.addressLocality.isNotNull()) managedUser.put(\"city\", normalizedProfile.addressLocality)\nif (normalizedProfile.addressRegion.isNotNull()) managedUser.put(\"stateProvince\", normalizedProfile.addressRegion)\nif (normalizedProfile.postalCode.isNotNull()) managedUser.put(\"postalCode\", normalizedProfile.postalCode)\nif (normalizedProfile.country.isNotNull()) managedUser.put(\"country\", normalizedProfile.country)\nif (normalizedProfile.phone.isNotNull()) managedUser.put(\"telephoneNumber\", normalizedProfile.phone)\n\n// if the givenName and familyName is null or empty\n// then add a boolean flag to the shared state to indicate names are not present\n// this could be used elsewhere\n// for eg. this could be used in a scripted decision node to by-pass patching\n// the user object with blank values when givenName  and familyName is not present\nboolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())\nboolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())\nsharedState.put(\"nameEmptyOrNull\", noGivenName && noFamilyName)\n\n\nreturn managedUser\n"
        },
        "58d29080-4563-480b-89bb-1e7719776a21": {
          "_id": "58d29080-4563-480b-89bb-1e7719776a21",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Google",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Google Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.sub),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.given_name),\n        field(\"familyName\", rawProfile.family_name),\n        field(\"photoUrl\", rawProfile.picture),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email),\n        field(\"locale\", rawProfile.locale)))\n"
        },
        "5e854779-6ec1-4c39-aeba-0477e0986646": {
          "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
          "context": "CONFIG_PROVIDER_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Script to provide values for a config provider node",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Config Provider Node Script",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/**\n * The following script is a simplified template for understanding how to build\n * up a config Map object with custom values. The Config Provider Node will then\n * provide this config Map to the desired node type. It is important that the Map\n * you build here is named 'config'.\n *\n * Defined variables:\n *\n * nodeState - Node State (1)\n *           Always present, this represents the current values stored in the node state.\n *\n * idRepository - Profile Data (2)\n *           Always present, a repository to retrieve user information.\n *\n * secrets - Credentials and Secrets (3)\n *           Always present, an interface to access the Secrets API from a scripting context.\n *\n * requestHeaders (4) - Map (5)\n *           Always present, an object that provides methods for accessing headers in the login request.\n *\n * logger - Debug Logging (6)\n *          Always present, the debug logger instance.\n *\n * httpClient - HTTP Client (7)\n *          Always present, the HTTP client that can be used to make external HTTP requests.\n *\n * realm - String (primitive).\n *          Always present, the name of the realm the user is authenticating to.\n *\n * existingSession - Map<String, String> (5)\n *          Present if the request contains the session cookie, the user's session object. The returned map from\n *          SSOToken.getProperties() (8)\n *\n * requestParameters - Map (5)\n *          Always present, the object that contains the authentication request parameters.\n *\n *\n * Outputs:\n *\n * config - Map (5)\n *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the\n *           associated node selected in the ConfigProviderNode.\n *\n * Reference:\n * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState\n * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo\n * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets\n * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.\n * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html\n * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n */\n\nconfig = {\n    \"key0\": {\"subKey\": \"value0\"},\n    \"key1\": \"value1\"\n};\n"
        },
        "69f06e63-128c-4e2f-af52-079a8a6f448b": {
          "_id": "69f06e63-128c-4e2f-af52-079a8a6f448b",
          "context": "SAML2_SP_ADAPTER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 SP Adapter",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 SP Adapter Script",
          "script": "/*\n * Copyright 2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * The script has these top level functions that could be executed during a SAML2 flow.\n *      - preSingleSignOnRequest\n *      - preSingleSignOnProcess\n *      - postSingleSignOnSuccess\n *      - postSingleSignOnFailure\n *      - postNewNameIDSuccess\n *      - postTerminateNameIDSuccess\n *      - preSingleLogoutProcess\n *      - postSingleLogoutSuccess\n *\n * Please see the JavaDoc for the interface for more information about these methods.\n * https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/org/forgerock/openam/saml2/plugins/SPAdapter.html\n * Note that the initialize method is not supported in the scripts.\n *\n * Defined variables. Check the documentation on the respective functions for the variables available to it.\n *\n * hostedEntityId - String\n *     Entity ID for the hosted IDP\n * realm - String\n *     Realm of the hosted IDP\n * idpEntityId - String\n *     The entity ID for the Identity Provider for which the sign-on request will be sent.\n * request - HttpServletRequest (1)\n *     Servlet request object\n * response - HttpServletResponse (2)\n *     Servlet response object\n * authnRequest - AuthnRequest (3)\n *     The authentication request sent that is sent from the Service Provider.\n * session - SSOToken (4)\n *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.\n * res - Response (5)\n *     The SSO Response received from the Identity Provider.\n * profile - String\n *     The protocol profile that is used, this will be one of the following values from SAML2Constants (6):\n *          - SAML2Constants.HTTP_POST\n *          - SAML2Constants.HTTP_ARTIFACT\n *          - SAML2Constants.PAOS\n * out - PrintWriter (7)\n *     The PrintWriter that can be used to write to.\n * isFederation - boolean\n *     Set to true if using federation, otherwise false.\n * failureCode - int\n *     An integer holding the failure code when an error has occurred. For potential values see SPAdapter.\n * userId - String\n *     The unique universal ID of the user with whom the new name identifier request was performed.\n * idRequest - ManageNameIDRequest (8)\n *     The new name identifier request, this will be null if the request object is not available\n * idResponse - ManageNameIDResponse (9)\n *     The new name identifier response, this will be null if the response object is not available\n * binding - String\n *     The binding used for the new name identifier request. This will be one of the following values:\n *          - SAML2Constants.SOAP\n *          - SAML2Constants.HTTP_REDIRECT\n * logoutRequest - LogoutRequest (10)\n *     The single logout request.\n * logoutResponse - LogoutResponse (11)\n *     The single logout response.\n * spAdapterScriptHelper - SpAdapterScriptHelper (12)\n *     An instance of SpAdapterScriptHelper containing helper methods. See Javadoc for more details.\n * logger - Logger instance\n *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *     Corresponding log files will be prefixed with: scripts.<script name>\n *\n * Throws SAML2Exception (13):\n *     for any exceptions occurring in the adapter. The federation process will continue\n *\n * Class reference:\n * (1) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.\n * (2) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.\n * (3) AuthnRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.\n * (4) SSOToken - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/iplanet/sso/SSOToken.html.\n * (5) Response - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/Response.html\n * (6) SAML2Constants - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Constants.html\n * (7) PrintWriter - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/PrintWriter.html\n * (8) ManageNameIDRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDRequest.html\n * (9) ManageNameIDResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/ManageNameIDResponse.html\n * (10) LogoutRequest - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutRequest.html\n * (11) LogoutResponse - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/protocol/LogoutResponse.html\n * (12) SpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/plugins/scripted/SpAdapterScriptHelper.html.\n * (13) SAML2Exception - https://backstage.forgerock.com/docs/am/7.3/_attachments/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.\n */\n\n/*\n * Template/default script for SAML2 SP Adapter scripted plugin.\n */\n\n/*\n * Available variables for preSingleSignOnRequest:\n *     hostedEntityId\n *     idpEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleSignOnRequest() {\n}\n\n/*\n * Available variables for preSingleSignOnProcess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     res\n *     profile\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleSignOnProcess() {\n}\n\n/*\n * Available variables for postSingleSignOnSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     out\n *     session\n *     authnRequest\n *     res\n *     profile\n *     isFederation\n *     spAdapterScriptHelper\n *     logger\n *\n * Return - true if response is being redirected, false if not. Default to false.\n */\nfunction postSingleSignOnSuccess() {\n    return false;\n}\n\n/*\n * Available variables for postSingleSignOnFailure:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     authnRequest\n *     res\n *     profile\n *     failureCode\n *     spAdapterScriptHelper\n *     logger\n *\n * Return - true if response is being redirected, false if not. Default to false.\n */\nfunction postSingleSignOnFailure() {\n    return false;\n}\n\n/*\n * Available variables for postNewNameIDSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     idRequest\n *     idResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postNewNameIDSuccess() {\n}\n\n/*\n * Available variables for postTerminateNameIDSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     idRequest\n *     idResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postTerminateNameIDSuccess() {\n}\n\n/*\n * Available variables for preSingleLogoutProcess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     logoutRequest\n *     logoutResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction preSingleLogoutProcess() {\n}\n\n/*\n * Available variables for postSingleLogoutSuccess:\n *     hostedEntityId\n *     realm\n *     request\n *     response\n *     userId\n *     logoutRequest\n *     logoutResponse\n *     binding\n *     spAdapterScriptHelper\n *     logger\n */\nfunction postSingleLogoutSuccess() {\n}\n"
        },
        "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30": {
          "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Amazon",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Amazon Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.user_id),\n        field(\"displayName\", rawProfile.name),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "6c49bebe-3a62-11ed-a261-0242ac120002": {
          "_id": "6c49bebe-3a62-11ed-a261-0242ac120002",
          "context": "LIBRARY",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global library script to be referenced from other scripts",
          "evaluatorVersion": "2.0",
          "exports": [
            {
              "arity": 2,
              "id": "logError",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logWarning",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logInfo",
              "type": "Function"
            },
            {
              "arity": 2,
              "id": "logDebug",
              "type": "Function"
            }
          ],
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Library Script",
          "script": "/*\n * Copyright 2022-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This is an example library script with methods that can be used in other scripts.\n * To reference it, use the following:\n *\n * var library = require(\"Library Script\");\n *\n * library.logError(logger, \"Error message\");\n * library.logDebug(logger, \"Debug message\");\n */\n\nfunction logError(log, errorMessage) {\n  log.error(errorMessage);\n}\n\nfunction logWarning(log, warningMessage) {\n  log.warn(warningMessage);\n}\n\nexports.logError = logError;\nexports.logWarning = logWarning;\n\n// Alternatively, exports can be declared using an inline arrow function\n\nexports.logInfo = (log, infoMessage) => log.info(infoMessage);\nexports.logDebug = (log, debugMessage) => log.debug(debugMessage);\n"
        },
        "703dab1a-1921-4981-98dd-b8e5349d8548": {
          "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
          "context": "AUTHENTICATION_SERVER_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for server side Device Id (Match) Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Device Id (Match) - Server Side",
          "script": "/*\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n *\n * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved\n *\n * The contents of this file are subject to the terms\n * of the Common Development and Distribution License\n * (the License). You may not use this file except in\n * compliance with the License.\n *\n * You can obtain a copy of the License at\n * https://opensso.dev.java.net/public/CDDLv1.0.html or\n * opensso/legal/CDDLv1.0.txt\n * See the License for the specific language governing\n * permission and limitations under the License.\n *\n * When distributing Covered Code, include this CDDL\n * Header Notice in each file and include the License file\n * at opensso/legal/CDDLv1.0.txt.\n * If applicable, add the following below the CDDL Header,\n * with the fields enclosed by brackets [] replaced by\n * your own identifying information:\n * \"Portions Copyrighted [year] [name of copyright owner]\"\n *\n */\n/*\n * Portions Copyrighted 2013 Syntegrity.\n * Portions Copyrighted 2013-2018 ForgeRock AS.\n */\n\nvar ScalarComparator = {}, ScreenComparator = {}, MultiValueComparator = {}, UserAgentComparator = {}, GeolocationComparator = {};\n\nvar config = {\n    profileExpiration: 30,              //in days\n    maxProfilesAllowed: 5,\n    maxPenaltyPoints: 0,\n    attributes: {\n        screen: {\n            required: true,\n            comparator: ScreenComparator,\n            args: {\n                penaltyPoints: 50\n            }\n        },\n        plugins: {\n            installedPlugins: {\n                required: false,\n                comparator: MultiValueComparator,\n                args: {\n                    maxPercentageDifference: 10,\n                    maxDifferences: 5,\n                    penaltyPoints: 100\n                }\n            }\n        },\n        fonts: {\n            installedFonts: {\n                required: false,\n                comparator: MultiValueComparator,\n                args: {\n                    maxPercentageDifference: 10,\n                    maxDifferences: 5,\n                    penaltyPoints: 100\n                }\n            }\n        },\n        timezone: {\n            timezone: {\n                required: false,\n                comparator: ScalarComparator,\n                args: {\n                    penaltyPoints: 100\n                }\n            }\n        },\n        userAgent: {\n            required: true,\n            comparator: UserAgentComparator,\n            args: {\n                ignoreVersion: true,\n                penaltyPoints: 100\n            }\n        },\n        geolocation: {\n            required: false,\n            comparator: GeolocationComparator,\n            args: {\n                allowedRange: 100,            //in miles\n                penaltyPoints: 100\n            }\n        }\n    }\n};\n\n//---------------------------------------------------------------------------//\n//                           Comparator functions                            //\n//---------------------------------------------------------------------------//\n\nvar all, any, calculateDistance, calculateIntersection, calculatePercentage, nullOrUndefined, splitAndTrim,\n    undefinedLocation;\n\n// ComparisonResult\n\n/**\n * Constructs an instance of a ComparisonResult with the given penalty points.\n *\n * @param penaltyPoints (Number) The penalty points for the comparison (defaults to 0).\n * @param additionalInfoInCurrentValue (boolean) Whether the current value contains more information\n *                                               than the stored value (defaults to false).\n */\nfunction ComparisonResult() {\n\n    var penaltyPoints = 0,\n        additionalInfoInCurrentValue = false;\n\n    if (arguments[0] !== undefined && arguments[1] !== undefined) {\n        penaltyPoints = arguments[0];\n        additionalInfoInCurrentValue = arguments[1];\n    }\n\n    if (arguments[0] !== undefined && arguments[1] === undefined) {\n        if (typeof(arguments[0]) === \"boolean\") {\n            additionalInfoInCurrentValue = arguments[0];\n        } else {\n            penaltyPoints = arguments[0];\n        }\n    }\n\n    this.penaltyPoints = penaltyPoints;\n    this.additionalInfoInCurrentValue = additionalInfoInCurrentValue;\n\n}\n\nComparisonResult.ZERO_PENALTY_POINTS = new ComparisonResult(0);\n\n/**\n * Static method for functional programming.\n *\n * @return boolean true if comparisonResult.isSuccessful().\n */\nComparisonResult.isSuccessful =  function(comparisonResult) {\n    return comparisonResult.isSuccessful();\n};\n\n\n/**\n * Static method for functional programming.\n *\n * @return boolean true if comparisonResult.additionalInfoInCurrentValue.\n */\nComparisonResult.additionalInfoInCurrentValue =  function(comparisonResult) {\n    return comparisonResult.additionalInfoInCurrentValue;\n};\n\n/**\n * Comparison function that can be provided as an argument to array.sort\n */\nComparisonResult.compare = function(first, second) {\n    if (nullOrUndefined(first) && nullOrUndefined(second)) {\n        return 0;\n    } else if (nullOrUndefined(first)) {\n        return -1;\n    } else if (nullOrUndefined(second)) {\n        return 1;\n    } else {\n        if (first.penaltyPoints !== second.penaltyPoints) {\n            return first.penaltyPoints - second.penaltyPoints;\n        } else {\n            return (first.additionalInfoInCurrentValue ? 1 : 0) - (second.additionalInfoInCurrentValue ? 1 : 0);\n        }\n    }\n};\n\n/**\n * Amalgamates the given ComparisonResult into this ComparisonResult.\n *\n * @param comparisonResult The ComparisonResult to include.\n */\nComparisonResult.prototype.addComparisonResult = function(comparisonResult) {\n    this.penaltyPoints += comparisonResult.penaltyPoints;\n    if (comparisonResult.additionalInfoInCurrentValue) {\n        this.additionalInfoInCurrentValue = comparisonResult.additionalInfoInCurrentValue;\n    }\n};\n\n/**\n * Returns true if no penalty points have been assigned for the comparison.\n *\n * @return boolean true if the comparison was successful.\n */\nComparisonResult.prototype.isSuccessful = function() {\n    return nullOrUndefined(this.penaltyPoints) || this.penaltyPoints === 0;\n};\n\n/**\n * Compares two simple objects (String|Number) and if they are equal then returns a ComparisonResult with zero\n * penalty points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue (String|Number) The current value.\n * @param storedValue (String|Number) The stored value.\n * @param config: {\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return ComparisonResult.\n */\nScalarComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"StringComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"StringComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"StringComparator.compare:config: \" + JSON.stringify(config));\n    }\n    if (config.penaltyPoints === 0) {\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (!nullOrUndefined(storedValue)) {\n        if (nullOrUndefined(currentValue) || currentValue !== storedValue) {\n            return new ComparisonResult(config.penaltyPoints);\n        }\n    } else if (!nullOrUndefined(currentValue)) {\n        return new ComparisonResult(true);\n    }\n\n    return ComparisonResult.ZERO_PENALTY_POINTS;\n};\n\n/**\n * Compares two screens and if they are equal then returns a ComparisonResult with zero penalty points assigned,\n * otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue: {\n *            \"screenWidth\": (Number) The current client screen width.\n *            \"screenHeight\": (Number) The current client screen height.\n *            \"screenColourDepth\": (Number) The current client screen colour depth.\n *        }\n * @param storedValue: {\n *            \"screenWidth\": (Number) The stored client screen width.\n *            \"screenHeight\": (Number) The stored client screen height.\n *            \"screenColourDepth\": (Number) The stored client screen colour depth.\n *        }\n * @param config: {\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return ComparisonResult\n */\nScreenComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"ScreenComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"ScreenComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"ScreenComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    if (nullOrUndefined(currentValue)) {\n        currentValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};\n    }\n    if (nullOrUndefined(storedValue)) {\n        storedValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};\n    }\n\n    var comparisonResults = [\n        ScalarComparator.compare(currentValue.screenWidth, storedValue.screenWidth, config),\n        ScalarComparator.compare(currentValue.screenHeight, storedValue.screenHeight, config),\n        ScalarComparator.compare(currentValue.screenColourDepth, storedValue.screenColourDepth, config)];\n\n    if (all(comparisonResults, ComparisonResult.isSuccessful)) {\n        return new ComparisonResult(any(comparisonResults, ComparisonResult.additionalInfoInCurrentValue));\n    } else {\n        return new ComparisonResult(config.penaltyPoints);\n    }\n};\n\n/**\n * Splits both values using delimiter, trims every value and compares collections of values.\n * Returns zero-result for same multi-value attributes.\n *\n * If collections are not same checks if number of differences is less or equal maxDifferences or\n * percentage of difference is less or equal maxPercentageDifference.\n *\n * If yes then returns zero-result with additional info, else returns penaltyPoints-result.\n *\n * @param currentValue: (String) The current value.\n * @param storedValue: (String) The stored value.\n * @param config: {\n *            \"maxPercentageDifference\": (Number) The max difference percentage in the values,\n *                                                before the penalty is assigned.\n *            \"maxDifferences\": (Number) The max number of differences in the values,\n *                                       before the penalty points are assigned.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n  *        }\n * @return ComparisonResult\n */\nMultiValueComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"MultiValueComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"MultiValueComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"MultiValueComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    var delimiter = \";\",\n        currentValues = splitAndTrim(currentValue, delimiter),\n        storedValues = splitAndTrim(storedValue, delimiter),\n        maxNumberOfElements = Math.max(currentValues.length, storedValues.length),\n        numberOfTheSameElements = calculateIntersection(currentValues, storedValues).length,\n        numberOfDifferences = maxNumberOfElements - numberOfTheSameElements,\n        percentageOfDifferences = calculatePercentage(numberOfDifferences, maxNumberOfElements);\n\n    if (nullOrUndefined(storedValue) && !nullOrUndefined(currentValue)) {\n        return new ComparisonResult(true);\n    }\n\n    if (logger.messageEnabled()) {\n        logger.message(numberOfTheSameElements + \" of \" + maxNumberOfElements + \" are same\");\n    }\n\n    if (maxNumberOfElements === 0) {\n        logger.message(\"Ignored because no attributes found in both profiles\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (numberOfTheSameElements === maxNumberOfElements) {\n        logger.message(\"Ignored because all attributes are same\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (numberOfDifferences > config.maxDifferences) {\n        if (logger.messageEnabled()) {\n            logger.message(\"Would be ignored if not more than \" + config.maxDifferences + \" differences\");\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n\n    if (percentageOfDifferences > config.maxPercentageDifference) {\n        if (logger.messageEnabled()) {\n            logger.message(percentageOfDifferences + \" percents are different\");\n            logger.message(\"Would be ignored if not more than \" + config.maxPercentageDifference + \" percent\");\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n\n    if (logger.messageEnabled()) {\n        logger.message(\"Ignored because number of differences(\" + numberOfDifferences + \") not more than \"\n            + config.maxDifferences);\n        logger.message(percentageOfDifferences + \" percents are different\");\n        logger.message(\"Ignored because not more than \" + config.maxPercentageDifference + \" percent\");\n    }\n    return new ComparisonResult(true);\n};\n\n/**\n * Compares two User Agent Strings and if they are equal then returns a ComparisonResult with zero penalty\n * points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.\n *\n * @param currentValue (String) The current value.\n * @param storedValue (String) The stored value.\n * @param config: {\n *            \"ignoreVersion\": (boolean) If the version numbers in the User Agent Strings should be ignore\n *                                       in the comparison.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n *        }\n * @return A ComparisonResult.\n */\nUserAgentComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"UserAgentComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"UserAgentComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"UserAgentComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    if (config.ignoreVersion) {\n        // remove version number\n        currentValue = nullOrUndefined(currentValue) ? null : currentValue.replace(/[\\d\\.]+/g, \"\").trim();\n        storedValue = nullOrUndefined(storedValue) ? null : storedValue.replace(/[\\d\\.]+/g, \"\").trim();\n    }\n\n    return ScalarComparator.compare(currentValue, storedValue, config);\n};\n\n/**\n * Compares two locations, taking into account a degree of difference.\n *\n * @param currentValue: {\n *            \"latitude\": (Number) The current latitude.\n *            \"longitude\": (Number) The current longitude.\n *        }\n * @param storedValue: {\n *            \"latitude\": (Number) The stored latitude.\n *            \"longitude\": (Number) The stored longitude.\n *        }\n * @param config: {\n *            \"allowedRange\": (Number) The max difference allowed in the two locations, before the penalty is assigned.\n *            \"penaltyPoints\": (Number) The number of penalty points.\n*         }\n * @return ComparisonResult\n */\nGeolocationComparator.compare = function (currentValue, storedValue, config) {\n    if (logger.messageEnabled()) {\n        logger.message(\"GeolocationComparator.compare:currentValue: \" + JSON.stringify(currentValue));\n        logger.message(\"GeolocationComparator.compare:storedValue: \" + JSON.stringify(storedValue));\n        logger.message(\"GeolocationComparator.compare:config: \" + JSON.stringify(config));\n    }\n\n    // Check for undefined stored or current locations\n\n    if (undefinedLocation(currentValue) && undefinedLocation(storedValue)) {\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n    if (undefinedLocation(currentValue) && !undefinedLocation(storedValue)) {\n        return new ComparisonResult(config.penaltyPoints);\n    }\n    if (!undefinedLocation(currentValue) && undefinedLocation(storedValue)) {\n        return new ComparisonResult(true);\n    }\n\n    // Both locations defined, therefore perform comparison\n\n    var distance = calculateDistance(currentValue, storedValue);\n\n    if (logger.messageEnabled()) {\n        logger.message(\"Distance between (\" + currentValue.latitude + \",\" + currentValue.longitude + \") and (\" +\n            storedValue.latitude + \",\" + storedValue.longitude + \") is \" + distance + \" miles\");\n    }\n\n    if (parseFloat(distance.toPrecision(5)) === 0) {\n        logger.message(\"Location is the same\");\n        return ComparisonResult.ZERO_PENALTY_POINTS;\n    }\n\n    if (distance <= config.allowedRange) {\n        if (logger.messageEnabled()) {\n            logger.message(\"Tolerated because distance not more then \" + config.allowedRange);\n        }\n        return new ComparisonResult(true);\n    } else {\n        if (logger.messageEnabled()) {\n            logger.message(\"Would be ignored if distance not more then \" + config.allowedRange);\n        }\n        return new ComparisonResult(config.penaltyPoints);\n    }\n};\n\n\n//---------------------------------------------------------------------------//\n//                    Device Print Logic - DO NOT MODIFY                     //\n//---------------------------------------------------------------------------//\n\n// Utility functions\n\n/**\n * Returns true if evaluating function f on each element of the Array a returns true.\n *\n * @param a: (Array) The array of elements to evaluate\n * @param f: (Function) A single argument function for mapping elements of the array to boolean.\n * @return boolean.\n */\nall = function(a, f) {\n    var i;\n    for (i = 0; i < a.length; i++) {\n        if (f(a[i]) === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Returns true if evaluating function f on any element of the Array a returns true.\n *\n * @param a: (Array) The array of elements to evaluate\n * @param f: (Function) A single argument function for mapping elements of the array to boolean.\n * @return boolean.\n */\nany = function(a, f) {\n    var i;\n    for (i = 0; i < a.length; i++) {\n        if (f(a[i]) === true) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Returns true if the provided location is null or has undefined longitude or latitude values.\n *\n * @param location: {\n *            \"latitude\": (Number) The latitude.\n *            \"longitude\": (Number) The longitude.\n *        }\n * @return boolean\n */\nundefinedLocation = function(location) {\n    return nullOrUndefined(location) || nullOrUndefined(location.latitude) || nullOrUndefined(location.longitude);\n};\n\n/**\n * Returns true if the provided value is null or undefined.\n *\n * @param value: a value of any type\n * @return boolean\n */\nnullOrUndefined = function(value) {\n    return value === null || value === undefined;\n};\n\n/**\n * Calculates the distances between the two locations.\n *\n * @param first: {\n *            \"latitude\": (Number) The first latitude.\n *            \"longitude\": (Number) The first longitude.\n *        }\n * @param second: {\n *            \"latitude\": (Number) The second latitude.\n *            \"longitude\": (Number) The second longitude.\n *        }\n * @return Number The distance between the two locations.\n */\ncalculateDistance = function(first, second) {\n    var factor = (Math.PI / 180),\n        theta,\n        dist;\n    function degreesToRadians(degrees) {\n        return degrees * factor;\n    }\n    function radiansToDegrees(radians) {\n        return radians / factor;\n    }\n    theta = first.longitude - second.longitude;\n    dist = Math.sin(degreesToRadians(first.latitude)) * Math.sin(degreesToRadians(second.latitude))\n        + Math.cos(degreesToRadians(first.latitude)) * Math.cos(degreesToRadians(second.latitude))\n        * Math.cos(degreesToRadians(theta));\n    dist = Math.acos(dist);\n    dist = radiansToDegrees(dist);\n    dist = dist * 60 * 1.1515;\n    return dist;\n};\n\n/**\n * Converts a String holding a delimited sequence of values into an array.\n *\n * @param text (String) The String representation of a delimited sequence of values.\n * @param delimiter (String) The character delimiting values within the text String.\n * @return (Array) The comma separated values.\n */\nsplitAndTrim = function(text, delimiter) {\n\n    var results = [],\n        i,\n        values,\n        value;\n    if (text === null) {\n        return results;\n    }\n\n    values = text.split(delimiter);\n    for (i = 0; i < values.length; i++) {\n        value = values[i].trim();\n        if (value !== \"\") {\n            results.push(value);\n        }\n    }\n\n    return results;\n};\n\n/**\n * Converts value to a percentage of range.\n *\n * @param value (Number) The actual number to be converted to a percentage.\n * @param range (Number) The total number of values (i.e. represents 100%).\n * @return (Number) The percentage.\n */\ncalculatePercentage = function(value, range) {\n    if (range === 0) {\n        return 0;\n    }\n    return parseFloat((value / range).toPrecision(2)) * 100;\n};\n\n/**\n * Creates a new array containing only those elements found in both arrays received as arguments.\n *\n * @param first (Array) The first array.\n * @param second (Array) The second array.\n * @return (Array) The elements that found in first and second.\n */\ncalculateIntersection = function(first, second) {\n    return first.filter(function(element) {\n        return second.indexOf(element) !== -1;\n    });\n};\n\nfunction getValue(obj, attributePath) {\n    var value = obj,\n        i;\n    for (i = 0; i < attributePath.length; i++) {\n        if (value === undefined) {\n            return null;\n        }\n        value = value[attributePath[i]];\n    }\n    return value;\n}\n\n\nfunction isLeafNode(attributeConfig) {\n    return attributeConfig.comparator !== undefined;\n}\n\nfunction getAttributePaths(attributeConfig, attributePath) {\n\n    var attributePaths = [],\n        attributeName,\n        attrPaths,\n        attrPath,\n        i;\n\n    for (attributeName in attributeConfig) {\n        if (attributeConfig.hasOwnProperty(attributeName)) {\n\n            if (isLeafNode(attributeConfig[attributeName])) {\n                attrPath = attributePath.slice();\n                attrPath.push(attributeName);\n                attributePaths.push(attrPath);\n            } else {\n                attrPath = attributePath.slice();\n                attrPath.push(attributeName);\n                attrPaths = getAttributePaths(attributeConfig[attributeName], attrPath);\n                for (i = 0; i < attrPaths.length; i++) {\n                    attributePaths.push(attrPaths[i]);\n                }\n            }\n        }\n    }\n\n    return attributePaths;\n}\n\nfunction getDevicePrintAttributePaths(attributeConfig) {\n    return getAttributePaths(attributeConfig, []);\n}\n\nfunction hasRequiredAttributes(devicePrint, attributeConfig) {\n\n    var attributePaths = getDevicePrintAttributePaths(attributeConfig),\n        i,\n        attrValue,\n        attrConfig;\n\n    for (i = 0; i < attributePaths.length; i++) {\n\n        attrValue = getValue(devicePrint, attributePaths[i]);\n        attrConfig = getValue(attributeConfig, attributePaths[i]);\n\n        if (attrConfig.required && attrValue === undefined) {\n            logger.warning(\"Device Print profile missing required attribute, \" + attributePaths[i]);\n            return false;\n        }\n    }\n\n    logger.message(\"device print has required attributes\");\n    return true;\n}\n\nfunction compareDevicePrintProfiles(attributeConfig, devicePrint, devicePrintProfiles, maxPenaltyPoints) {\n\n    var attributePaths = getDevicePrintAttributePaths(attributeConfig),\n        dao = sharedState.get('_DeviceIdDao'),\n        results,\n        j,\n        aggregatedComparisonResult,\n        i,\n        currentValue,\n        storedValue,\n        attrConfig,\n        comparisonResult,\n        selectedComparisonResult,\n        selectedProfile,\n        curDevicePrintProfile,\n        vals;\n\n    results = [];\n    for (j = 0; j < devicePrintProfiles.length; j++) {\n        curDevicePrintProfile = JSON.parse(org.forgerock.json.JsonValue.json(devicePrintProfiles[j]));\n        aggregatedComparisonResult = new ComparisonResult();\n        for (i = 0; i < attributePaths.length; i++) {\n\n            currentValue = getValue(devicePrint, attributePaths[i]);\n            storedValue = getValue(curDevicePrintProfile.devicePrint, attributePaths[i]);\n            attrConfig = getValue(attributeConfig, attributePaths[i]);\n\n            if (storedValue === null) {\n                comparisonResult = new ComparisonResult(attrConfig.penaltyPoints);\n            } else {\n                comparisonResult = attrConfig.comparator.compare(currentValue, storedValue, attrConfig.args);\n            }\n\n            if (logger.messageEnabled()) {\n                logger.message(\"Comparing attribute path: \" + attributePaths[i]\n                    + \", Comparison result: successful=\" + comparisonResult.isSuccessful() + \", penaltyPoints=\"\n                    + comparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n                    + comparisonResult.additionalInfoInCurrentValue);\n            }\n            aggregatedComparisonResult.addComparisonResult(comparisonResult);\n        }\n        if (logger.messageEnabled()) {\n            logger.message(\"Aggregated comparison result: successful=\"\n                + aggregatedComparisonResult.isSuccessful() + \", penaltyPoints=\"\n                + aggregatedComparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n                + aggregatedComparisonResult.additionalInfoInCurrentValue);\n        }\n\n        results.push({\n            key: aggregatedComparisonResult,\n            value: devicePrintProfiles[j]\n        });\n    }\n\n    if (results.length === 0) {\n        return null;\n    }\n\n    results.sort(function(a, b) {\n        return ComparisonResult.compare(a.key, b.key);\n    });\n    selectedComparisonResult = results[0].key;\n    if (logger.messageEnabled()) {\n        logger.message(\"Selected comparison result: successful=\" + selectedComparisonResult.isSuccessful()\n            + \", penaltyPoints=\" + selectedComparisonResult.penaltyPoints + \", additionalInfoInCurrentValue=\"\n            + selectedComparisonResult.additionalInfoInCurrentValue);\n    }\n\n    selectedProfile = null;\n    if (selectedComparisonResult.penaltyPoints <= maxPenaltyPoints) {\n        selectedProfile = results[0].value;\n        if (logger.messageEnabled()) {\n            logger.message(\"Selected profile: \" + selectedProfile +\n                \" with \" + selectedComparisonResult.penaltyPoints + \" penalty points\");\n        }\n    }\n\n    if (selectedProfile === null) {\n        return false;\n    }\n\n    /* update profile */\n    selectedProfile.put(\"selectionCounter\",\n        java.lang.Integer.valueOf(parseInt(selectedProfile.get(\"selectionCounter\"), 10) + 1));\n    selectedProfile.put(\"lastSelectedDate\", java.lang.Long.valueOf(new Date().getTime()));\n    selectedProfile.put(\"devicePrint\", devicePrint);\n\n    vals = [];\n    for (i = 0; i < devicePrintProfiles.length; i++) {\n        vals.push(org.forgerock.json.JsonValue.json(devicePrintProfiles[i]));\n    }\n\n    dao.saveDeviceProfiles(username, realm, vals);\n\n    return true;\n}\n\nfunction matchDevicePrint() {\n\n    if (!username) {\n        logger.error(\"Username not set. Cannot compare user's device print profiles.\");\n        authState = FAILED;\n    } else {\n\n        if (logger.messageEnabled()) {\n            logger.message(\"client devicePrint: \" + clientScriptOutputData);\n        }\n\n        var getProfiles = function () {\n\n                function isExpiredProfile(devicePrintProfile) {\n                    var expirationDate = new Date(),\n                        lastSelectedDate;\n                    expirationDate.setDate(expirationDate.getDate() - config.profileExpiration);\n\n                    lastSelectedDate = new Date(devicePrintProfile.lastSelectedDate);\n\n                    return lastSelectedDate < expirationDate;\n                }\n\n                function getNotExpiredProfiles() {\n                    var profile,\n                        dao = sharedState.get('_DeviceIdDao'),\n                        results = [],\n                        profiles,\n                        iter;\n\n                    profiles = dao.getDeviceProfiles(username, realm);\n\n                    if (profiles) {\n                        iter = profiles.iterator();\n\n                        while (iter.hasNext()) {\n                            profile = iter.next().getObject();\n                            if (!isExpiredProfile(profile)) {\n                                results.push(profile);\n                            }\n                        }\n                    }\n                    if (logger.messageEnabled()) {\n                        logger.message(\"stored non-expired profiles: \" + results);\n                    }\n                    return results;\n                }\n\n                return getNotExpiredProfiles();\n            },\n            devicePrint = JSON.parse(clientScriptOutputData),\n            devicePrintProfiles = getProfiles();\n\n        if (!hasRequiredAttributes(devicePrint, config.attributes)) {\n            logger.message(\"devicePrint.hasRequiredAttributes: false\");\n            // Will fail this module but fall-through to next module. Which should be OTP.\n            authState = FAILED;\n        } else if (compareDevicePrintProfiles(config.attributes, devicePrint, devicePrintProfiles, config.maxPenaltyPoints)) {\n            logger.message(\"devicePrint.hasValidProfile: true\");\n            authState = SUCCESS;\n        } else {\n            logger.message(\"devicePrint.hasValidProfile: false\");\n            sharedState.put('devicePrintProfile', JSON.stringify(devicePrint));\n            // Will fail this module but fall-through to next module. Which should be OTP.\n            authState = FAILED;\n        }\n    }\n}\n\nmatchDevicePrint();\n"
        },
        "73cecbfc-dad0-4395-be6a-6858ee3a80e5": {
          "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Microsoft",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Microsoft Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.displayName),\n        field(\"givenName\", rawProfile.givenName),\n        field(\"familyName\", rawProfile.surname),\n        field(\"email\", rawProfile.userPrincipalName),\n        field(\"username\", rawProfile.userPrincipalName)))\n"
        },
        "7e3d7067-d50f-4674-8c76-a3e13a810c33": {
          "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
          "context": "AUTHENTICATION_SERVER_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for server side Scripted Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Module - Server Side",
          "script": "/*\n * Copyright 2015-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nvar START_TIME = 9;  // 9am\nvar END_TIME   = 17; // 5pm\nvar longitude, latitude;\nvar localTime;\n\nlogger.message(\"Starting scripted authentication\");\nlogger.message(\"User: \" + username);\n\nvar userPostalAddress = getUserPostalAddress();\nlogger.message(\"User address: \" + userPostalAddress);\n\ngetLongitudeLatitudeFromUserPostalAddress();\ngetLocalTime();\n\nlogger.message(\"Current time at the users location: \" + localTime.getHours());\nif (localTime.getHours() < START_TIME || localTime.getHours() > END_TIME) {\n    logger.error(\"Login forbidden outside work hours!\");\n    authState = FAILED;\n} else {\n    logger.message(\"Authentication allowed!\");\n    authState = SUCCESS;\n}\n\nfunction getLongitudeLatitudeFromUserPostalAddress() {\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(userPostalAddress));\n      request.setMethod(\"GET\");\n      //the above URI has to be extended with an API_KEY if used in a frequent manner\n      //see documentation: https://developers.google.com/maps/documentation/geocoding/intro\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var geocode = JSON.parse(response.getEntity().getString());\n    var i;\n    for (i = 0; i < geocode.results.length; i++) {\n        var result = geocode.results[i];\n        latitude = result.geometry.location.lat;\n        longitude = result.geometry.location.lng;\n\n           logger.message(\"latitude:\" + latitude + \" longitude:\" + longitude);\n    }\n}\n\nfunction getLocalTime() {\n\n    var now = new Date().getTime() / 1000;\n    var location = \"location=\" + latitude + \",\" + longitude;\n    var timestamp = \"timestamp=\" + now;\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"https://maps.googleapis.com/maps/api/timezone/json?\" + location + \"&\" + timestamp);\n      request.setMethod(\"GET\");\n      //the above URI has to be extended with an API_KEY if used in a frequent manner\n      //see documentation: https://developers.google.com/maps/documentation/timezone/intro\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var timezone = JSON.parse(response.getEntity().getString());\n    var localTimestamp = parseInt(now) + parseInt(timezone.dstOffset) + parseInt(timezone.rawOffset);\n    localTime = new Date(localTimestamp*1000);\n}\n\nfunction getUserPostalAddress() {\n    var userAddressSet = idRepository.getAttribute(username, \"postalAddress\");\n    if (userAddressSet == null || userAddressSet.isEmpty()) {\n        logger.warning(\"No address specified for user: \" + username);\n        return false;\n    }\n    return userAddressSet.iterator().next()\n}\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n}\n"
        },
        "8862ca8f-7770-4af5-a888-ac0df0947f36": {
          "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from LinkedIn",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "LinkedIn Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"givenName\", rawProfile.firstName.localized.get(0)),\n        field(\"familyName\", rawProfile.lastName.localized.get(0)),\n        field(\"photoUrl\", rawProfile.profilePicture.displayImage),\n        field(\"email\", rawProfile.elements.get(0).get(\"handle~\").emailAddress),\n        field(\"username\", rawProfile.elements.get(0).get(\"handle~\").emailAddress)))\n"
        },
        "8e298710-b55e-4085-a464-88a375a4004b": {
          "_id": "8e298710-b55e-4085-a464-88a375a4004b",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Twitter",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Twitter Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id_str),\n        field(\"displayName\", rawProfile.name),\n        field(\"photoUrl\", rawProfile.profile_image_url),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.screen_name)))\n"
        },
        "91d197de-5916-4dca-83b5-9a4df26e7159": {
          "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from WordPress",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "WordPress Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.username),\n        field(\"displayName\", rawProfile.display_name),\n        field(\"photoUrl\", rawProfile.avatar_URL),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.username)))\n"
        },
        "9de3eb62-f131-4fac-a294-7bd170fd4acb": {
          "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
          "context": "POLICY_CONDITION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for Scripted Policy Conditions",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Policy Condition",
          "script": "/*\n * Copyright 2015-2023 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n/**\n * This is a Policy Condition example script. It demonstrates how to access a user's information,\n * use that information in external HTTP calls and make a policy decision based on the outcome.\n */\n\nvar userAddress, userIP, resourceHost;\n\nif (validateAndInitializeParameters()) {\n\n    var countryFromUserAddress = getCountryFromUserAddress();\n    logger.message(\"Country retrieved from user's address: \" + countryFromUserAddress);\n    var countryFromUserIP = getCountryFromUserIP();\n    logger.message(\"Country retrieved from user's IP: \" + countryFromUserIP);\n    var countryFromResourceURI = getCountryFromResourceURI();\n    logger.message(\"Country retrieved from resource URI: \" + countryFromResourceURI);\n\n    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {\n        logger.message(\"Authorization Succeeded\");\n        responseAttributes.put(\"countryOfOrigin\", [countryFromUserAddress]);\n        authorized = true;\n    } else {\n        logger.message(\"Authorization Failed\");\n        authorized = false;\n    }\n\n} else {\n    logger.message(\"Required parameters not found. Authorization Failed.\");\n    authorized = false;\n}\n\n/**\n * Use the user's address to lookup their country of residence.\n *\n * @returns {*} The user's country of residence.\n */\nfunction getCountryFromUserAddress() {\n\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(userAddress));\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var geocode = JSON.parse(response.getEntity().getString());\n    var i;\n    for (i = 0; i < geocode.results.length; i++) {\n        var result = geocode.results[i];\n        var j;\n        for (j = 0; j < result.address_components.length; i++) {\n            if (result.address_components[i].types[0] == \"country\") {\n                return result.address_components[i].long_name;\n            }\n        }\n    }\n}\n\n/**\n * Use the user's IP to lookup the country from which the request originated.\n *\n * @returns {*} The country from which the request originated.\n */\nfunction getCountryFromUserIP() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + userIP);\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity().getString());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Use the requested resource's host name to lookup the country where the resource is hosted.\n *\n * @returns {*} The country in which the resource is hosted.\n */\nfunction getCountryFromResourceURI() {\n    var request = new org.forgerock.http.protocol.Request();\n    request.setUri(\"http://ip-api.com/json/\" + encodeURIComponent(resourceHost));\n      request.setMethod(\"GET\");\n\n    var response = httpClient.send(request).get();\n    logResponse(response);\n\n    var result = JSON.parse(response.getEntity().getString());\n    if (result) {\n        return result.country;\n    }\n}\n\n/**\n * Retrieve and validate the variables required to make the external HTTP calls.\n *\n * @returns {boolean} Will be true if validation was successful.\n */\nfunction validateAndInitializeParameters() {\n    var userAddressSet = identity.getAttribute(\"postalAddress\");\n    if (userAddressSet == null || userAddressSet.isEmpty()) {\n        logger.warning(\"No address specified for user: \" + username);\n        return false;\n    }\n    userAddress = userAddressSet.iterator().next();\n    logger.message(\"User address: \" + userAddress);\n\n    if (!environment) {\n        logger.warning(\"No environment parameters specified in the evaluation request.\");\n        return false;\n    }\n\n    var ipSet = environment.get(\"IP\");\n    if (ipSet == null || ipSet.isEmpty()) {\n        logger.warning(\"No IP specified in the evaluation request environment parameters.\");\n        return false;\n    }\n    userIP = ipSet.iterator().next();\n    logger.message(\"User IP: \" + userIP);\n\n    if (!resourceURI) {\n        logger.warning(\"No resource URI specified.\");\n        return false;\n    }\n    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];\n    logger.message(\"Resource host: \" + resourceHost);\n\n    return true;\n}\n\nfunction logResponse(response) {\n    logger.message(\"User REST Call. Status: \" + response.getStatus() + \", Body: \" + response.getEntity().getString());\n}\n"
        },
        "a7a78773-445b-4eca-bb93-409e86bced81": {
          "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from GitHub",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "GitHub Profile Normalization",
          "script": "/*\n * Copyright 2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.name),\n        field(\"username\", rawProfile.login)))\n"
        },
        "bae1d54a-e97d-4997-aa5d-c027f21af82c": {
          "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Normalizes raw profile data from Facebook",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Facebook Profile Normalization",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nreturn json(object(\n        field(\"id\", rawProfile.id),\n        field(\"displayName\", rawProfile.name),\n        field(\"givenName\", rawProfile.first_name),\n        field(\"familyName\", rawProfile.last_name),\n        field(\"photoUrl\", rawProfile.picture.data.url),\n        field(\"email\", rawProfile.email),\n        field(\"username\", rawProfile.email)))\n"
        },
        "c4f22465-2368-4e27-8013-e6399974fd48": {
          "_id": "c4f22465-2368-4e27-8013-e6399974fd48",
          "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for SAML2 IDP Attribute Mapper",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "SAML2 IDP Attribute Mapper Script",
          "script": "/*\n * Copyright 2021-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.\n *\n * Defined variables:\n * session - SSOToken (1)\n *           The single sign-on session.\n * hostedEntityId - String (primitive).\n *                  The hosted entity ID.\n * remoteEntityId - String (primitive).\n *                  The remote entity ID.\n * realm - String (primitive).\n *         The name of the realm the user is authenticating to.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER\n * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)\n *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.\n *\n * Throws SAML2Exception:\n *      - on failing to map the IDP attributes.\n *\n * Return - a list of SAML Attribute (3) objects.\n *\n * Class reference:\n * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.\n * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.\n * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.\n */\n\n/**\n * Default SAML2 IDP Attribute Mapper.\n */\nfunction getAttributes() {\n    var frJava = JavaImporter(\n        com.sun.identity.saml2.common.SAML2Exception\n    );\n\n    const debugMethod = \"ScriptedIDPAttributeMapper.getAttributes:: \";\n\n    try {\n\n        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {\n            logger.error(debugMethod + \"Invalid session.\");\n            return null;\n        }\n\n        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);\n        logger.message(debugMethod + \"Remote SP attribute map = {}\", configMap);\n        if (configMap == null || configMap.isEmpty()) {\n            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);\n            if (configMap == null || configMap.isEmpty()) {\n                logger.message(debugMethod + \"Configuration map is not defined.\");\n                return null;\n            }\n            logger.message(debugMethod + \"Hosted IDP attribute map = {}\", configMap);\n        }\n\n        var attributes = new java.util.ArrayList();\n        var stringValueMap = new java.util.HashSet();\n        var binaryValueMap;\n        var localAttribute;\n\n        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.\n        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {\n            try {\n                // Resolve attributes to be read from the datastore.\n                var stringAttributes = new java.util.HashSet();\n                var binaryAttributes = new java.util.HashSet();\n                var keyIter = configMap.keySet().iterator();\n                while (keyIter.hasNext()) {\n                    var key = keyIter.next();\n                    localAttribute = configMap.get(key);\n                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                            // add it to the list of attributes to treat as being binary\n                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));\n                        } else {\n                            stringAttributes.add(localAttribute);\n                        }\n                    }\n                }\n\n                if (!stringAttributes.isEmpty()) {\n                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);\n                }\n                if (!binaryAttributes.isEmpty()) {\n                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);\n                }\n            } catch (error) {\n                logger.error(debugMethod + \"Error accessing the datastore. \" + error);\n                //continue to check in ssotoken.\n            }\n        }\n\n        var keyIter = configMap.keySet().iterator();\n        while (keyIter.hasNext()) {\n            var key = keyIter.next()\n            var nameFormat = null;\n            var samlAttribute = key;\n            localAttribute = configMap.get(key);\n            // check if samlAttribute has format nameFormat|samlAttribute\n            var samlAttributes = String(new java.lang.String(samlAttribute));\n            var tokens = samlAttributes.split('|');\n\n            if (tokens.length > 1) {\n                nameFormat = tokens[0];\n                samlAttribute = tokens[1];\n            }\n\n            var attributeValues = new java.util.HashSet();\n            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {\n                // Remove the static flag before using it as the static value\n                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);\n                attributeValues = new java.util.HashSet([localAttribute]);\n                logger.message(debugMethod + \"Adding static value {} for attribute named {}\", localAttribute, samlAttribute);\n            } else {\n                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {\n                    // Remove the flag as not used for lookup\n                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);\n                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,\n                        binaryValueMap);\n                } else {\n                    if (stringValueMap != null && !stringValueMap.isEmpty()) {\n                        attributeValues = stringValueMap.get(localAttribute);\n                    } else {\n                        logger.message(debugMethod + \"{} string value map was empty or null.\", localAttribute);\n                    }\n                }\n\n                // If all else fails, try to get the value from the users ssoToken\n                if (attributeValues == null || attributeValues.isEmpty()) {\n                    logger.message(debugMethod + \"User profile does not have value for {}, checking SSOToken.\", localAttribute);\n                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));\n                }\n            }\n\n            if (attributeValues == null || attributeValues.isEmpty()) {\n                logger.message(debugMethod + \"{} not found in user profile or SSOToken.\", localAttribute);\n            } else {\n                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));\n            }\n        }\n\n        return attributes;\n\n    } catch (error) {\n        logger.error(debugMethod + \"Error mapping IDP attributes. \" + error);\n        throw new frJava.SAML2Exception(error);\n    }\n}\n\ngetAttributes();\n"
        },
        "c735de08-f8f2-4e69-aa4a-2d8d3d438323": {
          "_id": "c735de08-f8f2-4e69-aa4a-2d8d3d438323",
          "context": "OAUTH2_MAY_ACT",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 May Act",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 May Act Script",
          "script": "/*\n * Copyright 2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/**\n * Defined variables:\n * token - The access token to be updated. Mutable object, all changes to the access token will be reflected.\n * logger - always present, corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.\n * scriptName - always present, the display name of the script\n * session - present if the request contains the session cookie, the user's session object\n * requestProperties - always present, contains a map of request properties:\n *                     requestUri - the request URI\n *                     realm - the realm that the request relates to\n *                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n *                     more properties. Please note that these should be handled in accordance with OWASP best\n *                     practices.\n * clientProperties - present if the client specified in the request was identified, contains a map of client\n *                    properties:\n *                    clientId - the client's Uri for the request locale\n *                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n *                                        for the client\n *                    allowedResponseTypes - list of the allowed response types for the client\n *                    allowedScopes - list of the allowed scopes for the client\n *                    customProperties - A map of the custom properties of the client.\n *                                       Lists or maps will be included as sub-maps, e.g:\n *                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n *\n * identity - always present, the identity of the resource owner\n * scopes - always present, the requested scopes\n */\n/*\nimport org.forgerock.json.JsonValue\n\ntoken.setMayAct(\n    JsonValue.json(JsonValue.object(\n        JsonValue.field(\"client_id\", \"myClient\"), \n        JsonValue.field(\"sub\", \"(usr!myActor)\"))))\n*/\n"
        },
        "c827d2b4-3608-4693-868e-bbcf86bd87c7": {
          "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
          "context": "AUTHENTICATION_CLIENT_SIDE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for client side Scripted Authentication Module",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Scripted Module - Client Side",
          "script": "/*\n * Copyright 2016-2022 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n/* Default Authentication client side script to use as a template for new scripts */\n"
        },
        "d22f9a0c-426a-4466-b95e-d0f125b0d5fa": {
          "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
          "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Access Token Modification",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Access Token Modification Script",
          "script": "/*\n * Copyright 2019-2020 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport org.forgerock.http.protocol.Request\nimport org.forgerock.http.protocol.Response\n\nimport com.iplanet.sso.SSOException\n\nimport groovy.json.JsonSlurper\n\n/**\n * Defined variables:\n * accessToken - The access token to be updated. Mutable object, all changes to the access token will be reflected.\n * httpClient - always present, the HTTP client that can be used to make external HTTP requests\n * identity - always present, the identity of the resource owner\n * logger - always present, corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.\n * scopes - always present, the requested scopes\n * session - present if the request contains the session cookie, the user's session object\n * scriptName - always present, the display name of the script\n * requestProperties - always present, contains a map of request properties:\n *                     requestUri - the request URI\n *                     realm - the realm that the request relates to\n *                     requestParams - a map of the request params and/or posted data. Each value is a list of one or\n *                     more properties. Please note that these should be handled in accordance with OWASP best\n *                     practices.\n * clientProperties - present if the client specified in the request was identified, contains a map of client\n *                    properties:\n *                    clientId - the client's Uri for the request locale\n *                    allowedGrantTypes - list of the allowed grant types (org.forgerock.oauth2.core.GrantType)\n *                                        for the client\n *                    allowedResponseTypes - list of the allowed response types for the client\n *                    allowedScopes - list of the allowed scopes for the client\n *                    customProperties - A map of the custom properties of the client.\n *                                       Lists or maps will be included as sub-maps, e.g:\n *                                       testMap[Key1]=Value1 will be returned as testmap -> Key1 -> Value1\n *\n * No return value - changes shall be made to the accessToken parameter directly.\n *\n * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens, and similarly the size of\n * the JWTs if client based OAuth2 tokens are utilised.\n * When adding/updating fields make sure that the token size remains within client/user-agent limits.\n */\n\n/*\n//Field to always include in token\naccessToken.setField(\"hello\", \"world\")\n\n//Obtain additional values by performing a REST call to an external service\ntry {\n    Response response = httpClient.send(new Request()\n            .setUri(\"https://third.party.app/hello.jsp\")\n            .setMethod(\"POST\")\n            .modifyHeaders({ headers -> headers.put(\"Content-Type\", \"application/json;charset=UTF-8\") })\n//          .setEntity('foo=bar&hello=world'))\n            .setEntity([foo: 'bar']))\n            .getOrThrow()\n    if (response.status.successful) {\n        def result = new JsonSlurper().parseText(response.entity.string)\n        accessToken.setFields(result.get(\"updatedFields\"))\n    } else {\n        logger.error(\"Unable to obtain access token modifications: {}, {}\", response.status, response.entity.toString())\n    }\n} catch (InterruptedException ex) {\n    logger.error(\"The request processing was interrupted\", ex)\n    Thread.currentThread().interrupt()\n    //The access token request will fail with HTTP 500 error in this case.\n    throw new RuntimeException(\"Unable to obtain response from \")\n}\n\n//Add new fields containing identity attribute values\ndef attributes = identity.getAttributes([\"mail\", \"telephoneNumber\"].toSet())\naccessToken.setField(\"mail\", attributes[\"mail\"])\naccessToken.setField(\"phone\", attributes[\"telephoneNumber\"])\n\n//Add new fields containing session property values\nif (session != null) { // session is not available for resource owner password credentials grant\n    try {\n        accessToken.setField(\"ipAddress\", session.getProperty(\"Host\"))\n    } catch (SSOException ex) {\n        logger.error(\"Unable to retrieve session property value\", ex)\n    }\n}\n\n// Remove a native field from the token entry, that was set by AM. For complete list of remove* methods see the JavaDoc\n// for org.forgerock.oauth2.core.AccessToken class.\naccessToken.removeTokenName()\n*/\n"
        },
        "da56fe60-8b38-4c46-a405-d6b306d4b336": {
          "_id": "da56fe60-8b38-4c46-a405-d6b306d4b336",
          "context": "OAUTH2_EVALUATE_SCOPE",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Default global script for OAuth2 Scope Evaluation",
          "evaluatorVersion": "1.0",
          "language": "JAVASCRIPT",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "OAuth2 Evaluate Scope Script",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\n/*\n * This script lets you populate the scopes with profile attribute values when the tokeninfo endpoint is called.\n * For example, if one of the scopes is mail, AM sets mail to the resource owner's email address in the token information returned.\n *\n * Defined variables:\n * accessToken - AccessToken (1).\n *               The access token to be updated.\n *               Mutable object, all changes to the access token will be reflected.\n * identity - AMIdentity (2).\n *            The client's identity if present or the resource owner's identity. Can be null.\n * scriptName - String (primitive).\n *              Always present, the display name of the script.\n * logger - Always present, the debug logger instance:\n *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.\n *          Corresponding log files will be prefixed with: scripts.OAUTH2_EVALUATE_SCOPE\n * httpClient - HTTP Client (3).\n *              Always present, the HTTP Client instance:\n *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.\n *\n * Return - a Map<String, Object> of the access token's information (4).\n *\n * Class reference:\n * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.\n * (2) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.\n * (3) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.\n * (4) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html.\n */\n\n/**\n * Default evaluate scope script to use as a template for new scripts.\n */\n\n(function () {\n    var map = new java.util.HashMap();\n    if (identity !== null) {\n        var scopes = accessToken.getScope().toArray();\n        scopes.forEach(function (scope) {\n            var attributes = identity.getAttribute(scope).toArray();\n            map.put(scope, attributes.join(\",\"));\n        });\n    } else {\n        logger.error('identity is null');\n    }\n    return map;\n}());\n"
        },
        "ed685f9f-5909-4726-86e8-22bd38b47663": {
          "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
          "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
          "createdBy": "null",
          "creationDate": 0,
          "default": true,
          "description": "Converts a normalized social profile into an Identity",
          "evaluatorVersion": "1.0",
          "language": "GROOVY",
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "name": "Normalized Profile to Identity",
          "script": "/*\n * Copyright 2021 ForgeRock AS. All Rights Reserved\n *\n * Use of this code requires a commercial software license with ForgeRock AS.\n * or with one of its affiliates. All use shall be exclusively subject\n * to such license between the licensee and ForgeRock AS.\n */\n\nimport static org.forgerock.json.JsonValue.field\nimport static org.forgerock.json.JsonValue.json\nimport static org.forgerock.json.JsonValue.object\n\nimport org.forgerock.json.JsonValue\n\nJsonValue identity = json(object(\n        field(\"givenName\", normalizedProfile.givenName),\n        field(\"sn\", normalizedProfile.familyName),\n        field(\"mail\", normalizedProfile.email),\n        field(\"cn\", normalizedProfile.displayName),\n        field(\"userName\", normalizedProfile.username),\n        field(\"iplanet-am-user-alias-list\", selectedIdp + '-' + normalizedProfile.id.asString())))\n\nreturn identity\n"
        }
      },
      "secrets": {},
      "secretstore": {
        "default-keystore": {
          "_id": "default-keystore",
          "_type": {
            "_id": "KeyStoreSecretStore",
            "collection": true,
            "name": "Keystore"
          },
          "file": "/home/prestonhales/am/security/keystores/keystore.jceks",
          "keyEntryPassword": "entrypass",
          "leaseExpiryDuration": 5,
          "mappings": [],
          "providerName": "SunJCE",
          "storePassword": "storepass",
          "storetype": "JCEKS"
        },
        "default-passwords-store": {
          "_id": "default-passwords-store",
          "_type": {
            "_id": "FileSystemSecretStore",
            "collection": true,
            "name": "File System Secret Volumes"
          },
          "directory": "/home/prestonhales/am/security/secrets/encrypted",
          "format": "ENCRYPTED_PLAIN"
        }
      },
      "service": {
        "SocialIdentityProviders": {
          "_id": "",
          "_type": {
            "_id": "SocialIdentityProviders",
            "collection": false,
            "name": "Social Identity Provider Service"
          },
          "enabled": true,
          "location": "/first/second",
          "nextDescendents": []
        },
        "id-repositories": {
          "_id": "",
          "_type": {
            "_id": "id-repositories",
            "collection": false,
            "name": "sunIdentityRepositoryService"
          },
          "location": "/first/second",
          "nextDescendents": [
            {
              "_id": "embedded",
              "_type": {
                "_id": "LDAPv3ForOpenDS",
                "collection": true,
                "name": "OpenDJ"
              },
              "authentication": {
                "sun-idrepo-ldapv3-config-auth-naming-attr": "uid"
              },
              "cachecontrol": {
                "sun-idrepo-ldapv3-dncache-enabled": true,
                "sun-idrepo-ldapv3-dncache-size": 1500
              },
              "errorhandling": {
                "com.iplanet.am.ldap.connection.delay.between.retries": 1000
              },
              "groupconfig": {
                "sun-idrepo-ldapv3-config-group-attributes": [
                  "dn",
                  "cn",
                  "uniqueMember",
                  "objectclass"
                ],
                "sun-idrepo-ldapv3-config-group-container-name": "ou",
                "sun-idrepo-ldapv3-config-group-container-value": "groups",
                "sun-idrepo-ldapv3-config-group-objectclass": [
                  "top",
                  "groupofuniquenames"
                ],
                "sun-idrepo-ldapv3-config-groups-search-attribute": "cn",
                "sun-idrepo-ldapv3-config-groups-search-filter": "(objectclass=groupOfUniqueNames)",
                "sun-idrepo-ldapv3-config-memberurl": "memberUrl",
                "sun-idrepo-ldapv3-config-uniquemember": "uniqueMember"
              },
              "ldapsettings": {
                "openam-idrepo-ldapv3-affinity-level": "all",
                "openam-idrepo-ldapv3-behera-support-enabled": true,
                "openam-idrepo-ldapv3-contains-iot-identities-enriched-as-oauth2client": false,
                "openam-idrepo-ldapv3-heartbeat-interval": 10,
                "openam-idrepo-ldapv3-heartbeat-timeunit": "SECONDS",
                "openam-idrepo-ldapv3-keepalive-searchfilter": "(objectclass=*)",
                "openam-idrepo-ldapv3-mtls-enabled": false,
                "openam-idrepo-ldapv3-proxied-auth-denied-fallback": false,
                "openam-idrepo-ldapv3-proxied-auth-enabled": false,
                "sun-idrepo-ldapv3-config-authid": "cn=Directory Manager",
                "sun-idrepo-ldapv3-config-authpw": null,
                "sun-idrepo-ldapv3-config-connection-mode": "LDAPS",
                "sun-idrepo-ldapv3-config-connection_pool_max_size": 10,
                "sun-idrepo-ldapv3-config-connection_pool_min_size": 1,
                "sun-idrepo-ldapv3-config-ldap-server": [
                  "localhost:50636",
                  "localhost:50636|01"
                ],
                "sun-idrepo-ldapv3-config-max-result": 1000,
                "sun-idrepo-ldapv3-config-organization_name": "dc=openam,dc=forgerock,dc=org",
                "sun-idrepo-ldapv3-config-search-scope": "SCOPE_SUB",
                "sun-idrepo-ldapv3-config-time-limit": 10,
                "sun-idrepo-ldapv3-config-trust-all-server-certificates": false
              },
              "persistentsearch": {
                "sun-idrepo-ldapv3-config-psearch-filter": "(&(!(objectclass=frCoreToken))(!(ou:dn:=services))(!(ou:dn:=tokens)))",
                "sun-idrepo-ldapv3-config-psearch-scope": "SCOPE_SUB",
                "sun-idrepo-ldapv3-config-psearchbase": "dc=openam,dc=forgerock,dc=org"
              },
              "pluginconfig": {
                "sunIdRepoAttributeMapping": [],
                "sunIdRepoClass": "org.forgerock.openam.idrepo.ldap.DJLDAPv3Repo",
                "sunIdRepoSupportedOperations": [
                  "realm=read,create,edit,delete,service",
                  "user=read,create,edit,delete,service",
                  "group=read,create,edit,delete"
                ]
              },
              "userconfig": {
                "sun-idrepo-ldapv3-config-active": "Active",
                "sun-idrepo-ldapv3-config-auth-kba-attempts-attr": [
                  "kbaInfoAttempts"
                ],
                "sun-idrepo-ldapv3-config-auth-kba-attr": [
                  "kbaInfo"
                ],
                "sun-idrepo-ldapv3-config-auth-kba-index-attr": "kbaActiveIndex",
                "sun-idrepo-ldapv3-config-createuser-attr-mapping": [
                  "cn",
                  "sn"
                ],
                "sun-idrepo-ldapv3-config-inactive": "Inactive",
                "sun-idrepo-ldapv3-config-isactive": "inetuserstatus",
                "sun-idrepo-ldapv3-config-people-container-name": "ou",
                "sun-idrepo-ldapv3-config-people-container-value": "people",
                "sun-idrepo-ldapv3-config-user-attributes": [
                  "iplanet-am-auth-configuration",
                  "iplanet-am-user-alias-list",
                  "iplanet-am-user-password-reset-question-answer",
                  "mail",
                  "assignedDashboard",
                  "authorityRevocationList",
                  "dn",
                  "iplanet-am-user-password-reset-options",
                  "employeeNumber",
                  "createTimestamp",
                  "kbaActiveIndex",
                  "caCertificate",
                  "iplanet-am-session-quota-limit",
                  "iplanet-am-user-auth-config",
                  "sun-fm-saml2-nameid-infokey",
                  "sunIdentityMSISDNNumber",
                  "iplanet-am-user-password-reset-force-reset",
                  "sunAMAuthInvalidAttemptsData",
                  "devicePrintProfiles",
                  "givenName",
                  "iplanet-am-session-get-valid-sessions",
                  "objectClass",
                  "adminRole",
                  "inetUserHttpURL",
                  "lastEmailSent",
                  "iplanet-am-user-account-life",
                  "postalAddress",
                  "userCertificate",
                  "preferredtimezone",
                  "iplanet-am-user-admin-start-dn",
                  "boundDevices",
                  "oath2faEnabled",
                  "preferredlanguage",
                  "sun-fm-saml2-nameid-info",
                  "userPassword",
                  "iplanet-am-session-service-status",
                  "telephoneNumber",
                  "iplanet-am-session-max-idle-time",
                  "distinguishedName",
                  "iplanet-am-session-destroy-sessions",
                  "kbaInfoAttempts",
                  "modifyTimestamp",
                  "uid",
                  "iplanet-am-user-success-url",
                  "iplanet-am-user-auth-modules",
                  "kbaInfo",
                  "memberOf",
                  "sn",
                  "preferredLocale",
                  "manager",
                  "iplanet-am-session-max-session-time",
                  "deviceProfiles",
                  "cn",
                  "oathDeviceProfiles",
                  "webauthnDeviceProfiles",
                  "iplanet-am-user-login-status",
                  "pushDeviceProfiles",
                  "push2faEnabled",
                  "inetUserStatus",
                  "retryLimitNodeCount",
                  "iplanet-am-user-failure-url",
                  "iplanet-am-session-max-caching-time"
                ],
                "sun-idrepo-ldapv3-config-user-objectclass": [
                  "iplanet-am-managed-person",
                  "inetuser",
                  "sunFMSAML2NameIdentifier",
                  "inetorgperson",
                  "devicePrintProfilesContainer",
                  "boundDevicesContainer",
                  "iplanet-am-user-service",
                  "iPlanetPreferences",
                  "pushDeviceProfilesContainer",
                  "forgerock-am-dashboard-service",
                  "organizationalperson",
                  "top",
                  "kbaInfoContainer",
                  "person",
                  "sunAMAuthAccountLockout",
                  "oathDeviceProfilesContainer",
                  "webauthnDeviceProfilesContainer",
                  "iplanet-am-auth-configuration-service",
                  "deviceProfilesContainer"
                ],
                "sun-idrepo-ldapv3-config-users-search-attribute": "uid",
                "sun-idrepo-ldapv3-config-users-search-filter": "(objectclass=inetorgperson)"
              }
            }
          ],
          "sunIdRepoAttributeCombiner": "com.iplanet.am.sdk.AttributeCombiner",
          "sunIdRepoAttributeValidator": [
            "class=com.sun.identity.idm.server.IdRepoAttributeValidatorImpl",
            "minimumPasswordLength=8",
            "usernameInvalidChars=*|(|)|&|!"
          ]
        },
        "oauth-oidc": {
          "_id": "",
          "_type": {
            "_id": "oauth-oidc",
            "collection": false,
            "name": "OAuth2 Provider"
          },
          "advancedOAuth2Config": {
            "allowClientCredentialsInTokenRequestQueryParameters": false,
            "allowedAudienceValues": [],
            "authenticationAttributes": [
              "uid"
            ],
            "codeVerifierEnforced": "false",
            "defaultScopes": [],
            "displayNameAttribute": "cn",
            "expClaimRequiredInRequestObject": false,
            "grantTypes": [
              "implicit",
              "urn:ietf:params:oauth:grant-type:saml2-bearer",
              "refresh_token",
              "password",
              "client_credentials",
              "urn:ietf:params:oauth:grant-type:device_code",
              "authorization_code",
              "urn:openid:params:grant-type:ciba",
              "urn:ietf:params:oauth:grant-type:uma-ticket",
              "urn:ietf:params:oauth:grant-type:token-exchange",
              "urn:ietf:params:oauth:grant-type:jwt-bearer"
            ],
            "hashSalt": "changeme",
            "includeSubnameInTokenClaims": true,
            "macaroonTokenFormat": "V2",
            "maxAgeOfRequestObjectNbfClaim": 0,
            "maxDifferenceBetweenRequestObjectNbfAndExp": 0,
            "moduleMessageEnabledInPasswordGrant": false,
            "nbfClaimRequiredInRequestObject": false,
            "parRequestUriLifetime": 90,
            "passwordGrantAuthService": "[Empty]",
            "persistentClaims": [],
            "refreshTokenGracePeriod": 0,
            "requestObjectProcessing": "OIDC",
            "requirePushedAuthorizationRequests": false,
            "responseTypeClasses": [
              "code|org.forgerock.oauth2.core.AuthorizationCodeResponseTypeHandler",
              "id_token|org.forgerock.openidconnect.IdTokenResponseTypeHandler",
              "token|org.forgerock.oauth2.core.TokenResponseTypeHandler"
            ],
            "supportedScopes": [],
            "supportedSubjectTypes": [
              "public",
              "pairwise"
            ],
            "tlsCertificateBoundAccessTokensEnabled": true,
            "tlsCertificateRevocationCheckingEnabled": false,
            "tlsClientCertificateHeaderFormat": "URLENCODED_PEM",
            "tokenCompressionEnabled": false,
            "tokenEncryptionEnabled": false,
            "tokenExchangeClasses": [
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToAccessTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:access_token=>urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.AccessTokenToIdTokenExchanger",
              "urn:ietf:params:oauth:token-type:id_token=>urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.idtoken.IdTokenToAccessTokenExchanger"
            ],
            "tokenSigningAlgorithm": "HS256",
            "tokenValidatorClasses": [
              "urn:ietf:params:oauth:token-type:id_token|org.forgerock.oauth2.core.tokenexchange.idtoken.OidcIdTokenValidator",
              "urn:ietf:params:oauth:token-type:access_token|org.forgerock.oauth2.core.tokenexchange.accesstoken.OAuth2AccessTokenValidator"
            ]
          },
          "advancedOIDCConfig": {
            "alwaysAddClaimsToToken": false,
            "amrMappings": {},
            "authorisedIdmDelegationClients": [],
            "authorisedOpenIdConnectSSOClients": [],
            "claimsParameterSupported": false,
            "defaultACR": [],
            "idTokenInfoClientAuthenticationEnabled": true,
            "includeAllKtyAlgCombinationsInJwksUri": false,
            "loaMapping": {},
            "storeOpsTokens": true,
            "supportedAuthorizationResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedAuthorizationResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedAuthorizationResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRequestParameterEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRequestParameterEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRequestParameterSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenEndpointAuthenticationSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedTokenIntrospectionResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedTokenIntrospectionResponseEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedTokenIntrospectionResponseSigningAlgorithms": [
              "PS384",
              "RS384",
              "EdDSA",
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedUserInfoEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedUserInfoEncryptionEnc": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedUserInfoSigningAlgorithms": [
              "ES384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512"
            ],
            "useForceAuthnForMaxAge": false,
            "useForceAuthnForPromptLogin": false
          },
          "cibaConfig": {
            "cibaAuthReqIdLifetime": 600,
            "cibaMinimumPollingInterval": 2,
            "supportedCibaSigningAlgorithms": [
              "ES256",
              "PS256"
            ]
          },
          "clientDynamicRegistrationConfig": {
            "allowDynamicRegistration": false,
            "dynamicClientRegistrationScope": "dynamic_client_registration",
            "dynamicClientRegistrationSoftwareStatementRequired": false,
            "generateRegistrationAccessTokens": true,
            "requiredSoftwareStatementAttestedAttributes": [
              "redirect_uris"
            ]
          },
          "consent": {
            "clientsCanSkipConsent": false,
            "enableRemoteConsent": false,
            "supportedRcsRequestEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsRequestEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsRequestSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ],
            "supportedRcsResponseEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "ECDH-ES+A128KW",
              "RSA-OAEP",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedRcsResponseEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedRcsResponseSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "coreOAuth2Config": {
            "accessTokenLifetime": 3600,
            "accessTokenMayActScript": "[Empty]",
            "codeLifetime": 120,
            "issueRefreshToken": true,
            "issueRefreshTokenOnRefreshedToken": true,
            "macaroonTokensEnabled": false,
            "oidcMayActScript": "[Empty]",
            "refreshTokenLifetime": 604800,
            "scopesPolicySet": "oauth2Scopes",
            "statelessTokensEnabled": false,
            "usePolicyEngineForScope": false
          },
          "coreOIDCConfig": {
            "jwtTokenLifetime": 3600,
            "oidcDiscoveryEndpointEnabled": false,
            "overrideableOIDCClaims": [],
            "supportedClaims": [],
            "supportedIDTokenEncryptionAlgorithms": [
              "ECDH-ES+A256KW",
              "ECDH-ES+A192KW",
              "RSA-OAEP",
              "ECDH-ES+A128KW",
              "RSA-OAEP-256",
              "A128KW",
              "A256KW",
              "ECDH-ES",
              "dir",
              "A192KW"
            ],
            "supportedIDTokenEncryptionMethods": [
              "A256GCM",
              "A192GCM",
              "A128GCM",
              "A128CBC-HS256",
              "A192CBC-HS384",
              "A256CBC-HS512"
            ],
            "supportedIDTokenSigningAlgorithms": [
              "PS384",
              "ES384",
              "RS384",
              "HS256",
              "HS512",
              "ES256",
              "RS256",
              "HS384",
              "ES512",
              "PS256",
              "PS512",
              "RS512"
            ]
          },
          "deviceCodeConfig": {
            "deviceCodeLifetime": 300,
            "devicePollInterval": 5,
            "deviceUserCodeCharacterSet": "234567ACDEFGHJKLMNPQRSTWXYZabcdefhijkmnopqrstwxyz",
            "deviceUserCodeLength": 8
          },
          "location": "/first/second",
          "nextDescendents": [],
          "pluginsConfig": {
            "accessTokenEnricherClass": "org.forgerock.oauth2.core.plugins.registry.DefaultAccessTokenEnricher",
            "accessTokenModificationPluginType": "SCRIPTED",
            "accessTokenModificationScript": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
            "authorizeEndpointDataProviderClass": "org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider",
            "authorizeEndpointDataProviderPluginType": "JAVA",
            "authorizeEndpointDataProviderScript": "3f93ef6e-e54a-4393-aba1-f322656db28a",
            "evaluateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator",
            "evaluateScopePluginType": "JAVA",
            "evaluateScopeScript": "da56fe60-8b38-4c46-a405-d6b306d4b336",
            "oidcClaimsPluginType": "SCRIPTED",
            "oidcClaimsScript": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
            "userCodeGeneratorClass": "org.forgerock.oauth2.core.plugins.registry.DefaultUserCodeGenerator",
            "validateScopeClass": "org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator",
            "validateScopePluginType": "JAVA",
            "validateScopeScript": "25e6c06d-cf70-473b-bd28-26931edc476b"
          }
        },
        "policyconfiguration": {
          "_id": "",
          "_type": {
            "_id": "policyconfiguration",
            "collection": false,
            "name": "Policy Configuration"
          },
          "bindDn": "cn=Directory Manager",
          "bindPassword": null,
          "checkIfResourceTypeExists": true,
          "connectionPoolMaximumSize": 10,
          "connectionPoolMinimumSize": 1,
          "ldapServer": [
            "localhost:50636"
          ],
          "location": "/first/second",
          "maximumSearchResults": 100,
          "mtlsEnabled": false,
          "nextDescendents": [],
          "policyHeartbeatInterval": 10,
          "policyHeartbeatTimeUnit": "SECONDS",
          "realmSearchFilter": "(objectclass=sunismanagedorganization)",
          "searchTimeout": 5,
          "sslEnabled": true,
          "subjectsResultTTL": 10,
          "userAliasEnabled": false,
          "usersBaseDn": "dc=openam,dc=forgerock,dc=org",
          "usersSearchAttribute": "uid",
          "usersSearchFilter": "(objectclass=inetorgperson)",
          "usersSearchScope": "SCOPE_SUB"
        }
      },
      "subjectAttributes": {
        "undefined": "iplanet-am-user-login-status"
      },
      "subjectTypes": {
        "AND": {
          "_id": "AND",
          "config": {
            "properties": {
              "subjects": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "AND"
        },
        "AuthenticatedUsers": {
          "_id": "AuthenticatedUsers",
          "config": {
            "properties": {},
            "type": "object"
          },
          "logical": false,
          "title": "AuthenticatedUsers"
        },
        "Identity": {
          "_id": "Identity",
          "config": {
            "properties": {
              "subjectValues": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Identity"
        },
        "JwtClaim": {
          "_id": "JwtClaim",
          "config": {
            "properties": {
              "claimName": {
                "type": "string"
              },
              "claimValue": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "JwtClaim"
        },
        "NONE": {
          "_id": "NONE",
          "config": {
            "properties": {},
            "type": "object"
          },
          "logical": false,
          "title": "NONE"
        },
        "NOT": {
          "_id": "NOT",
          "config": {
            "properties": {
              "subject": {
                "properties": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "NOT"
        },
        "OR": {
          "_id": "OR",
          "config": {
            "properties": {
              "subjects": {
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": true,
          "title": "OR"
        },
        "Policy": {
          "_id": "Policy",
          "config": {
            "properties": {
              "className": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "values": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "logical": false,
          "title": "Policy"
        }
      },
      "trees": {
        "Agent": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "a87ff679-a2f3-371d-9181-a67b7542122c": {
              "_id": "a87ff679-a2f3-371d-9181-a67b7542122c",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "AgentDataStoreDecisionNode",
                "collection": true,
                "name": "Agent Data Store Decision"
              }
            },
            "e4da3b7f-bbce-3345-9777-2b0674a318d5": {
              "_id": "e4da3b7f-bbce-3345-9777-2b0674a318d5",
              "_outcomes": [
                {
                  "displayName": "Has Credentials",
                  "id": "true"
                },
                {
                  "displayName": "No Credentials",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "ZeroPageLoginNode",
                "collection": true,
                "name": "Zero Page Login Collector"
              },
              "allowWithoutReferer": true,
              "passwordHeader": "X-OpenAM-Password",
              "referrerWhiteList": [],
              "usernameHeader": "X-OpenAM-Username"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Agent",
            "description": "null",
            "enabled": true,
            "entryNodeId": "e4da3b7f-bbce-3345-9777-2b0674a318d5",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "a87ff679-a2f3-371d-9181-a67b7542122c": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Agent Data Store Decision",
                "nodeType": "AgentDataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "e4da3b7f-bbce-3345-9777-2b0674a318d5": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "a87ff679-a2f3-371d-9181-a67b7542122c"
                },
                "displayName": "Zero Page Login Collector",
                "nodeType": "ZeroPageLoginNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Example": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "c4ca4238-a0b9-3382-8dcc-509a6f75849b": {
              "_id": "c4ca4238-a0b9-3382-8dcc-509a6f75849b",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c81e728d-9d4c-3f63-af06-7f89cc14862c": {
              "_id": "c81e728d-9d4c-3f63-af06-7f89cc14862c",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "cfcd2084-95d5-35ef-a6e7-dff9f98764da": {
              "_id": "cfcd2084-95d5-35ef-a6e7-dff9f98764da",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3": {
              "_id": "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3",
              "_outcomes": [
                {
                  "displayName": "Has Credentials",
                  "id": "true"
                },
                {
                  "displayName": "No Credentials",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "ZeroPageLoginNode",
                "collection": true,
                "name": "Zero Page Login Collector"
              },
              "allowWithoutReferer": true,
              "passwordHeader": "X-OpenAM-Password",
              "referrerWhiteList": [],
              "usernameHeader": "X-OpenAM-Username"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Example",
            "description": "null",
            "enabled": true,
            "entryNodeId": "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "c4ca4238-a0b9-3382-8dcc-509a6f75849b": {
                "connections": {
                  "outcome": "c81e728d-9d4c-3f63-af06-7f89cc14862c"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c81e728d-9d4c-3f63-af06-7f89cc14862c": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "cfcd2084-95d5-35ef-a6e7-dff9f98764da": {
                "connections": {
                  "outcome": "c4ca4238-a0b9-3382-8dcc-509a6f75849b"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "eccbc87e-4b5c-32fe-a830-8fd9f2a7baf3": {
                "connections": {
                  "false": "cfcd2084-95d5-35ef-a6e7-dff9f98764da",
                  "true": "c81e728d-9d4c-3f63-af06-7f89cc14862c"
                },
                "displayName": "Zero Page Login Collector",
                "nodeType": "ZeroPageLoginNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Facebook-ProvisionIDMAccount": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "37693cfc-7480-39e4-9d87-b8c7d8b9aacd": {
              "_id": "37693cfc-7480-39e4-9d87-b8c7d8b9aacd",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialFacebookNode",
                "collection": true,
                "name": "Social Facebook"
              },
              "authenticationIdKey": "id",
              "authorizeEndpoint": "https://www.facebook.com/dialog/oauth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|facebook-",
              "cfgAccountMapperConfiguration": {
                "id": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|facebook-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "first_name": "givenName",
                "id": "iplanet-am-user-alias-list",
                "last_name": "sn",
                "name": "cn"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "facebook",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "public_profile,email",
              "tokenEndpoint": "https://graph.facebook.com/v2.12/oauth/access_token",
              "userInfoEndpoint": "https://graph.facebook.com/v2.6/me?fields=name%2Cemail%2Cfirst_name%2Clast_name"
            },
            "b6d767d2-f8ed-3d21-a44b-0e5886680cb9": {
              "_id": "b6d767d2-f8ed-3d21-a44b-0e5886680cb9",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ProvisionIdmAccountNode",
                "collection": true,
                "name": "Provision IDM Account"
              },
              "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Facebook-ProvisionIDMAccount",
            "description": "null",
            "enabled": true,
            "entryNodeId": "37693cfc-7480-39e4-9d87-b8c7d8b9aacd",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "37693cfc-7480-39e4-9d87-b8c7d8b9aacd": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "b6d767d2-f8ed-3d21-a44b-0e5886680cb9"
                },
                "displayName": "Facebook Social Authentication",
                "nodeType": "SocialFacebookNode",
                "x": 0,
                "y": 0
              },
              "b6d767d2-f8ed-3d21-a44b-0e5886680cb9": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Provision IDM Account",
                "nodeType": "ProvisionIdmAccountNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Google-AnonymousUser": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1ff1de77-4005-38da-93f4-2943881c655f": {
              "_id": "1ff1de77-4005-38da-93f4-2943881c655f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SetSuccessUrlNode",
                "collection": true,
                "name": "Success URL"
              },
              "successUrl": "https://www.forgerock.com/"
            },
            "4e732ced-3463-306d-a0ca-9a15b6153677": {
              "_id": "4e732ced-3463-306d-a0ca-9a15b6153677",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialGoogleNode",
                "collection": true,
                "name": "Social Google"
              },
              "authenticationIdKey": "sub",
              "authorizeEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|google-",
              "cfgAccountMapperConfiguration": {
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|google-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "family_name": "sn",
                "given_name": "givenName",
                "name": "cn",
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "google",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "profile email",
              "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
              "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo"
            },
            "8e296a06-7a37-3633-b0de-d05f5a3bf3ec": {
              "_id": "8e296a06-7a37-3633-b0de-d05f5a3bf3ec",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AnonymousUserNode",
                "collection": true,
                "name": "Anonymous User Mapping"
              },
              "anonymousUserName": "anonymous"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Google-AnonymousUser",
            "description": "null",
            "enabled": true,
            "entryNodeId": "4e732ced-3463-306d-a0ca-9a15b6153677",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1ff1de77-4005-38da-93f4-2943881c655f": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Set Success URL",
                "nodeType": "SetSuccessUrlNode",
                "x": 0,
                "y": 0
              },
              "4e732ced-3463-306d-a0ca-9a15b6153677": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "8e296a06-7a37-3633-b0de-d05f5a3bf3ec"
                },
                "displayName": "Google Social Authentication",
                "nodeType": "SocialGoogleNode",
                "x": 0,
                "y": 0
              },
              "8e296a06-7a37-3633-b0de-d05f5a3bf3ec": {
                "connections": {
                  "outcome": "1ff1de77-4005-38da-93f4-2943881c655f"
                },
                "displayName": "Map to Anonymous User",
                "nodeType": "AnonymousUserNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Google-DynamicAccountCreation": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0": {
              "_id": "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ProvisionDynamicAccountNode",
                "collection": true,
                "name": "Provision Dynamic Account"
              },
              "accountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider"
            },
            "182be0c5-cdcd-3072-bb18-64cdee4d3d6e": {
              "_id": "182be0c5-cdcd-3072-bb18-64cdee4d3d6e",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "CreatePasswordNode",
                "collection": true,
                "name": "Create Password"
              },
              "minPasswordLength": 0
            },
            "33e75ff0-9dd6-31bb-a69f-351039152189": {
              "_id": "33e75ff0-9dd6-31bb-a69f-351039152189",
              "_outcomes": [
                {
                  "displayName": "Account exists",
                  "id": "ACCOUNT_EXISTS"
                },
                {
                  "displayName": "No account exists",
                  "id": "NO_ACCOUNT"
                }
              ],
              "_type": {
                "_id": "SocialGoogleNode",
                "collection": true,
                "name": "Social Google"
              },
              "authenticationIdKey": "sub",
              "authorizeEndpoint": "https://accounts.google.com/o/oauth2/v2/auth",
              "basicAuth": true,
              "cfgAccountMapperClass": "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|*|google-",
              "cfgAccountMapperConfiguration": {
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgAccountProviderClass": "org.forgerock.openam.authentication.modules.common.mapping.DefaultAccountProvider",
              "cfgAttributeMappingClasses": [
                "org.forgerock.openam.authentication.modules.common.mapping.JsonAttributeMapper|iplanet-am-user-alias-list|google-"
              ],
              "cfgAttributeMappingConfiguration": {
                "email": "mail",
                "family_name": "sn",
                "given_name": "givenName",
                "name": "cn",
                "sub": "iplanet-am-user-alias-list"
              },
              "cfgMixUpMitigation": false,
              "clientId": "aClientId",
              "clientSecret": null,
              "provider": "google",
              "redirectURI": "http://localhost:8080/am",
              "saveUserAttributesToSession": true,
              "scopeString": "profile email",
              "tokenEndpoint": "https://www.googleapis.com/oauth2/v4/token",
              "userInfoEndpoint": "https://www.googleapis.com/oauth2/v3/userinfo"
            },
            "34173cb3-8f07-389d-9beb-c2ac9128303f": {
              "_id": "34173cb3-8f07-389d-9beb-c2ac9128303f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordSmtpSenderNode",
                "collection": true,
                "name": "OTP Email Sender"
              },
              "emailAttribute": "mail",
              "emailContent": {
                "en": "Here is your One Time Password: '{{OTP}}'.</p><p>If you did not request this, please contact support."
              },
              "emailSubject": {
                "en": "Your One Time Password"
              },
              "fromEmailAddress": "admin@example.com",
              "hostName": "mail.example.com",
              "hostPort": 25,
              "password": null,
              "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
              "sslOption": "SSL",
              "username": "admin@example.com"
            },
            "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01": {
              "_id": "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01",
              "_outcomes": [
                {
                  "displayName": "Retry",
                  "id": "Retry"
                },
                {
                  "displayName": "Reject",
                  "id": "Reject"
                }
              ],
              "_type": {
                "_id": "RetryLimitDecisionNode",
                "collection": true,
                "name": "Retry Limit Decision"
              },
              "incrementUserAttributeOnFailure": true,
              "retryLimit": 3
            },
            "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b": {
              "_id": "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordGeneratorNode",
                "collection": true,
                "name": "HOTP Generator"
              },
              "length": 8
            },
            "c16a5320-fa47-3530-9958-3c34fd356ef5": {
              "_id": "c16a5320-fa47-3530-9958-3c34fd356ef5",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordCollectorDecisionNode",
                "collection": true,
                "name": "OTP Collector Decision"
              },
              "passwordExpiryTime": 5
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Google-DynamicAccountCreation",
            "description": "null",
            "enabled": true,
            "entryNodeId": "33e75ff0-9dd6-31bb-a69f-351039152189",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Provision Dynamic Account",
                "nodeType": "ProvisionDynamicAccountNode",
                "x": 0,
                "y": 0
              },
              "182be0c5-cdcd-3072-bb18-64cdee4d3d6e": {
                "connections": {
                  "outcome": "02e74f10-e032-3ad8-a8d1-38f2b4fdd6f0"
                },
                "displayName": "Create Password",
                "nodeType": "CreatePasswordNode",
                "x": 0,
                "y": 0
              },
              "33e75ff0-9dd6-31bb-a69f-351039152189": {
                "connections": {
                  "ACCOUNT_EXISTS": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "NO_ACCOUNT": "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b"
                },
                "displayName": "Google Social Authentication",
                "nodeType": "SocialGoogleNode",
                "x": 0,
                "y": 0
              },
              "34173cb3-8f07-389d-9beb-c2ac9128303f": {
                "connections": {
                  "outcome": "c16a5320-fa47-3530-9958-3c34fd356ef5"
                },
                "displayName": "OTP Email Sender",
                "nodeType": "OneTimePasswordSmtpSenderNode",
                "x": 0,
                "y": 0
              },
              "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01": {
                "connections": {
                  "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "Retry": "c16a5320-fa47-3530-9958-3c34fd356ef5"
                },
                "displayName": "Retry Limit Decision",
                "nodeType": "RetryLimitDecisionNode",
                "x": 0,
                "y": 0
              },
              "6ea9ab1b-aa0e-3b9e-9909-4440c317e21b": {
                "connections": {
                  "outcome": "34173cb3-8f07-389d-9beb-c2ac9128303f"
                },
                "displayName": "HOTP Generator",
                "nodeType": "OneTimePasswordGeneratorNode",
                "x": 0,
                "y": 0
              },
              "c16a5320-fa47-3530-9958-3c34fd356ef5": {
                "connections": {
                  "false": "6364d3f0-f495-36ab-9dcf-8d3b5c6e0b01",
                  "true": "182be0c5-cdcd-3072-bb18-64cdee4d3d6e"
                },
                "displayName": "OTP Collector Decision",
                "nodeType": "OneTimePasswordCollectorDecisionNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "HmacOneTimePassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1f0e3dad-9990-3345-b743-9f8ffabdffc4": {
              "_id": "1f0e3dad-9990-3345-b743-9f8ffabdffc4",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordGeneratorNode",
                "collection": true,
                "name": "HOTP Generator"
              },
              "length": 8
            },
            "3c59dc04-8e88-3024-bbe8-079a5c74d079": {
              "_id": "3c59dc04-8e88-3024-bbe8-079a5c74d079",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordCollectorDecisionNode",
                "collection": true,
                "name": "OTP Collector Decision"
              },
              "passwordExpiryTime": 5
            },
            "6f4922f4-5568-361a-8cdf-4ad2299f6d23": {
              "_id": "6f4922f4-5568-361a-8cdf-4ad2299f6d23",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "70efdf2e-c9b0-3607-9795-c442636b55fb": {
              "_id": "70efdf2e-c9b0-3607-9795-c442636b55fb",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "98f13708-2101-34c4-b568-7be6106a3b84": {
              "_id": "98f13708-2101-34c4-b568-7be6106a3b84",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "OneTimePasswordSmtpSenderNode",
                "collection": true,
                "name": "OTP Email Sender"
              },
              "emailAttribute": "mail",
              "emailContent": {
                "en": "Here is your One Time Password: '{{OTP}}'.</p><p>If you did not request this, please contact support."
              },
              "emailSubject": {
                "en": "Your One Time Password"
              },
              "fromEmailAddress": "admin@example.com",
              "hostName": "mail.example.com",
              "hostPort": 25,
              "password": null,
              "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
              "sslOption": "SSL",
              "username": "admin@example.com"
            },
            "c74d97b0-1eae-357e-84aa-9d5bade97baf": {
              "_id": "c74d97b0-1eae-357e-84aa-9d5bade97baf",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "HmacOneTimePassword",
            "description": "null",
            "enabled": true,
            "entryNodeId": "c74d97b0-1eae-357e-84aa-9d5bade97baf",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1f0e3dad-9990-3345-b743-9f8ffabdffc4": {
                "connections": {
                  "outcome": "98f13708-2101-34c4-b568-7be6106a3b84"
                },
                "displayName": "HOTP Generator",
                "nodeType": "OneTimePasswordGeneratorNode",
                "x": 0,
                "y": 0
              },
              "3c59dc04-8e88-3024-bbe8-079a5c74d079": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "OTP Collector Decision",
                "nodeType": "OneTimePasswordCollectorDecisionNode",
                "x": 0,
                "y": 0
              },
              "6f4922f4-5568-361a-8cdf-4ad2299f6d23": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "1f0e3dad-9990-3345-b743-9f8ffabdffc4"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "70efdf2e-c9b0-3607-9795-c442636b55fb": {
                "connections": {
                  "outcome": "6f4922f4-5568-361a-8cdf-4ad2299f6d23"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "98f13708-2101-34c4-b568-7be6106a3b84": {
                "connections": {
                  "outcome": "3c59dc04-8e88-3024-bbe8-079a5c74d079"
                },
                "displayName": "OTP Email Sender",
                "nodeType": "OneTimePasswordSmtpSenderNode",
                "x": 0,
                "y": 0
              },
              "c74d97b0-1eae-357e-84aa-9d5bade97baf": {
                "connections": {
                  "outcome": "70efdf2e-c9b0-3607-9795-c442636b55fb"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PersistentCookie": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "6512bd43-d9ca-36e0-ac99-0b0a82652dca": {
              "_id": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3": {
              "_id": "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SetPersistentCookieNode",
                "collection": true,
                "name": "Set Persistent Cookie"
              },
              "hmacSigningKey": null,
              "idleTimeout": 5,
              "maxLife": 5,
              "persistentCookieName": "session-jwt",
              "useHttpOnlyCookie": true,
              "useSecureCookie": false
            },
            "aab32389-22bc-325a-af60-6eb525ffdc56": {
              "_id": "aab32389-22bc-325a-af60-6eb525ffdc56",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "PersistentCookieDecisionNode",
                "collection": true,
                "name": "Persistent Cookie Decision"
              },
              "enforceClientIp": false,
              "hmacSigningKey": null,
              "idleTimeout": 5,
              "persistentCookieName": "session-jwt",
              "useHttpOnlyCookie": true,
              "useSecureCookie": false
            },
            "c20ad4d7-6fe9-3759-aa27-a0c99bff6710": {
              "_id": "c20ad4d7-6fe9-3759-aa27-a0c99bff6710",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c51ce410-c124-310e-8db5-e4b97fc2af39": {
              "_id": "c51ce410-c124-310e-8db5-e4b97fc2af39",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PersistentCookie",
            "description": "null",
            "enabled": true,
            "entryNodeId": "aab32389-22bc-325a-af60-6eb525ffdc56",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "6512bd43-d9ca-36e0-ac99-0b0a82652dca": {
                "connections": {
                  "outcome": "c20ad4d7-6fe9-3759-aa27-a0c99bff6710"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Set Persistent Cookie",
                "nodeType": "SetPersistentCookieNode",
                "x": 0,
                "y": 0
              },
              "aab32389-22bc-325a-af60-6eb525ffdc56": {
                "connections": {
                  "false": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Persistent Cookie Decision",
                "nodeType": "PersistentCookieDecisionNode",
                "x": 0,
                "y": 0
              },
              "c20ad4d7-6fe9-3759-aa27-a0c99bff6710": {
                "connections": {
                  "outcome": "c51ce410-c124-310e-8db5-e4b97fc2af39"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c51ce410-c124-310e-8db5-e4b97fc2af39": {
                "connections": {
                  "false": "6512bd43-d9ca-36e0-ac99-0b0a82652dca",
                  "true": "9bf31c7f-f062-336a-96d3-c8bd1f8f2ff3"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformForgottenUsername": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "d82c8d16-19ad-3176-9665-453cfb2e55f0": {
              "_id": "d82c8d16-19ad-3176-9665-453cfb2e55f0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "mail"
              ],
              "identityAttribute": "mail",
              "required": true,
              "validateInputs": false
            }
          },
          "nodes": {
            "72b32a1f-754b-31c0-9b36-95e0cb6cde7f": {
              "_id": "72b32a1f-754b-31c0-9b36-95e0cb6cde7f",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "InnerTreeEvaluatorNode",
                "collection": true,
                "name": "Inner Tree Evaluator"
              },
              "tree": "PlatformLogin"
            },
            "9f61408e-3afb-333e-90cd-f1b20de6f466": {
              "_id": "9f61408e-3afb-333e-90cd-f1b20de6f466",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
              },
              "emailTemplateName": "forgottenUsername",
              "identityAttribute": "mail",
              "objectLookup": true
            },
            "a684ecee-e76f-3522-b732-86a895bc8436": {
              "_id": "a684ecee-e76f-3522-b732-86a895bc8436",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "d82c8d16-19ad-3176-9665-453cfb2e55f0",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {
                "en": "Enter your email address or <a href=\"#/service/PlatformLogin\">Sign in</a>"
              },
              "pageHeader": {
                "en": "Forgotten Username"
              },
              "stage": "null"
            },
            "b53b3a3d-6ab9-3ce0-a682-29151c9bde11": {
              "_id": "b53b3a3d-6ab9-3ce0-a682-29151c9bde11",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "IdentifyExistingUserNode",
                "collection": true,
                "name": "Identify Existing User"
              },
              "identityAttribute": "mail"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformForgottenUsername",
            "description": "Forgotten Username Tree",
            "enabled": true,
            "entryNodeId": "a684ecee-e76f-3522-b732-86a895bc8436",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "72b32a1f-754b-31c0-9b36-95e0cb6cde7f": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Inner Tree Evaluator",
                "nodeType": "InnerTreeEvaluatorNode",
                "x": 0,
                "y": 0
              },
              "9f61408e-3afb-333e-90cd-f1b20de6f466": {
                "connections": {
                  "outcome": "72b32a1f-754b-31c0-9b36-95e0cb6cde7f"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "a684ecee-e76f-3522-b732-86a895bc8436": {
                "connections": {
                  "outcome": "b53b3a3d-6ab9-3ce0-a682-29151c9bde11"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "b53b3a3d-6ab9-3ce0-a682-29151c9bde11": {
                "connections": {
                  "false": "9f61408e-3afb-333e-90cd-f1b20de6f466",
                  "true": "9f61408e-3afb-333e-90cd-f1b20de6f466"
                },
                "displayName": "Identify Existing User",
                "nodeType": "IdentifyExistingUserNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformLogin": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "642e92ef-b794-3173-8881-b53e1e1b18b6": {
              "_id": "642e92ef-b794-3173-8881-b53e1e1b18b6",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            },
            "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7": {
              "_id": "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": false
            }
          },
          "nodes": {
            "2838023a-778d-3aec-9c21-2708f721b788": {
              "_id": "2838023a-778d-3aec-9c21-2708f721b788",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "IncrementLoginCountNode",
                "collection": true,
                "name": "Increment Login Count"
              },
              "identityAttribute": "userName"
            },
            "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8": {
              "_id": "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "InnerTreeEvaluatorNode",
                "collection": true,
                "name": "Inner Tree Evaluator"
              },
              "tree": "PlatformProgressiveProfile"
            },
            "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a": {
              "_id": "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "f457c545-a9de-388f-98ec-ee47145a72c0": {
              "_id": "f457c545-a9de-388f-98ec-ee47145a72c0",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "67c6a1e7-ce56-33d6-ba74-8ab6d9af3fd7",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "642e92ef-b794-3173-8881-b53e1e1b18b6",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "New here? <a href=\"#/service/PlatformRegistration\">Create an account</a><br><a href=\"#/service/PlatformForgottenUsername\">Forgot username?</a><a href=\"#/service/PlatformResetPassword\"> Forgot password?</a>"
              },
              "pageHeader": {
                "en": "Sign In"
              },
              "stage": "null"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformLogin",
            "description": "Platform Login Tree",
            "enabled": true,
            "entryNodeId": "f457c545-a9de-388f-98ec-ee47145a72c0",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "2838023a-778d-3aec-9c21-2708f721b788": {
                "connections": {
                  "outcome": "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8"
                },
                "displayName": "Increment Login Count",
                "nodeType": "IncrementLoginCountNode",
                "x": 0,
                "y": 0
              },
              "9a115815-4dfa-32ca-9dbd-0694a4e9bdc8": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Inner Tree Evaluator",
                "nodeType": "InnerTreeEvaluatorNode",
                "x": 0,
                "y": 0
              },
              "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "2838023a-778d-3aec-9c21-2708f721b788"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "f457c545-a9de-388f-98ec-ee47145a72c0": {
                "connections": {
                  "outcome": "c0c7c76d-30bd-3dca-afc9-6f40275bdc0a"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformProgressiveProfile": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "f7177163-c833-3ff4-b38f-c8d2872f1ec6": {
              "_id": "f7177163-c833-3ff4-b38f-c8d2872f1ec6",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "preferences/updates",
                "preferences/marketing"
              ],
              "identityAttribute": "userName",
              "required": false,
              "validateInputs": false
            }
          },
          "nodes": {
            "17e62166-fc85-36df-a4d1-bc0e1742c08b": {
              "_id": "17e62166-fc85-36df-a4d1-bc0e1742c08b",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "QueryFilterDecisionNode",
                "collection": true,
                "name": "Query Filter Decision"
              },
              "identityAttribute": "userName",
              "queryFilter": "!(/preferences pr) or /preferences/marketing eq false or /preferences/updates eq false"
            },
            "6c8349cc-7260-3e62-a3b1-396831a8398f": {
              "_id": "6c8349cc-7260-3e62-a3b1-396831a8398f",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "f7177163-c833-3ff4-b38f-c8d2872f1ec6",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {},
              "pageHeader": {
                "en": "Please select your preferences"
              },
              "stage": "null"
            },
            "a1d0c6e8-3f02-3327-9846-1063f4ac58a6": {
              "_id": "a1d0c6e8-3f02-3327-9846-1063f4ac58a6",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "LoginCountDecisionNode",
                "collection": true,
                "name": "Login Count Decision"
              },
              "amount": 3,
              "identityAttribute": "userName",
              "interval": "AT"
            },
            "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f": {
              "_id": "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "userName",
              "identityResource": "managed/user",
              "ignoredFields": [],
              "patchAsObject": false
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformProgressiveProfile",
            "description": "Prompt for missing preferences on 3rd login",
            "enabled": true,
            "entryNodeId": "a1d0c6e8-3f02-3327-9846-1063f4ac58a6",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "17e62166-fc85-36df-a4d1-bc0e1742c08b": {
                "connections": {
                  "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "true": "6c8349cc-7260-3e62-a3b1-396831a8398f"
                },
                "displayName": "Query Filter Decision",
                "nodeType": "QueryFilterDecisionNode",
                "x": 0,
                "y": 0
              },
              "6c8349cc-7260-3e62-a3b1-396831a8398f": {
                "connections": {
                  "outcome": "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "a1d0c6e8-3f02-3327-9846-1063f4ac58a6": {
                "connections": {
                  "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                  "true": "17e62166-fc85-36df-a4d1-bc0e1742c08b"
                },
                "displayName": "Login Count Decision",
                "nodeType": "LoginCountDecisionNode",
                "x": 0,
                "y": 0
              },
              "d9d4f495-e875-32e0-b5a1-a4a6e1b9770f": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformRegistration": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "19ca14e7-ea63-38a4-ae0e-b13d585e4c22": {
              "_id": "19ca14e7-ea63-38a4-ae0e-b13d585e4c22",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "givenName",
                "sn",
                "mail",
                "preferences/marketing",
                "preferences/updates"
              ],
              "identityAttribute": "userName",
              "required": true,
              "validateInputs": true
            },
            "1c383cd3-0b7c-398a-b502-93adfecb7b18": {
              "_id": "1c383cd3-0b7c-398a-b502-93adfecb7b18",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            },
            "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa": {
              "_id": "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AcceptTermsAndConditionsNode",
                "collection": true,
                "name": "Accept Terms and Conditions"
              }
            },
            "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d": {
              "_id": "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "KbaCreateNode",
                "collection": true,
                "name": "KBA Definition"
              },
              "allowUserDefinedQuestions": true,
              "message": {
                "en": "Select a security question"
              }
            },
            "e369853d-f766-3a44-a1ed-0ff613f563bd": {
              "_id": "e369853d-f766-3a44-a1ed-0ff613f563bd",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedUsernameNode",
                "collection": true,
                "name": "Platform Username"
              },
              "usernameAttribute": "userName",
              "validateInput": true
            }
          },
          "nodes": {
            "3416a75f-4cea-3109-907c-acd8e2f2aefc": {
              "_id": "3416a75f-4cea-3109-907c-acd8e2f2aefc",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "IncrementLoginCountNode",
                "collection": true,
                "name": "Increment Login Count"
              },
              "identityAttribute": "userName"
            },
            "d645920e-395f-3dad-bbbb-ed0eca3fe2e0": {
              "_id": "d645920e-395f-3dad-bbbb-ed0eca3fe2e0",
              "_outcomes": [
                {
                  "displayName": "Created",
                  "id": "CREATED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "CreateObjectNode",
                "collection": true,
                "name": "Create Object"
              },
              "identityResource": "managed/user"
            },
            "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c": {
              "_id": "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "e369853d-f766-3a44-a1ed-0ff613f563bd",
                  "displayName": "Platform Username",
                  "nodeType": "ValidatedUsernameNode"
                },
                {
                  "_id": "19ca14e7-ea63-38a4-ae0e-b13d585e4c22",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                },
                {
                  "_id": "1c383cd3-0b7c-398a-b502-93adfecb7b18",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                },
                {
                  "_id": "a5bfc9e0-7964-38dd-9eb9-5fc584cd965d",
                  "displayName": "KBA Definition",
                  "nodeType": "KbaCreateNode"
                },
                {
                  "_id": "a5771bce-93e2-30c3-af7c-d9dfd0e5deaa",
                  "displayName": "Accept Terms and Conditions",
                  "nodeType": "AcceptTermsAndConditionsNode"
                }
              ],
              "pageDescription": {
                "en": "Signing up is fast and easy.<br>Already have an account?<a href='#/service/PlatformLogin'>Sign In</a>"
              },
              "pageHeader": {
                "en": "Sign Up"
              },
              "stage": "null"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformRegistration",
            "description": "Platform Registration Tree",
            "enabled": true,
            "entryNodeId": "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "3416a75f-4cea-3109-907c-acd8e2f2aefc": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Increment Login Count",
                "nodeType": "IncrementLoginCountNode",
                "x": 0,
                "y": 0
              },
              "d645920e-395f-3dad-bbbb-ed0eca3fe2e0": {
                "connections": {
                  "CREATED": "3416a75f-4cea-3109-907c-acd8e2f2aefc",
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "Create Object",
                "nodeType": "CreateObjectNode",
                "x": 0,
                "y": 0
              },
              "d67d8ab4-f4c1-3bf2-aaa3-53e27879133c": {
                "connections": {
                  "outcome": "d645920e-395f-3dad-bbbb-ed0eca3fe2e0"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformResetPassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "44f683a8-4163-3352-bafe-57c2e008bc8c": {
              "_id": "44f683a8-4163-3352-bafe-57c2e008bc8c",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            },
            "66f041e1-6a60-328b-85a7-e228a89c3799": {
              "_id": "66f041e1-6a60-328b-85a7-e228a89c3799",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AttributeCollectorNode",
                "collection": true,
                "name": "Attribute Collector"
              },
              "attributesToCollect": [
                "mail"
              ],
              "identityAttribute": "mail",
              "required": true,
              "validateInputs": false
            }
          },
          "nodes": {
            "03afdbd6-6e79-39b1-a5f8-597834fa83a4": {
              "_id": "03afdbd6-6e79-39b1-a5f8-597834fa83a4",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "44f683a8-4163-3352-bafe-57c2e008bc8c",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Change password"
              },
              "pageHeader": {
                "en": "Reset Password"
              },
              "stage": "null"
            },
            "072b030b-a126-32f4-b237-4f342be9ed44": {
              "_id": "072b030b-a126-32f4-b237-4f342be9ed44",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "IdentifyExistingUserNode",
                "collection": true,
                "name": "Identify Existing User"
              },
              "identifier": "userName",
              "identityAttribute": "mail"
            },
            "093f65e0-80a2-35f8-876b-1c5722a46aa2": {
              "_id": "093f65e0-80a2-35f8-876b-1c5722a46aa2",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "66f041e1-6a60-328b-85a7-e228a89c3799",
                  "displayName": "Attribute Collector",
                  "nodeType": "AttributeCollectorNode"
                }
              ],
              "pageDescription": {
                "en": "Enter your email address or <a href=\"#/service/PlatformLogin\">Sign in</a>"
              },
              "pageHeader": {
                "en": "Reset Password"
              },
              "stage": "null"
            },
            "7f39f831-7fbd-3198-8ef4-c628eba02591": {
              "_id": "7f39f831-7fbd-3198-8ef4-c628eba02591",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
              },
              "emailTemplateName": "resetPassword",
              "identityAttribute": "mail",
              "objectLookup": true
            },
            "ea5d2f1c-4608-332e-87d3-aa3d998e5135": {
              "_id": "ea5d2f1c-4608-332e-87d3-aa3d998e5135",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "mail",
              "identityResource": "managed/user",
              "ignoredFields": [],
              "patchAsObject": false
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformResetPassword",
            "description": "Reset Password Tree",
            "enabled": true,
            "entryNodeId": "093f65e0-80a2-35f8-876b-1c5722a46aa2",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "03afdbd6-6e79-39b1-a5f8-597834fa83a4": {
                "connections": {
                  "outcome": "ea5d2f1c-4608-332e-87d3-aa3d998e5135"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "072b030b-a126-32f4-b237-4f342be9ed44": {
                "connections": {
                  "false": "7f39f831-7fbd-3198-8ef4-c628eba02591",
                  "true": "7f39f831-7fbd-3198-8ef4-c628eba02591"
                },
                "displayName": "Identify Existing User",
                "nodeType": "IdentifyExistingUserNode",
                "x": 0,
                "y": 0
              },
              "093f65e0-80a2-35f8-876b-1c5722a46aa2": {
                "connections": {
                  "outcome": "072b030b-a126-32f4-b237-4f342be9ed44"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "7f39f831-7fbd-3198-8ef4-c628eba02591": {
                "connections": {
                  "outcome": "03afdbd6-6e79-39b1-a5f8-597834fa83a4"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "ea5d2f1c-4608-332e-87d3-aa3d998e5135": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "PlatformUpdatePassword": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {
            "735b90b4-5681-35ed-ac3f-678819b6e058": {
              "_id": "735b90b4-5681-35ed-ac3f-678819b6e058",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": false
            },
            "7cbbc409-ec99-3f19-878c-75bd1e06f215": {
              "_id": "7cbbc409-ec99-3f19-878c-75bd1e06f215",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "ValidatedPasswordNode",
                "collection": true,
                "name": "Platform Password"
              },
              "passwordAttribute": "password",
              "validateInput": true
            }
          },
          "nodes": {
            "14bfa6bb-1487-3e45-bba0-28a21ed38046": {
              "_id": "14bfa6bb-1487-3e45-bba0-28a21ed38046",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1": {
              "_id": "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "AttributePresentDecisionNode",
                "collection": true,
                "name": "Attribute Present Decision"
              },
              "identityAttribute": "userName",
              "presentAttribute": "password"
            },
            "32bb90e8-976a-3b52-98d5-da10fe66f21d": {
              "_id": "32bb90e8-976a-3b52-98d5-da10fe66f21d",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "EmailSuspendNode",
                "collection": true,
                "name": "Email Suspend Node"
              },
              "emailAttribute": "mail",
              "emailSuspendMessage": {
                "en": "An email has been sent to your address, please verify  your email address to update your password. Click the link in that email to proceed."
              },
              "emailTemplateName": "updatePassword",
              "identityAttribute": "userName",
              "objectLookup": true
            },
            "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db": {
              "_id": "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "735b90b4-5681-35ed-ac3f-678819b6e058",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Enter current password"
              },
              "pageHeader": {
                "en": "Verify Existing Password"
              },
              "stage": "null"
            },
            "d2ddea18-f006-35ce-8623-e36bd4e3c7c5": {
              "_id": "d2ddea18-f006-35ce-8623-e36bd4e3c7c5",
              "_outcomes": [
                {
                  "displayName": "Patched",
                  "id": "PATCHED"
                },
                {
                  "displayName": "Failed",
                  "id": "FAILURE"
                }
              ],
              "_type": {
                "_id": "PatchObjectNode",
                "collection": true,
                "name": "Patch Object"
              },
              "identityAttribute": "userName",
              "identityResource": "managed/user",
              "ignoredFields": [
                "userName"
              ],
              "patchAsObject": true
            },
            "e2c420d9-28d4-3f8c-a0ff-2ec19b371514": {
              "_id": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PageNode",
                "collection": true,
                "name": "Page Node"
              },
              "nodes": [
                {
                  "_id": "7cbbc409-ec99-3f19-878c-75bd1e06f215",
                  "displayName": "Platform Password",
                  "nodeType": "ValidatedPasswordNode"
                }
              ],
              "pageDescription": {
                "en": "Enter new password"
              },
              "pageHeader": {
                "en": "Update Password"
              },
              "stage": "null"
            },
            "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb": {
              "_id": "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "SessionDataNode",
                "collection": true,
                "name": "Get Session Data"
              },
              "sessionDataKey": "UserToken",
              "sharedStateKey": "userName"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "PlatformUpdatePassword",
            "description": "Update password using active session",
            "enabled": true,
            "entryNodeId": "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "14bfa6bb-1487-3e45-bba0-28a21ed38046": {
                "connections": {
                  "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "true": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1": {
                "connections": {
                  "false": "32bb90e8-976a-3b52-98d5-da10fe66f21d",
                  "true": "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db"
                },
                "displayName": "Attribute Present Decision",
                "nodeType": "AttributePresentDecisionNode",
                "x": 0,
                "y": 0
              },
              "32bb90e8-976a-3b52-98d5-da10fe66f21d": {
                "connections": {
                  "outcome": "e2c420d9-28d4-3f8c-a0ff-2ec19b371514"
                },
                "displayName": "Email Suspend",
                "nodeType": "EmailSuspendNode",
                "x": 0,
                "y": 0
              },
              "a3f390d8-8e4c-31f2-b47b-fa2f1b5f87db": {
                "connections": {
                  "outcome": "14bfa6bb-1487-3e45-bba0-28a21ed38046"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "d2ddea18-f006-35ce-8623-e36bd4e3c7c5": {
                "connections": {
                  "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
                  "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Patch Object",
                "nodeType": "PatchObjectNode",
                "x": 0,
                "y": 0
              },
              "e2c420d9-28d4-3f8c-a0ff-2ec19b371514": {
                "connections": {
                  "outcome": "d2ddea18-f006-35ce-8623-e36bd4e3c7c5"
                },
                "displayName": "Page Node",
                "nodeType": "PageNode",
                "x": 0,
                "y": 0
              },
              "fc490ca4-5c00-3124-9bbe-3554a4fdf6fb": {
                "connections": {
                  "outcome": "3295c76a-cbf4-3aae-933c-36b1b5fc2cb1"
                },
                "displayName": "Get Session Data",
                "nodeType": "SessionDataNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "RetryLimit": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "1679091c-5a88-3faf-afb5-e6087eb1b2dc": {
              "_id": "1679091c-5a88-3faf-afb5-e6087eb1b2dc",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "UsernameCollectorNode",
                "collection": true,
                "name": "Username Collector"
              }
            },
            "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26": {
              "_id": "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26",
              "_outcomes": [
                {
                  "displayName": "Retry",
                  "id": "Retry"
                },
                {
                  "displayName": "Reject",
                  "id": "Reject"
                }
              ],
              "_type": {
                "_id": "RetryLimitDecisionNode",
                "collection": true,
                "name": "Retry Limit Decision"
              },
              "incrementUserAttributeOnFailure": true,
              "retryLimit": 3
            },
            "8f14e45f-ceea-367a-9a36-dedd4bea2543": {
              "_id": "8f14e45f-ceea-367a-9a36-dedd4bea2543",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            },
            "c9f0f895-fb98-3b91-99f5-1fd0297e236d": {
              "_id": "c9f0f895-fb98-3b91-99f5-1fd0297e236d",
              "_outcomes": [
                {
                  "displayName": "True",
                  "id": "true"
                },
                {
                  "displayName": "False",
                  "id": "false"
                }
              ],
              "_type": {
                "_id": "DataStoreDecisionNode",
                "collection": true,
                "name": "Data Store Decision"
              }
            },
            "d3d94468-02a4-3259-b55d-38e6d163e820": {
              "_id": "d3d94468-02a4-3259-b55d-38e6d163e820",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "AccountLockoutNode",
                "collection": true,
                "name": "Account Lockout"
              },
              "lockAction": "LOCK"
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "RetryLimit",
            "description": "null",
            "enabled": true,
            "entryNodeId": "1679091c-5a88-3faf-afb5-e6087eb1b2dc",
            "identityResource": "null",
            "innerTreeOnly": false,
            "nodes": {
              "1679091c-5a88-3faf-afb5-e6087eb1b2dc": {
                "connections": {
                  "outcome": "8f14e45f-ceea-367a-9a36-dedd4bea2543"
                },
                "displayName": "User Name Collector",
                "nodeType": "UsernameCollectorNode",
                "x": 0,
                "y": 0
              },
              "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26": {
                "connections": {
                  "Reject": "d3d94468-02a4-3259-b55d-38e6d163e820",
                  "Retry": "1679091c-5a88-3faf-afb5-e6087eb1b2dc"
                },
                "displayName": "Retry Limit Decision",
                "nodeType": "RetryLimitDecisionNode",
                "x": 0,
                "y": 0
              },
              "8f14e45f-ceea-367a-9a36-dedd4bea2543": {
                "connections": {
                  "outcome": "c9f0f895-fb98-3b91-99f5-1fd0297e236d"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 0,
                "y": 0
              },
              "c9f0f895-fb98-3b91-99f5-1fd0297e236d": {
                "connections": {
                  "false": "45c48cce-2e2d-3fbd-aa1a-fc51c7c6ad26",
                  "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Data Store Decision",
                "nodeType": "DataStoreDecisionNode",
                "x": 0,
                "y": 0
              },
              "d3d94468-02a4-3259-b55d-38e6d163e820": {
                "connections": {
                  "outcome": "e301438c-0bd0-429c-ab0c-66126501069a"
                },
                "displayName": "Account Lockout",
                "nodeType": "AccountLockoutNode",
                "x": 0,
                "y": 0
              }
            },
            "uiConfig": {}
          }
        },
        "Test Tree": {
          "circlesOfTrust": {},
          "emailTemplates": {},
          "innerNodes": {},
          "nodes": {
            "0254ab35-daea-40db-9a53-44fc06715e48": {
              "_id": "0254ab35-daea-40db-9a53-44fc06715e48",
              "_outcomes": [
                {
                  "displayName": "Outcome",
                  "id": "outcome"
                }
              ],
              "_type": {
                "_id": "PasswordCollectorNode",
                "collection": true,
                "name": "Password Collector"
              }
            }
          },
          "saml2Entities": {},
          "scripts": {},
          "socialIdentityProviders": {},
          "themes": [],
          "tree": {
            "_id": "Test Tree",
            "enabled": true,
            "entryNodeId": "0254ab35-daea-40db-9a53-44fc06715e48",
            "innerTreeOnly": false,
            "nodes": {
              "0254ab35-daea-40db-9a53-44fc06715e48": {
                "connections": {
                  "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
                },
                "displayName": "Password Collector",
                "nodeType": "PasswordCollectorNode",
                "x": 150,
                "y": 20
              }
            },
            "staticNodes": {
              "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
                "x": 447,
                "y": 49
              },
              "e301438c-0bd0-429c-ab0c-66126501069a": {
                "x": 577,
                "y": 71
              },
              "startNode": {
                "x": 50,
                "y": 25
              }
            },
            "uiConfig": {}
          }
        }
      },
      "trustedJwtIssuer": {},
      "webhookService": {
        "webhooks": {
          "_id": "webhooks",
          "_type": {
            "_id": "webhooks",
            "collection": true,
            "name": "Webhook Service"
          },
          "headers": {
            "accept": "*/*"
          }
        }
      },
      "wsEntity": {
        "ws": {
          "_id": "ws",
          "_type": {
            "_id": "ws",
            "collection": true,
            "name": "Entity Descriptor "
          }
        }
      }
    }
  }
}
