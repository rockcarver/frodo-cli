{
    status: 200,
    statusText: 'OK',
    headers: Object [AxiosHeaders] {
      date: 'Mon, 28 Apr 2025 16:04:58 GMT',
      'cache-control': 'no-store',
      'content-api-version': 'protocol=2.1,resource=1.0',
      'content-security-policy': "default-src 'none';frame-ancestors 'none';sandbox",
      'content-type': 'application/json;charset=utf-8',
      'cross-origin-opener-policy': 'same-origin',
      'cross-origin-resource-policy': 'same-origin',
      expires: '0',
      pragma: 'no-cache',
      'set-cookie': [
        'session-jwt=eyJ0eXAiOiJKV1QiLCJraWQiOiJvcGVuaWRtLWp3dHNlc3Npb25obWFjLWtleSIsImN0eSI6IkpXVCIsImFsZyI6IkhTMjU2In0.ZXlKMGVYQWlPaUpLVjFRaUxDSnJhV1FpT2lKdmNHVnVhV1J0TFd4dlkyRnNhRzl6ZENJc0ltVnVZeUk2SWtFeE1qaERRa010U0ZNeU5UWWlMQ0poYkdjaU9pSlNVMEV4WHpVaWZRLlBPY0hseWtra05oeUswZ0tzOFdBSjhCNWxiVjBDX1BEOVlKUXUwYXNVaTlKRVR2bi1CbnF2QnYtVldVTUtlQ2Vkcjh6NGR4RVphR1lLRGViT2lIVy1GbGtBY2JzZDYyYjBfSS1ObWZyYTNQRF9PMWwwM3NBbm9kNDdxRVpGVHJRenR2aW1HcXFpVEFGT0dNd3g3SF85VV9tSFN0a2g3XzVjdmMxTFI5d2MtZjdRVmpPRHVnTTJOY242ZVFydEpVZ3dnLXVtQTVDSXZ6NEZNamQ1MWhST19HQnZqcXZyMUV1YVBCMTU2NHBGME9OeTh4M1pkSHktUWpBa21ENDJ2VURKQjJ3UnV1V0FKVllkZG15TE8wY2N1S1BiUWRLb0xraFhCRG9Pb0NnZmpxNmh1TjhYOV9FdVRtSHlZRENueDhONnEwZkFvLUZVdkJZYkRSejZnSXZMdy41OGtsMENnU0c2cFRnTmVpSV9fOS1nLlVYSlcyTmx0T2VmX0NGQUdJaDU4MThsQjl1bnU3S1hjcVlpUjFkOFVUWlVJOGE4WlRHcWFzVGxldDh4Si1iamphN2Q0cVlfajkyTS1HZk11UTNBQzdUM25KMzREd3BMVDV0S2M0TlV2cnRYUmwzdndhY1Nkb2Y3eFo5YW93VDJzR0M4VG9WcFdrai1iNWM4alV6Snh6RGdjMnd3S2xVTVVNLUVNbmJ6Z01KUV9UYU1kVjhWLWh1REh2ZGJHcHpjUWRTWXI2UW5lVU1XdnBkU1J5WGJYMXNuUWZlaFpIM2NQam85TjF6bEo4cXkwR085akUzbXZrYWMyVzBNbWJqSi04ZnVjR1JXR2RWTFVUWGZueVItUE9LOGFpc3FZR3AzTnAxNW1ZZ3lna3FEbWE2eVNWVGJvQTVQX0NVcFU1VzlaQTdkN0hYdlVCWFVnWm5XR2FkNmZEcVVlTzJWUEFvOHpIdUswMDFwYVFVd1hMWGxWTEx0eXZCS2w0a1J0RGtQUnN5OHdyR2U2QkRkV3lteGxoYVVONEU2cms0eVI0S1VrTWNjT3NXd0FsMXd2WndiTVhUaFd5cHl1NG80S0NqTUlfRHN5TzhlZkNZMUFUVXNXNVZuZzZUU0tVRXVYalV5Q0xMc0E3bTUtU2oyOEhramhVbEVPRURqZ3lJS0M5dTZ2VTMwbXMyeHpsYzlINzZmUHZnb3V2OU81bWFTWDJLZXhOXzNVV3dyd2xFX3JEN0Z0QXNORllReXFVOW5lWU9WenpnNmtpOVAtbE9DMF9CeThZbmZxVHFVYXZiMFhWY1NyMFhGSXp2TGFCaWZTdG4zVjM4MEJ5ZWozOU9JYTlwbmdjS0o3amMyRGREc0drdHI1TGZnTFRCV0Q0X19KclRCVTRtNGkzSFNvV0lLVEQ2R3F4UFRycjQ4V0dqQXJveWgyMmE2dEtiU0k4RjlfSkhNVURpdV9QQS52dEVLeXZYSmJBOFZaV0xneUk2YTJB.pBcYD-5IYhEjHkMya_IZOnx8rhdnuPf44YzOYKidNMI; Path=/; HttpOnly'
      ],
      'x-content-type-options': 'nosniff',
      'x-frame-options': 'DENY',
      'content-length': '334'
    },
    config: <ref *1> {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 30000,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: { FormData: [Function [FormData]], Blob: [class Blob] },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': '@rockcarver/frodo-lib/3.0.4-0',
        'X-ForgeRock-TransactionId': 'frodo-9dfa2d7a-080c-4668-bfa8-120c11646414',
        'X-OpenIDM-Username': 'openidm-admin',
        'X-OpenIDM-Password': 'openidm-admin',
        'Content-Length': '2',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      httpAgent: Agent3 {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      httpsAgent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype],
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        createSocketCount: 1,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 3,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 1
      },
      proxy: null,
      method: 'post',
      url: 'https://localhost:8443/openidm/authentication?_action=login',
      data: '{}',
      allowAbsoluteUrls: true,
      curlObject: CurlHelper { request: [Circular *1] },
      curlCommand: `curl -X POST -H "Accept:application/json, text/plain, */*" -H "Content-Type:application/json" -H "User-Agent:@rockcarver/frodo-lib/3.0.4-0" -H "X-ForgeRock-TransactionId:frodo-9dfa2d7a-080c-4668-bfa8-120c11646414" -H "X-OpenIDM-Username:openidm-admin" -H "X-OpenIDM-Password:openidm-admin" --data '{}' "https://localhost:8443/openidm/authentication?_action=login"`,
      clearCurl: [Function (anonymous)]
    },
    request: <ref *2> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: '2',
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: true,
      socket: TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'localhost',
        alpnProtocol: false,
        authorized: false,
        authorizationError: 'DEPTH_ZERO_SELF_SIGNED_CERT',
        encrypted: true,
        _events: [Object: null prototype],
        _eventsCount: 9,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _readableState: [ReadableState],
        _writableState: [WritableState],
        allowHalfOpen: false,
        _maxListeners: undefined,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: [TLSWrap],
        _requestCert: true,
        _rejectUnauthorized: false,
        timeout: 30000,
        parser: null,
        _httpMessage: null,
        autoSelectFamilyAttemptedAddresses: [Array],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: [TLSWrap],
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: -1,
        [Symbol(kHandle)]: [TLSWrap],
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 30000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 237,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 76,
          [Symbol(triggerId)]: 74
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 1,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: [Object],
        [Symbol(agentkeepalive#socketName)]: 'sock[0#localhost:8443::::::::false:::::::::::::]',
        [Symbol(agentkeepalive#socketRequestCount)]: 3,
        [Symbol(agentkeepalive#socketRequestFinishedCount)]: 3
      },
      _header: 'POST /openidm/authentication?_action=login HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: @rockcarver/frodo-lib/3.0.4-0\r\n' +
        'X-ForgeRock-TransactionId: frodo-9dfa2d7a-080c-4668-bfa8-120c11646414\r\n' +
        'X-OpenIDM-Username: openidm-admin\r\n' +
        'X-OpenIDM-Password: openidm-admin\r\n' +
        'Content-Length: 2\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8443\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype],
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        createSocketCount: 1,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 3,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 1
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/openidm/authentication?_action=login',
      _ended: true,
      res: IncomingMessage {
        _events: [Object],
        _readableState: [ReadableState],
        _maxListeners: undefined,
        socket: null,
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [Array],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 200,
        statusMessage: 'OK',
        client: [TLSSocket],
        _consuming: false,
        _dumped: false,
        req: [Circular *2],
        _eventsCount: 4,
        responseUrl: 'https://localhost:8443/openidm/authentication?_action=login',
        redirects: [],
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: [Object],
        [Symbol(kHeadersCount)]: 26,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: true,
      host: 'localhost',
      protocol: 'https:',
      _redirectable: Writable {
        _events: [Object],
        _writableState: [WritableState],
        _maxListeners: undefined,
        _options: [Object],
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 2,
        _requestBodyBuffers: [],
        _eventsCount: 3,
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *2],
        _currentUrl: 'https://localhost:8443/openidm/authentication?_action=login',
        _timeout: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false
      },
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'content-type': [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'x-openidm-username': [Array],
        'x-openidm-password': [Array],
        'content-length': [Array],
        'accept-encoding': [Array],
        host: [Array]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: {
      _id: 'login',
      authorization: {
        userRolesProperty: 'authzRoles',
        component: 'internal/user',
        authLogin: true,
        roles: [Array],
        ipAddress: '[0:0:0:0:0:0:0:1]',
        authenticationId: 'openidm-admin',
        id: 'openidm-admin',
        moduleId: 'STATIC_USER'
      },
      authenticationId: 'openidm-admin'
    }
  }
